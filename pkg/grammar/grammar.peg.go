package grammar

// Code generated by peg -inline -switch -strict -output pkg/grammar/grammar.peg.go pkg/grammar/grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleValid
	ruleResponse
	ruleCommand
	ruleMutation
	ruleTreeMutation
	ruleQuery
	ruleFetchQuery
	ruleListQuery
	ruleExistsQuery
	ruleStateBound
	ruleCreateOrFetch
	ruleCreateOrSet
	ruleObject
	ruleWorldObject
	ruleItemObject
	ruleRelObject
	ruleError
	ruleLimit
	ruleIdentifier
	ruleSecondIdentifier
	ruleDualIdentifier
	ruleIdentifierList
	ruleItemParams
	ruleRelParams
	ruleItemParam
	ruleRelParam
	ruleItemKeys
	ruleRelKeys
	ruleItemKey
	ruleRelKey
	ruleStringLike
	ruleNumber
	ruleBoolean
	ruleText
	ruleQuotedText
	ruleItemExists
	ruleRelExists
	ruleWorld
	ruleItem
	ruleRel
	ruleCreate
	ruleFetch
	ruleSet
	ruleClear
	ruleDelete
	ruleList
	ruleNest
	ruleFree
	ruleExists
	ruleInQuery
	ruleFromQuery
	ruleToQuery
	ruleFlag
	ruleStrictFlag
	ruleVerboseFlag
	ruleIdsFlag
	ruleBeginWorld
	ruleEndWorld
	ruleItemType
	ruleKeyword
	ruleWORLD
	ruleENDWORLD
	ruleERROR
	ruleITEM
	ruleITEM_EXISTS
	ruleREL
	ruleREL_EXISTS
	ruleFROM_QUERY
	ruleTO_QUERY
	ruleIN
	ruleIN_QUERY
	ruleCREATE
	ruleDELETE
	ruleSET
	ruleCLEAR
	ruleFETCH
	ruleLIST
	ruleEXISTS
	ruleFREE
	ruleNEST
	ruleTRUE
	ruleFALSE
	ruleEXTERNAL
	ruleNAME
	ruleTYPE
	ruleVERB
	ruleMECHANISM
	ruleASYNC
	ruleEXPANDED
	rulePERSON
	ruleDATABASE
	ruleQUEUE
	ruleBLOBSTORE
	ruleBROWSER
	ruleMOBILE
	ruleSERVER
	ruleDEVICE
	ruleCODE
	ruleDELIMITER
	ruleQUOTE
	ruleEQUALS
	ruleFLAG
	ruleSTRICT
	ruleVERBOSE
	ruleIDS
	rule_
	ruleWhitespace
	ruleEOL
	ruleEND
	ruleAction0
	ruleAction1
	rulePegText
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
)

var rul3s = [...]string{
	"Unknown",
	"Valid",
	"Response",
	"Command",
	"Mutation",
	"TreeMutation",
	"Query",
	"FetchQuery",
	"ListQuery",
	"ExistsQuery",
	"StateBound",
	"CreateOrFetch",
	"CreateOrSet",
	"Object",
	"WorldObject",
	"ItemObject",
	"RelObject",
	"Error",
	"Limit",
	"Identifier",
	"SecondIdentifier",
	"DualIdentifier",
	"IdentifierList",
	"ItemParams",
	"RelParams",
	"ItemParam",
	"RelParam",
	"ItemKeys",
	"RelKeys",
	"ItemKey",
	"RelKey",
	"StringLike",
	"Number",
	"Boolean",
	"Text",
	"QuotedText",
	"ItemExists",
	"RelExists",
	"World",
	"Item",
	"Rel",
	"Create",
	"Fetch",
	"Set",
	"Clear",
	"Delete",
	"List",
	"Nest",
	"Free",
	"Exists",
	"InQuery",
	"FromQuery",
	"ToQuery",
	"Flag",
	"StrictFlag",
	"VerboseFlag",
	"IdsFlag",
	"BeginWorld",
	"EndWorld",
	"ItemType",
	"Keyword",
	"WORLD",
	"ENDWORLD",
	"ERROR",
	"ITEM",
	"ITEM_EXISTS",
	"REL",
	"REL_EXISTS",
	"FROM_QUERY",
	"TO_QUERY",
	"IN",
	"IN_QUERY",
	"CREATE",
	"DELETE",
	"SET",
	"CLEAR",
	"FETCH",
	"LIST",
	"EXISTS",
	"FREE",
	"NEST",
	"TRUE",
	"FALSE",
	"EXTERNAL",
	"NAME",
	"TYPE",
	"VERB",
	"MECHANISM",
	"ASYNC",
	"EXPANDED",
	"PERSON",
	"DATABASE",
	"QUEUE",
	"BLOBSTORE",
	"BROWSER",
	"MOBILE",
	"SERVER",
	"DEVICE",
	"CODE",
	"DELIMITER",
	"QUOTE",
	"EQUALS",
	"FLAG",
	"STRICT",
	"VERBOSE",
	"IDS",
	"_",
	"Whitespace",
	"EOL",
	"END",
	"Action0",
	"Action1",
	"PegText",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	StmtType string
	InputAttributes
	Response

	text   string // Text parsed by the StringLike rule.
	number int    // Number parsed by the Number rule.
	bool   bool   // Boolean parsed by the Boolean rule.

	Buffer string
	buffer []rune
	rules  [160]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.StmtType = "Response"

		case ruleAction1:

			p.StmtType = "Command"
			p.InputAttributes.Raw = p.Buffer

		case ruleAction2:
			p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text))
		case ruleAction3:
			p.InputAttributes.Verb = "fetch"
		case ruleAction4:
			p.InputAttributes.Verb = "list"
		case ruleAction5:
			p.InputAttributes.Verb = "create-or-fetch"
		case ruleAction6:
			p.InputAttributes.Verb = "create-or-set"
		case ruleAction7:
			p.Response.Object.Repr = cleanString(text)
		case ruleAction8:
			p.Response.Object.Repr = cleanString(text)
		case ruleAction9:
			p.Response.Object.Repr = cleanString(text)
		case ruleAction10:

			p.Response.Error.Message = cleanString(text)
			if p.number != 0 {
				p.Response.Error.Code = p.number
			}

		case ruleAction11:
			p.InputAttributes.Params["limit"] = cleanString(text)
		case ruleAction12:
			p.InputAttributes.ResourceId = cleanString(text)
		case ruleAction13:

			p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text))

		case ruleAction14:

			p.InputAttributes.ResourceId = ""
			ids := strings.Fields(text)
			for _, id := range ids {
				p.InputAttributes.ResourceIds = append(p.InputAttributes.ResourceIds, cleanString(id))
			}

		case ruleAction15:
			p.Params["external"] = cleanString(text)
		case ruleAction16:
			p.Params["type"] = cleanString(text)
		case ruleAction17:
			p.Params["name"] = cleanString(text)
		case ruleAction18:
			p.Params["mechanism"] = cleanString(text)
		case ruleAction19:
			p.Params["expanded"] = cleanString(text)
		case ruleAction20:
			p.Params["verb"] = cleanString(text)
		case ruleAction21:
			p.Params["mechanism"] = cleanString(text)
		case ruleAction22:
			p.Params["async"] = cleanString(text)
		case ruleAction23:
			p.Params["expanded"] = cleanString(text)
		case ruleAction24:
			p.InputAttributes.Params[cleanString(text)] = ""
		case ruleAction25:
			p.InputAttributes.Params[cleanString(text)] = ""
		case ruleAction26:
			p.text = cleanString(text)
		case ruleAction27:
			n, _ := strconv.Atoi(text)
			p.number = n
		case ruleAction28:
			p.bool = text == "true"
		case ruleAction29:
			p.InputAttributes.ResourceType = "item"
			p.InputAttributes.Verb = "exists"
		case ruleAction30:
			p.InputAttributes.ResourceType = "rel"
			p.InputAttributes.Verb = "exists"
		case ruleAction31:
			p.InputAttributes.ResourceType = "world"
		case ruleAction32:
			p.InputAttributes.ResourceType = "item"
		case ruleAction33:
			p.InputAttributes.ResourceType = "rel"
		case ruleAction34:
			p.InputAttributes.Verb = "create"
		case ruleAction35:
			p.InputAttributes.Verb = "fetch"
		case ruleAction36:
			p.InputAttributes.Verb = "set"
		case ruleAction37:
			p.InputAttributes.Verb = "clear"
		case ruleAction38:
			p.InputAttributes.Verb = "delete"
		case ruleAction39:
			p.InputAttributes.Verb = "list"
		case ruleAction40:
			p.InputAttributes.Verb = "nest"
			p.InputAttributes.ResourceType = "item"
		case ruleAction41:
			p.InputAttributes.Verb = "free"
			p.InputAttributes.ResourceType = "item"
		case ruleAction42:
			p.InputAttributes.Verb = "exists"
		case ruleAction43:
			p.InputAttributes.Verb = "in?"
			p.InputAttributes.ResourceType = "item"
		case ruleAction44:
			p.InputAttributes.Verb = "from?"
			p.InputAttributes.ResourceType = "rel"
		case ruleAction45:
			p.InputAttributes.Verb = "to?"
			p.InputAttributes.ResourceType = "rel"
		case ruleAction46:
			p.InputAttributes.Flags = append(p.InputAttributes.Flags, "strict")
		case ruleAction47:
			p.InputAttributes.Flags = append(p.InputAttributes.Flags, "verbose")
		case ruleAction48:
			p.InputAttributes.Flags = append(p.InputAttributes.Flags, "ids")

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Valid <- <(Command / Response)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						if !_rules[rule_]() {
							goto l3
						}
						{
							position5, tokenIndex5 := position, tokenIndex
							{
								position7 := position
								{
									position8, tokenIndex8 := position, tokenIndex
									if !_rules[ruleItem]() {
										goto l9
									}
									{
										position10, tokenIndex10 := position, tokenIndex
										if !_rules[ruleCreate]() {
											goto l11
										}
										goto l10
									l11:
										position, tokenIndex = position10, tokenIndex10
										if !_rules[ruleSet]() {
											goto l9
										}
									}
								l10:
									if !_rules[ruleIdentifier]() {
										goto l9
									}
									{
										position12, tokenIndex12 := position, tokenIndex
										if !_rules[ruleItemParams]() {
											goto l12
										}
										goto l13
									l12:
										position, tokenIndex = position12, tokenIndex12
									}
								l13:
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleItem]() {
										goto l14
									}
									if !_rules[ruleClear]() {
										goto l14
									}
									if !_rules[ruleIdentifier]() {
										goto l14
									}
									{
										position15 := position
										{
											position18 := position
											{
												position19 := position
												{
													position20, tokenIndex20 := position, tokenIndex
													if !_rules[ruleEXTERNAL]() {
														goto l21
													}
													goto l20
												l21:
													position, tokenIndex = position20, tokenIndex20
													{
														switch buffer[position] {
														case 'e':
															if !_rules[ruleEXPANDED]() {
																goto l14
															}
														case 'm':
															if !_rules[ruleMECHANISM]() {
																goto l14
															}
														case 't':
															if !_rules[ruleTYPE]() {
																goto l14
															}
														default:
															if !_rules[ruleNAME]() {
																goto l14
															}
														}
													}

												}
											l20:
												add(rulePegText, position19)
											}
											if !_rules[rule_]() {
												goto l14
											}
											{
												add(ruleAction24, position)
											}
											add(ruleItemKey, position18)
										}
									l16:
										{
											position17, tokenIndex17 := position, tokenIndex
											{
												position24 := position
												{
													position25 := position
													{
														position26, tokenIndex26 := position, tokenIndex
														if !_rules[ruleEXTERNAL]() {
															goto l27
														}
														goto l26
													l27:
														position, tokenIndex = position26, tokenIndex26
														{
															switch buffer[position] {
															case 'e':
																if !_rules[ruleEXPANDED]() {
																	goto l17
																}
															case 'm':
																if !_rules[ruleMECHANISM]() {
																	goto l17
																}
															case 't':
																if !_rules[ruleTYPE]() {
																	goto l17
																}
															default:
																if !_rules[ruleNAME]() {
																	goto l17
																}
															}
														}

													}
												l26:
													add(rulePegText, position25)
												}
												if !_rules[rule_]() {
													goto l17
												}
												{
													add(ruleAction24, position)
												}
												add(ruleItemKey, position24)
											}
											goto l16
										l17:
											position, tokenIndex = position17, tokenIndex17
										}
										add(ruleItemKeys, position15)
									}
									goto l8
								l14:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleItem]() {
										goto l30
									}
									if !_rules[ruleDelete]() {
										goto l30
									}
									if !_rules[ruleIdentifier]() {
										goto l30
									}
									goto l8
								l30:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleRel]() {
										goto l31
									}
									{
										position32, tokenIndex32 := position, tokenIndex
										if !_rules[ruleCreate]() {
											goto l33
										}
										goto l32
									l33:
										position, tokenIndex = position32, tokenIndex32
										if !_rules[ruleSet]() {
											goto l31
										}
									}
								l32:
									if !_rules[ruleDualIdentifier]() {
										goto l31
									}
									{
										position34, tokenIndex34 := position, tokenIndex
										if !_rules[ruleRelParams]() {
											goto l34
										}
										goto l35
									l34:
										position, tokenIndex = position34, tokenIndex34
									}
								l35:
									goto l8
								l31:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleRel]() {
										goto l36
									}
									if !_rules[ruleClear]() {
										goto l36
									}
									if !_rules[ruleDualIdentifier]() {
										goto l36
									}
									{
										position37 := position
										{
											position40 := position
											{
												position41 := position
												{
													switch buffer[position] {
													case 'e':
														if !_rules[ruleEXPANDED]() {
															goto l36
														}
													case 'a':
														if !_rules[ruleASYNC]() {
															goto l36
														}
													case 'm':
														if !_rules[ruleMECHANISM]() {
															goto l36
														}
													default:
														if !_rules[ruleVERB]() {
															goto l36
														}
													}
												}

												add(rulePegText, position41)
											}
											if !_rules[rule_]() {
												goto l36
											}
											{
												add(ruleAction25, position)
											}
											add(ruleRelKey, position40)
										}
									l38:
										{
											position39, tokenIndex39 := position, tokenIndex
											{
												position44 := position
												{
													position45 := position
													{
														switch buffer[position] {
														case 'e':
															if !_rules[ruleEXPANDED]() {
																goto l39
															}
														case 'a':
															if !_rules[ruleASYNC]() {
																goto l39
															}
														case 'm':
															if !_rules[ruleMECHANISM]() {
																goto l39
															}
														default:
															if !_rules[ruleVERB]() {
																goto l39
															}
														}
													}

													add(rulePegText, position45)
												}
												if !_rules[rule_]() {
													goto l39
												}
												{
													add(ruleAction25, position)
												}
												add(ruleRelKey, position44)
											}
											goto l38
										l39:
											position, tokenIndex = position39, tokenIndex39
										}
										add(ruleRelKeys, position37)
									}
									goto l8
								l36:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleRel]() {
										goto l6
									}
									if !_rules[ruleDelete]() {
										goto l6
									}
									if !_rules[ruleDualIdentifier]() {
										goto l6
									}
								}
							l8:
								add(ruleMutation, position7)
							}
							goto l5
						l6:
							position, tokenIndex = position5, tokenIndex5
							{
								position49 := position
								{
									position50, tokenIndex50 := position, tokenIndex
									{
										position52 := position
										if !_rules[ruleFREE]() {
											goto l51
										}
										{
											add(ruleAction41, position)
										}
										add(ruleFree, position52)
									}
									if !_rules[ruleIdentifierList]() {
										goto l51
									}
									goto l50
								l51:
									position, tokenIndex = position50, tokenIndex50
									{
										position54 := position
										if !_rules[ruleNEST]() {
											goto l48
										}
										{
											add(ruleAction40, position)
										}
										add(ruleNest, position54)
									}
									if !_rules[ruleIdentifierList]() {
										goto l48
									}
									if !_rules[rule_]() {
										goto l48
									}
									if !_rules[ruleIN]() {
										goto l48
									}
									{
										position56 := position
										if !_rules[ruleStringLike]() {
											goto l48
										}
										add(rulePegText, position56)
									}
									{
										add(ruleAction2, position)
									}
								}
							l50:
								add(ruleTreeMutation, position49)
							}
							goto l5
						l48:
							position, tokenIndex = position5, tokenIndex5
							{
								position59 := position
								{
									position60, tokenIndex60 := position, tokenIndex
									{
										position62 := position
										{
											switch buffer[position] {
											case 'w':
												{
													position64 := position
													if !_rules[ruleWORLD]() {
														goto l61
													}
													{
														add(ruleAction31, position)
													}
													add(ruleWorld, position64)
												}
												{
													add(ruleAction3, position)
												}
											case 'r':
												if !_rules[ruleRel]() {
													goto l61
												}
												if !_rules[ruleFetch]() {
													goto l61
												}
												if !_rules[ruleDualIdentifier]() {
													goto l61
												}
											default:
												if !_rules[ruleItem]() {
													goto l61
												}
												if !_rules[ruleFetch]() {
													goto l61
												}
												if !_rules[ruleIdentifier]() {
													goto l61
												}
											}
										}

										add(ruleFetchQuery, position62)
									}
									goto l60
								l61:
									position, tokenIndex = position60, tokenIndex60
									{
										position68 := position
										{
											position69, tokenIndex69 := position, tokenIndex
											{
												position71, tokenIndex71 := position, tokenIndex
												if !_rules[ruleItem]() {
													goto l72
												}
												goto l71
											l72:
												position, tokenIndex = position71, tokenIndex71
												if !_rules[ruleRel]() {
													goto l70
												}
											}
										l71:
											{
												position73 := position
												if !_rules[ruleLIST]() {
													goto l70
												}
												{
													add(ruleAction39, position)
												}
												add(ruleList, position73)
											}
											{
												position75, tokenIndex75 := position, tokenIndex
												{
													position77 := position
													{
														position78 := position
														if !_rules[ruleNumber]() {
															goto l75
														}
														add(rulePegText, position78)
													}
													{
														add(ruleAction11, position)
													}
													add(ruleLimit, position77)
												}
												goto l76
											l75:
												position, tokenIndex = position75, tokenIndex75
											}
										l76:
											goto l69
										l70:
											position, tokenIndex = position69, tokenIndex69
											{
												switch buffer[position] {
												case 'f':
													{
														position81 := position
														if !_rules[ruleFROM_QUERY]() {
															goto l67
														}
														{
															add(ruleAction44, position)
														}
														add(ruleFromQuery, position81)
													}
													if !_rules[ruleIdentifier]() {
														goto l67
													}
												case 't':
													{
														position83 := position
														if !_rules[ruleTO_QUERY]() {
															goto l67
														}
														{
															add(ruleAction45, position)
														}
														add(ruleToQuery, position83)
													}
													if !_rules[ruleIdentifier]() {
														goto l67
													}
												default:
													if !_rules[ruleItem]() {
														goto l67
													}
													if !_rules[ruleIN]() {
														goto l67
													}
													if !_rules[ruleIdentifier]() {
														goto l67
													}
													{
														add(ruleAction4, position)
													}
												}
											}

										}
									l69:
										add(ruleListQuery, position68)
									}
									goto l60
								l67:
									position, tokenIndex = position60, tokenIndex60
									{
										position86 := position
										{
											position87, tokenIndex87 := position, tokenIndex
											{
												position89 := position
												if !_rules[ruleIN_QUERY]() {
													goto l88
												}
												{
													add(ruleAction43, position)
												}
												add(ruleInQuery, position89)
											}
											if !_rules[ruleDualIdentifier]() {
												goto l88
											}
											goto l87
										l88:
											position, tokenIndex = position87, tokenIndex87
											{
												position92 := position
												{
													position93, tokenIndex93 := position, tokenIndex
													if !_rules[ruleITEM_EXISTS]() {
														goto l94
													}
													goto l93
												l94:
													position, tokenIndex = position93, tokenIndex93
													if !_rules[ruleItem]() {
														goto l91
													}
													if !_rules[ruleExists]() {
														goto l91
													}
												}
											l93:
												{
													add(ruleAction29, position)
												}
												add(ruleItemExists, position92)
											}
											if !_rules[ruleIdentifier]() {
												goto l91
											}
											goto l87
										l91:
											position, tokenIndex = position87, tokenIndex87
											{
												position96 := position
												{
													position97, tokenIndex97 := position, tokenIndex
													if !_rules[ruleREL_EXISTS]() {
														goto l98
													}
													goto l97
												l98:
													position, tokenIndex = position97, tokenIndex97
													if !_rules[ruleRel]() {
														goto l58
													}
													if !_rules[ruleExists]() {
														goto l58
													}
												}
											l97:
												{
													add(ruleAction30, position)
												}
												add(ruleRelExists, position96)
											}
											if !_rules[ruleDualIdentifier]() {
												goto l58
											}
										}
									l87:
										add(ruleExistsQuery, position86)
									}
								}
							l60:
								add(ruleQuery, position59)
							}
							goto l5
						l58:
							position, tokenIndex = position5, tokenIndex5
							{
								position100 := position
								{
									position101, tokenIndex101 := position, tokenIndex
									{
										position103 := position
										{
											position104, tokenIndex104 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l105
											}
											if !_rules[ruleIdentifier]() {
												goto l105
											}
											{
												position106, tokenIndex106 := position, tokenIndex
												if !_rules[ruleItemParams]() {
													goto l106
												}
												goto l105
											l106:
												position, tokenIndex = position106, tokenIndex106
											}
											goto l104
										l105:
											position, tokenIndex = position104, tokenIndex104
											if !_rules[ruleRel]() {
												goto l102
											}
											if !_rules[ruleDualIdentifier]() {
												goto l102
											}
											{
												position107, tokenIndex107 := position, tokenIndex
												if !_rules[ruleRelParams]() {
													goto l107
												}
												goto l102
											l107:
												position, tokenIndex = position107, tokenIndex107
											}
										}
									l104:
										add(ruleCreateOrFetch, position103)
									}
									{
										add(ruleAction5, position)
									}
									goto l101
								l102:
									position, tokenIndex = position101, tokenIndex101
									{
										position109 := position
										{
											position110, tokenIndex110 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l111
											}
											if !_rules[ruleIdentifier]() {
												goto l111
											}
											if !_rules[ruleItemParams]() {
												goto l111
											}
											goto l110
										l111:
											position, tokenIndex = position110, tokenIndex110
											if !_rules[ruleRel]() {
												goto l3
											}
											if !_rules[ruleDualIdentifier]() {
												goto l3
											}
											if !_rules[ruleRelParams]() {
												goto l3
											}
										}
									l110:
										add(ruleCreateOrSet, position109)
									}
									{
										add(ruleAction6, position)
									}
								}
							l101:
								add(ruleStateBound, position100)
							}
						}
					l5:
					l113:
						{
							position114, tokenIndex114 := position, tokenIndex
							{
								position115 := position
								{
									position116, tokenIndex116 := position, tokenIndex
									{
										position118 := position
										if !_rules[ruleFLAG]() {
											goto l117
										}
										{
											position119 := position
											if buffer[position] != rune('s') {
												goto l117
											}
											position++
											if buffer[position] != rune('t') {
												goto l117
											}
											position++
											if buffer[position] != rune('r') {
												goto l117
											}
											position++
											if buffer[position] != rune('i') {
												goto l117
											}
											position++
											if buffer[position] != rune('c') {
												goto l117
											}
											position++
											if buffer[position] != rune('t') {
												goto l117
											}
											position++
											if !_rules[rule_]() {
												goto l117
											}
											add(ruleSTRICT, position119)
										}
										{
											add(ruleAction46, position)
										}
										add(ruleStrictFlag, position118)
									}
									goto l116
								l117:
									position, tokenIndex = position116, tokenIndex116
									{
										position122 := position
										if !_rules[ruleFLAG]() {
											goto l121
										}
										{
											position123 := position
											if buffer[position] != rune('v') {
												goto l121
											}
											position++
											if buffer[position] != rune('e') {
												goto l121
											}
											position++
											if buffer[position] != rune('r') {
												goto l121
											}
											position++
											if buffer[position] != rune('b') {
												goto l121
											}
											position++
											if buffer[position] != rune('o') {
												goto l121
											}
											position++
											if buffer[position] != rune('s') {
												goto l121
											}
											position++
											if buffer[position] != rune('e') {
												goto l121
											}
											position++
											if !_rules[rule_]() {
												goto l121
											}
											add(ruleVERBOSE, position123)
										}
										{
											add(ruleAction47, position)
										}
										add(ruleVerboseFlag, position122)
									}
									goto l116
								l121:
									position, tokenIndex = position116, tokenIndex116
									{
										position125 := position
										if !_rules[ruleFLAG]() {
											goto l114
										}
										{
											position126 := position
											if buffer[position] != rune('i') {
												goto l114
											}
											position++
											if buffer[position] != rune('d') {
												goto l114
											}
											position++
											if buffer[position] != rune('s') {
												goto l114
											}
											position++
											if !_rules[rule_]() {
												goto l114
											}
											add(ruleIDS, position126)
										}
										{
											add(ruleAction48, position)
										}
										add(ruleIdsFlag, position125)
									}
								}
							l116:
								add(ruleFlag, position115)
							}
							goto l113
						l114:
							position, tokenIndex = position114, tokenIndex114
						}
						if !_rules[ruleEND]() {
							goto l3
						}
						{
							add(ruleAction1, position)
						}
						add(ruleCommand, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position129 := position
						{
							position130, tokenIndex130 := position, tokenIndex
							{
								position132 := position
								{
									position133, tokenIndex133 := position, tokenIndex
									{
										position135 := position
										{
											position136 := position
											if !_rules[ruleDELIMITER]() {
												goto l134
											}
											if !_rules[ruleWORLD]() {
												goto l134
											}
											add(ruleBeginWorld, position136)
										}
										{
											position137 := position
										l138:
											{
												position139, tokenIndex139 := position, tokenIndex
												if !matchDot() {
													goto l139
												}
												goto l138
											l139:
												position, tokenIndex = position139, tokenIndex139
											}
											add(rulePegText, position137)
										}
										{
											position140 := position
											if !_rules[ruleENDWORLD]() {
												goto l134
											}
											if !_rules[ruleDELIMITER]() {
												goto l134
											}
											add(ruleEndWorld, position140)
										}
										{
											add(ruleAction7, position)
										}
										add(ruleWorldObject, position135)
									}
									goto l133
								l134:
									position, tokenIndex = position133, tokenIndex133
									{
										position145 := position
										{
											position146 := position
											if !_rules[ruleItem]() {
												goto l142
											}
											if !_rules[ruleIdentifier]() {
												goto l142
											}
											{
												position147, tokenIndex147 := position, tokenIndex
												if !_rules[ruleItemParams]() {
													goto l147
												}
												goto l148
											l147:
												position, tokenIndex = position147, tokenIndex147
											}
										l148:
											add(rulePegText, position146)
										}
										{
											add(ruleAction8, position)
										}
										add(ruleItemObject, position145)
									}
								l143:
									{
										position144, tokenIndex144 := position, tokenIndex
										{
											position150 := position
											{
												position151 := position
												if !_rules[ruleItem]() {
													goto l144
												}
												if !_rules[ruleIdentifier]() {
													goto l144
												}
												{
													position152, tokenIndex152 := position, tokenIndex
													if !_rules[ruleItemParams]() {
														goto l152
													}
													goto l153
												l152:
													position, tokenIndex = position152, tokenIndex152
												}
											l153:
												add(rulePegText, position151)
											}
											{
												add(ruleAction8, position)
											}
											add(ruleItemObject, position150)
										}
										goto l143
									l144:
										position, tokenIndex = position144, tokenIndex144
									}
									goto l133
								l142:
									position, tokenIndex = position133, tokenIndex133
									{
										position158 := position
										{
											position159 := position
											if !_rules[ruleRel]() {
												goto l155
											}
											if !_rules[ruleDualIdentifier]() {
												goto l155
											}
											{
												position160, tokenIndex160 := position, tokenIndex
												if !_rules[ruleRelParams]() {
													goto l160
												}
												goto l161
											l160:
												position, tokenIndex = position160, tokenIndex160
											}
										l161:
											add(rulePegText, position159)
										}
										{
											add(ruleAction9, position)
										}
										add(ruleRelObject, position158)
									}
								l156:
									{
										position157, tokenIndex157 := position, tokenIndex
										{
											position163 := position
											{
												position164 := position
												if !_rules[ruleRel]() {
													goto l157
												}
												if !_rules[ruleDualIdentifier]() {
													goto l157
												}
												{
													position165, tokenIndex165 := position, tokenIndex
													if !_rules[ruleRelParams]() {
														goto l165
													}
													goto l166
												l165:
													position, tokenIndex = position165, tokenIndex165
												}
											l166:
												add(rulePegText, position164)
											}
											{
												add(ruleAction9, position)
											}
											add(ruleRelObject, position163)
										}
										goto l156
									l157:
										position, tokenIndex = position157, tokenIndex157
									}
									goto l133
								l155:
									position, tokenIndex = position133, tokenIndex133
									if !_rules[ruleIdentifierList]() {
										goto l130
									}
								}
							l133:
								add(ruleObject, position132)
							}
							goto l131
						l130:
							position, tokenIndex = position130, tokenIndex130
						}
					l131:
						if !_rules[rule_]() {
							goto l0
						}
						if !_rules[ruleEOL]() {
							goto l0
						}
						{
							position168, tokenIndex168 := position, tokenIndex
							{
								position170 := position
								{
									position171 := position
									{
										position172 := position
										if buffer[position] != rune('e') {
											goto l168
										}
										position++
										if buffer[position] != rune('r') {
											goto l168
										}
										position++
										if buffer[position] != rune('r') {
											goto l168
										}
										position++
										if buffer[position] != rune('o') {
											goto l168
										}
										position++
										if buffer[position] != rune('r') {
											goto l168
										}
										position++
										if !_rules[rule_]() {
											goto l168
										}
										add(ruleERROR, position172)
									}
									{
										position173, tokenIndex173 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l173
										}
										goto l174
									l173:
										position, tokenIndex = position173, tokenIndex173
									}
								l174:
								l175:
									{
										position176, tokenIndex176 := position, tokenIndex
										if !_rules[ruleStringLike]() {
											goto l176
										}
										goto l175
									l176:
										position, tokenIndex = position176, tokenIndex176
									}
									add(rulePegText, position171)
								}
								{
									add(ruleAction10, position)
								}
								add(ruleError, position170)
							}
							goto l169
						l168:
							position, tokenIndex = position168, tokenIndex168
						}
					l169:
						if !_rules[ruleEND]() {
							goto l0
						}
						{
							add(ruleAction0, position)
						}
						add(ruleResponse, position129)
					}
				}
			l2:
				add(ruleValid, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Response <- <(Object? _ EOL Error? END Action0)> */
		nil,
		/* 2 Command <- <(_ (Mutation / TreeMutation / Query / StateBound) Flag* END Action1)> */
		nil,
		/* 3 Mutation <- <((Item (Create / Set) Identifier ItemParams?) / (Item Clear Identifier ItemKeys) / (Item Delete Identifier) / (Rel (Create / Set) DualIdentifier RelParams?) / (Rel Clear DualIdentifier RelKeys) / (Rel Delete DualIdentifier))> */
		nil,
		/* 4 TreeMutation <- <((Free IdentifierList) / (Nest IdentifierList _ IN <StringLike> Action2))> */
		nil,
		/* 5 Query <- <(FetchQuery / ListQuery / ExistsQuery)> */
		nil,
		/* 6 FetchQuery <- <((&('w') (World Action3)) | (&('r') (Rel Fetch DualIdentifier)) | (&('i') (Item Fetch Identifier)))> */
		nil,
		/* 7 ListQuery <- <(((Item / Rel) List Limit?) / ((&('f') (FromQuery Identifier)) | (&('t') (ToQuery Identifier)) | (&('i') (Item IN Identifier Action4))))> */
		nil,
		/* 8 ExistsQuery <- <((InQuery DualIdentifier) / (ItemExists Identifier) / (RelExists DualIdentifier))> */
		nil,
		/* 9 StateBound <- <((CreateOrFetch Action5) / (CreateOrSet Action6))> */
		nil,
		/* 10 CreateOrFetch <- <((Item Identifier !ItemParams) / (Rel DualIdentifier !RelParams))> */
		nil,
		/* 11 CreateOrSet <- <((Item Identifier ItemParams) / (Rel DualIdentifier RelParams))> */
		nil,
		/* 12 Object <- <(WorldObject / ItemObject+ / RelObject+ / IdentifierList)> */
		nil,
		/* 13 WorldObject <- <(BeginWorld <.*> EndWorld Action7)> */
		nil,
		/* 14 ItemObject <- <(<(Item Identifier ItemParams?)> Action8)> */
		nil,
		/* 15 RelObject <- <(<(Rel DualIdentifier RelParams?)> Action9)> */
		nil,
		/* 16 Error <- <(<(ERROR Number? StringLike*)> Action10)> */
		nil,
		/* 17 Limit <- <(<Number> Action11)> */
		nil,
		/* 18 Identifier <- <(!Keyword <StringLike> Action12)> */
		func() bool {
			position196, tokenIndex196 := position, tokenIndex
			{
				position197 := position
				{
					position198, tokenIndex198 := position, tokenIndex
					if !_rules[ruleKeyword]() {
						goto l198
					}
					goto l196
				l198:
					position, tokenIndex = position198, tokenIndex198
				}
				{
					position199 := position
					if !_rules[ruleStringLike]() {
						goto l196
					}
					add(rulePegText, position199)
				}
				{
					add(ruleAction12, position)
				}
				add(ruleIdentifier, position197)
			}
			return true
		l196:
			position, tokenIndex = position196, tokenIndex196
			return false
		},
		/* 19 SecondIdentifier <- <(!Keyword &Identifier <StringLike> Action13)> */
		nil,
		/* 20 DualIdentifier <- <(Identifier SecondIdentifier)> */
		func() bool {
			position202, tokenIndex202 := position, tokenIndex
			{
				position203 := position
				if !_rules[ruleIdentifier]() {
					goto l202
				}
				{
					position204 := position
					{
						position205, tokenIndex205 := position, tokenIndex
						if !_rules[ruleKeyword]() {
							goto l205
						}
						goto l202
					l205:
						position, tokenIndex = position205, tokenIndex205
					}
					{
						position206, tokenIndex206 := position, tokenIndex
						if !_rules[ruleIdentifier]() {
							goto l202
						}
						position, tokenIndex = position206, tokenIndex206
					}
					{
						position207 := position
						if !_rules[ruleStringLike]() {
							goto l202
						}
						add(rulePegText, position207)
					}
					{
						add(ruleAction13, position)
					}
					add(ruleSecondIdentifier, position204)
				}
				add(ruleDualIdentifier, position203)
			}
			return true
		l202:
			position, tokenIndex = position202, tokenIndex202
			return false
		},
		/* 21 IdentifierList <- <(<(Identifier Identifier*)> Action14)> */
		func() bool {
			position209, tokenIndex209 := position, tokenIndex
			{
				position210 := position
				{
					position211 := position
					if !_rules[ruleIdentifier]() {
						goto l209
					}
				l212:
					{
						position213, tokenIndex213 := position, tokenIndex
						if !_rules[ruleIdentifier]() {
							goto l213
						}
						goto l212
					l213:
						position, tokenIndex = position213, tokenIndex213
					}
					add(rulePegText, position211)
				}
				{
					add(ruleAction14, position)
				}
				add(ruleIdentifierList, position210)
			}
			return true
		l209:
			position, tokenIndex = position209, tokenIndex209
			return false
		},
		/* 22 ItemParams <- <ItemParam+> */
		func() bool {
			position215, tokenIndex215 := position, tokenIndex
			{
				position216 := position
				{
					position219 := position
					{
						position220, tokenIndex220 := position, tokenIndex
						if !_rules[ruleEXTERNAL]() {
							goto l221
						}
						if !_rules[ruleEQUALS]() {
							goto l221
						}
						{
							position222 := position
							if !_rules[ruleBoolean]() {
								goto l221
							}
							add(rulePegText, position222)
						}
						{
							add(ruleAction15, position)
						}
						goto l220
					l221:
						position, tokenIndex = position220, tokenIndex220
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l215
								}
								if !_rules[ruleEQUALS]() {
									goto l215
								}
								{
									position225 := position
									if !_rules[ruleStringLike]() {
										goto l215
									}
									add(rulePegText, position225)
								}
								{
									add(ruleAction19, position)
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l215
								}
								if !_rules[ruleEQUALS]() {
									goto l215
								}
								{
									position227 := position
									if !_rules[ruleStringLike]() {
										goto l215
									}
									add(rulePegText, position227)
								}
								{
									add(ruleAction18, position)
								}
							case 'n':
								if !_rules[ruleNAME]() {
									goto l215
								}
								if !_rules[ruleEQUALS]() {
									goto l215
								}
								{
									position229 := position
									if !_rules[ruleStringLike]() {
										goto l215
									}
									add(rulePegText, position229)
								}
								{
									add(ruleAction17, position)
								}
							default:
								if !_rules[ruleTYPE]() {
									goto l215
								}
								if !_rules[ruleEQUALS]() {
									goto l215
								}
								{
									position231 := position
									{
										position232 := position
										{
											position233, tokenIndex233 := position, tokenIndex
											{
												position235 := position
												if buffer[position] != rune('d') {
													goto l234
												}
												position++
												if buffer[position] != rune('a') {
													goto l234
												}
												position++
												if buffer[position] != rune('t') {
													goto l234
												}
												position++
												if buffer[position] != rune('a') {
													goto l234
												}
												position++
												if buffer[position] != rune('b') {
													goto l234
												}
												position++
												if buffer[position] != rune('a') {
													goto l234
												}
												position++
												if buffer[position] != rune('s') {
													goto l234
												}
												position++
												if buffer[position] != rune('e') {
													goto l234
												}
												position++
												if !_rules[rule_]() {
													goto l234
												}
												add(ruleDATABASE, position235)
											}
											goto l233
										l234:
											position, tokenIndex = position233, tokenIndex233
											{
												position237 := position
												if buffer[position] != rune('b') {
													goto l236
												}
												position++
												if buffer[position] != rune('l') {
													goto l236
												}
												position++
												if buffer[position] != rune('o') {
													goto l236
												}
												position++
												if buffer[position] != rune('b') {
													goto l236
												}
												position++
												if buffer[position] != rune('s') {
													goto l236
												}
												position++
												if buffer[position] != rune('t') {
													goto l236
												}
												position++
												if buffer[position] != rune('o') {
													goto l236
												}
												position++
												if buffer[position] != rune('r') {
													goto l236
												}
												position++
												if buffer[position] != rune('e') {
													goto l236
												}
												position++
												if !_rules[rule_]() {
													goto l236
												}
												add(ruleBLOBSTORE, position237)
											}
											goto l233
										l236:
											position, tokenIndex = position233, tokenIndex233
											{
												switch buffer[position] {
												case 'c':
													{
														position239 := position
														if buffer[position] != rune('c') {
															goto l215
														}
														position++
														if buffer[position] != rune('o') {
															goto l215
														}
														position++
														if buffer[position] != rune('d') {
															goto l215
														}
														position++
														if buffer[position] != rune('e') {
															goto l215
														}
														position++
														if !_rules[rule_]() {
															goto l215
														}
														add(ruleCODE, position239)
													}
												case 'd':
													{
														position240 := position
														if buffer[position] != rune('d') {
															goto l215
														}
														position++
														if buffer[position] != rune('e') {
															goto l215
														}
														position++
														if buffer[position] != rune('v') {
															goto l215
														}
														position++
														if buffer[position] != rune('i') {
															goto l215
														}
														position++
														if buffer[position] != rune('c') {
															goto l215
														}
														position++
														if buffer[position] != rune('e') {
															goto l215
														}
														position++
														if !_rules[rule_]() {
															goto l215
														}
														add(ruleDEVICE, position240)
													}
												case 's':
													{
														position241 := position
														if buffer[position] != rune('s') {
															goto l215
														}
														position++
														if buffer[position] != rune('e') {
															goto l215
														}
														position++
														if buffer[position] != rune('r') {
															goto l215
														}
														position++
														if buffer[position] != rune('v') {
															goto l215
														}
														position++
														if buffer[position] != rune('e') {
															goto l215
														}
														position++
														if buffer[position] != rune('r') {
															goto l215
														}
														position++
														if !_rules[rule_]() {
															goto l215
														}
														add(ruleSERVER, position241)
													}
												case 'm':
													{
														position242 := position
														if buffer[position] != rune('m') {
															goto l215
														}
														position++
														if buffer[position] != rune('o') {
															goto l215
														}
														position++
														if buffer[position] != rune('b') {
															goto l215
														}
														position++
														if buffer[position] != rune('i') {
															goto l215
														}
														position++
														if buffer[position] != rune('l') {
															goto l215
														}
														position++
														if buffer[position] != rune('e') {
															goto l215
														}
														position++
														if !_rules[rule_]() {
															goto l215
														}
														add(ruleMOBILE, position242)
													}
												case 'b':
													{
														position243 := position
														if buffer[position] != rune('b') {
															goto l215
														}
														position++
														if buffer[position] != rune('r') {
															goto l215
														}
														position++
														if buffer[position] != rune('o') {
															goto l215
														}
														position++
														if buffer[position] != rune('w') {
															goto l215
														}
														position++
														if buffer[position] != rune('s') {
															goto l215
														}
														position++
														if buffer[position] != rune('e') {
															goto l215
														}
														position++
														if buffer[position] != rune('r') {
															goto l215
														}
														position++
														if !_rules[rule_]() {
															goto l215
														}
														add(ruleBROWSER, position243)
													}
												case 'q':
													{
														position244 := position
														if buffer[position] != rune('q') {
															goto l215
														}
														position++
														if buffer[position] != rune('u') {
															goto l215
														}
														position++
														if buffer[position] != rune('e') {
															goto l215
														}
														position++
														if buffer[position] != rune('u') {
															goto l215
														}
														position++
														if buffer[position] != rune('e') {
															goto l215
														}
														position++
														if !_rules[rule_]() {
															goto l215
														}
														add(ruleQUEUE, position244)
													}
												default:
													{
														position245 := position
														if buffer[position] != rune('p') {
															goto l215
														}
														position++
														if buffer[position] != rune('e') {
															goto l215
														}
														position++
														if buffer[position] != rune('r') {
															goto l215
														}
														position++
														if buffer[position] != rune('s') {
															goto l215
														}
														position++
														if buffer[position] != rune('o') {
															goto l215
														}
														position++
														if buffer[position] != rune('n') {
															goto l215
														}
														position++
														if !_rules[rule_]() {
															goto l215
														}
														add(rulePERSON, position245)
													}
												}
											}

										}
									l233:
										add(ruleItemType, position232)
									}
									add(rulePegText, position231)
								}
								{
									add(ruleAction16, position)
								}
							}
						}

					}
				l220:
					add(ruleItemParam, position219)
				}
			l217:
				{
					position218, tokenIndex218 := position, tokenIndex
					{
						position247 := position
						{
							position248, tokenIndex248 := position, tokenIndex
							if !_rules[ruleEXTERNAL]() {
								goto l249
							}
							if !_rules[ruleEQUALS]() {
								goto l249
							}
							{
								position250 := position
								if !_rules[ruleBoolean]() {
									goto l249
								}
								add(rulePegText, position250)
							}
							{
								add(ruleAction15, position)
							}
							goto l248
						l249:
							position, tokenIndex = position248, tokenIndex248
							{
								switch buffer[position] {
								case 'e':
									if !_rules[ruleEXPANDED]() {
										goto l218
									}
									if !_rules[ruleEQUALS]() {
										goto l218
									}
									{
										position253 := position
										if !_rules[ruleStringLike]() {
											goto l218
										}
										add(rulePegText, position253)
									}
									{
										add(ruleAction19, position)
									}
								case 'm':
									if !_rules[ruleMECHANISM]() {
										goto l218
									}
									if !_rules[ruleEQUALS]() {
										goto l218
									}
									{
										position255 := position
										if !_rules[ruleStringLike]() {
											goto l218
										}
										add(rulePegText, position255)
									}
									{
										add(ruleAction18, position)
									}
								case 'n':
									if !_rules[ruleNAME]() {
										goto l218
									}
									if !_rules[ruleEQUALS]() {
										goto l218
									}
									{
										position257 := position
										if !_rules[ruleStringLike]() {
											goto l218
										}
										add(rulePegText, position257)
									}
									{
										add(ruleAction17, position)
									}
								default:
									if !_rules[ruleTYPE]() {
										goto l218
									}
									if !_rules[ruleEQUALS]() {
										goto l218
									}
									{
										position259 := position
										{
											position260 := position
											{
												position261, tokenIndex261 := position, tokenIndex
												{
													position263 := position
													if buffer[position] != rune('d') {
														goto l262
													}
													position++
													if buffer[position] != rune('a') {
														goto l262
													}
													position++
													if buffer[position] != rune('t') {
														goto l262
													}
													position++
													if buffer[position] != rune('a') {
														goto l262
													}
													position++
													if buffer[position] != rune('b') {
														goto l262
													}
													position++
													if buffer[position] != rune('a') {
														goto l262
													}
													position++
													if buffer[position] != rune('s') {
														goto l262
													}
													position++
													if buffer[position] != rune('e') {
														goto l262
													}
													position++
													if !_rules[rule_]() {
														goto l262
													}
													add(ruleDATABASE, position263)
												}
												goto l261
											l262:
												position, tokenIndex = position261, tokenIndex261
												{
													position265 := position
													if buffer[position] != rune('b') {
														goto l264
													}
													position++
													if buffer[position] != rune('l') {
														goto l264
													}
													position++
													if buffer[position] != rune('o') {
														goto l264
													}
													position++
													if buffer[position] != rune('b') {
														goto l264
													}
													position++
													if buffer[position] != rune('s') {
														goto l264
													}
													position++
													if buffer[position] != rune('t') {
														goto l264
													}
													position++
													if buffer[position] != rune('o') {
														goto l264
													}
													position++
													if buffer[position] != rune('r') {
														goto l264
													}
													position++
													if buffer[position] != rune('e') {
														goto l264
													}
													position++
													if !_rules[rule_]() {
														goto l264
													}
													add(ruleBLOBSTORE, position265)
												}
												goto l261
											l264:
												position, tokenIndex = position261, tokenIndex261
												{
													switch buffer[position] {
													case 'c':
														{
															position267 := position
															if buffer[position] != rune('c') {
																goto l218
															}
															position++
															if buffer[position] != rune('o') {
																goto l218
															}
															position++
															if buffer[position] != rune('d') {
																goto l218
															}
															position++
															if buffer[position] != rune('e') {
																goto l218
															}
															position++
															if !_rules[rule_]() {
																goto l218
															}
															add(ruleCODE, position267)
														}
													case 'd':
														{
															position268 := position
															if buffer[position] != rune('d') {
																goto l218
															}
															position++
															if buffer[position] != rune('e') {
																goto l218
															}
															position++
															if buffer[position] != rune('v') {
																goto l218
															}
															position++
															if buffer[position] != rune('i') {
																goto l218
															}
															position++
															if buffer[position] != rune('c') {
																goto l218
															}
															position++
															if buffer[position] != rune('e') {
																goto l218
															}
															position++
															if !_rules[rule_]() {
																goto l218
															}
															add(ruleDEVICE, position268)
														}
													case 's':
														{
															position269 := position
															if buffer[position] != rune('s') {
																goto l218
															}
															position++
															if buffer[position] != rune('e') {
																goto l218
															}
															position++
															if buffer[position] != rune('r') {
																goto l218
															}
															position++
															if buffer[position] != rune('v') {
																goto l218
															}
															position++
															if buffer[position] != rune('e') {
																goto l218
															}
															position++
															if buffer[position] != rune('r') {
																goto l218
															}
															position++
															if !_rules[rule_]() {
																goto l218
															}
															add(ruleSERVER, position269)
														}
													case 'm':
														{
															position270 := position
															if buffer[position] != rune('m') {
																goto l218
															}
															position++
															if buffer[position] != rune('o') {
																goto l218
															}
															position++
															if buffer[position] != rune('b') {
																goto l218
															}
															position++
															if buffer[position] != rune('i') {
																goto l218
															}
															position++
															if buffer[position] != rune('l') {
																goto l218
															}
															position++
															if buffer[position] != rune('e') {
																goto l218
															}
															position++
															if !_rules[rule_]() {
																goto l218
															}
															add(ruleMOBILE, position270)
														}
													case 'b':
														{
															position271 := position
															if buffer[position] != rune('b') {
																goto l218
															}
															position++
															if buffer[position] != rune('r') {
																goto l218
															}
															position++
															if buffer[position] != rune('o') {
																goto l218
															}
															position++
															if buffer[position] != rune('w') {
																goto l218
															}
															position++
															if buffer[position] != rune('s') {
																goto l218
															}
															position++
															if buffer[position] != rune('e') {
																goto l218
															}
															position++
															if buffer[position] != rune('r') {
																goto l218
															}
															position++
															if !_rules[rule_]() {
																goto l218
															}
															add(ruleBROWSER, position271)
														}
													case 'q':
														{
															position272 := position
															if buffer[position] != rune('q') {
																goto l218
															}
															position++
															if buffer[position] != rune('u') {
																goto l218
															}
															position++
															if buffer[position] != rune('e') {
																goto l218
															}
															position++
															if buffer[position] != rune('u') {
																goto l218
															}
															position++
															if buffer[position] != rune('e') {
																goto l218
															}
															position++
															if !_rules[rule_]() {
																goto l218
															}
															add(ruleQUEUE, position272)
														}
													default:
														{
															position273 := position
															if buffer[position] != rune('p') {
																goto l218
															}
															position++
															if buffer[position] != rune('e') {
																goto l218
															}
															position++
															if buffer[position] != rune('r') {
																goto l218
															}
															position++
															if buffer[position] != rune('s') {
																goto l218
															}
															position++
															if buffer[position] != rune('o') {
																goto l218
															}
															position++
															if buffer[position] != rune('n') {
																goto l218
															}
															position++
															if !_rules[rule_]() {
																goto l218
															}
															add(rulePERSON, position273)
														}
													}
												}

											}
										l261:
											add(ruleItemType, position260)
										}
										add(rulePegText, position259)
									}
									{
										add(ruleAction16, position)
									}
								}
							}

						}
					l248:
						add(ruleItemParam, position247)
					}
					goto l217
				l218:
					position, tokenIndex = position218, tokenIndex218
				}
				add(ruleItemParams, position216)
			}
			return true
		l215:
			position, tokenIndex = position215, tokenIndex215
			return false
		},
		/* 23 RelParams <- <RelParam+> */
		func() bool {
			position275, tokenIndex275 := position, tokenIndex
			{
				position276 := position
				{
					position279 := position
					{
						switch buffer[position] {
						case 'e':
							if !_rules[ruleEXPANDED]() {
								goto l275
							}
							if !_rules[ruleEQUALS]() {
								goto l275
							}
							{
								position281 := position
								if !_rules[ruleStringLike]() {
									goto l275
								}
								add(rulePegText, position281)
							}
							{
								add(ruleAction23, position)
							}
						case 'a':
							if !_rules[ruleASYNC]() {
								goto l275
							}
							if !_rules[ruleEQUALS]() {
								goto l275
							}
							{
								position283 := position
								if !_rules[ruleBoolean]() {
									goto l275
								}
								add(rulePegText, position283)
							}
							{
								add(ruleAction22, position)
							}
						case 'm':
							if !_rules[ruleMECHANISM]() {
								goto l275
							}
							if !_rules[ruleEQUALS]() {
								goto l275
							}
							{
								position285 := position
								if !_rules[ruleStringLike]() {
									goto l275
								}
								add(rulePegText, position285)
							}
							{
								add(ruleAction21, position)
							}
						default:
							if !_rules[ruleVERB]() {
								goto l275
							}
							if !_rules[ruleEQUALS]() {
								goto l275
							}
							{
								position287 := position
								if !_rules[ruleStringLike]() {
									goto l275
								}
								add(rulePegText, position287)
							}
							{
								add(ruleAction20, position)
							}
						}
					}

					add(ruleRelParam, position279)
				}
			l277:
				{
					position278, tokenIndex278 := position, tokenIndex
					{
						position289 := position
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l278
								}
								if !_rules[ruleEQUALS]() {
									goto l278
								}
								{
									position291 := position
									if !_rules[ruleStringLike]() {
										goto l278
									}
									add(rulePegText, position291)
								}
								{
									add(ruleAction23, position)
								}
							case 'a':
								if !_rules[ruleASYNC]() {
									goto l278
								}
								if !_rules[ruleEQUALS]() {
									goto l278
								}
								{
									position293 := position
									if !_rules[ruleBoolean]() {
										goto l278
									}
									add(rulePegText, position293)
								}
								{
									add(ruleAction22, position)
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l278
								}
								if !_rules[ruleEQUALS]() {
									goto l278
								}
								{
									position295 := position
									if !_rules[ruleStringLike]() {
										goto l278
									}
									add(rulePegText, position295)
								}
								{
									add(ruleAction21, position)
								}
							default:
								if !_rules[ruleVERB]() {
									goto l278
								}
								if !_rules[ruleEQUALS]() {
									goto l278
								}
								{
									position297 := position
									if !_rules[ruleStringLike]() {
										goto l278
									}
									add(rulePegText, position297)
								}
								{
									add(ruleAction20, position)
								}
							}
						}

						add(ruleRelParam, position289)
					}
					goto l277
				l278:
					position, tokenIndex = position278, tokenIndex278
				}
				add(ruleRelParams, position276)
			}
			return true
		l275:
			position, tokenIndex = position275, tokenIndex275
			return false
		},
		/* 24 ItemParam <- <((EXTERNAL EQUALS <Boolean> Action15) / ((&('e') (EXPANDED EQUALS <StringLike> Action19)) | (&('m') (MECHANISM EQUALS <StringLike> Action18)) | (&('n') (NAME EQUALS <StringLike> Action17)) | (&('t') (TYPE EQUALS <ItemType> Action16))))> */
		nil,
		/* 25 RelParam <- <((&('e') (EXPANDED EQUALS <StringLike> Action23)) | (&('a') (ASYNC EQUALS <Boolean> Action22)) | (&('m') (MECHANISM EQUALS <StringLike> Action21)) | (&('v') (VERB EQUALS <StringLike> Action20)))> */
		nil,
		/* 26 ItemKeys <- <ItemKey+> */
		nil,
		/* 27 RelKeys <- <RelKey+> */
		nil,
		/* 28 ItemKey <- <(<(EXTERNAL / ((&('e') EXPANDED) | (&('m') MECHANISM) | (&('t') TYPE) | (&('n') NAME)))> _ Action24)> */
		nil,
		/* 29 RelKey <- <(<((&('e') EXPANDED) | (&('a') ASYNC) | (&('m') MECHANISM) | (&('v') VERB))> _ Action25)> */
		nil,
		/* 30 StringLike <- <(<(Text / QuotedText)> _ Action26)> */
		func() bool {
			position305, tokenIndex305 := position, tokenIndex
			{
				position306 := position
				{
					position307 := position
					{
						position308, tokenIndex308 := position, tokenIndex
						{
							position310 := position
							{
								switch buffer[position] {
								case '_':
									if buffer[position] != rune('_') {
										goto l309
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l309
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l309
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l309
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l309
									}
									position++
								}
							}

						l311:
							{
								position312, tokenIndex312 := position, tokenIndex
								{
									switch buffer[position] {
									case '_':
										if buffer[position] != rune('_') {
											goto l312
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l312
										}
										position++
									case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l312
										}
										position++
									case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
										if c := buffer[position]; c < rune('A') || c > rune('Z') {
											goto l312
										}
										position++
									default:
										if c := buffer[position]; c < rune('a') || c > rune('z') {
											goto l312
										}
										position++
									}
								}

								goto l311
							l312:
								position, tokenIndex = position312, tokenIndex312
							}
							add(ruleText, position310)
						}
						goto l308
					l309:
						position, tokenIndex = position308, tokenIndex308
						{
							position315 := position
							if !_rules[ruleQUOTE]() {
								goto l305
							}
						l316:
							{
								position317, tokenIndex317 := position, tokenIndex
								{
									switch buffer[position] {
									case ' ':
										if buffer[position] != rune(' ') {
											goto l317
										}
										position++
									case ':':
										if buffer[position] != rune(':') {
											goto l317
										}
										position++
									case ';':
										if buffer[position] != rune(';') {
											goto l317
										}
										position++
									case '~':
										if buffer[position] != rune('~') {
											goto l317
										}
										position++
									case '=':
										if buffer[position] != rune('=') {
											goto l317
										}
										position++
									case '+':
										if buffer[position] != rune('+') {
											goto l317
										}
										position++
									case ']':
										if buffer[position] != rune(']') {
											goto l317
										}
										position++
									case '[':
										if buffer[position] != rune('[') {
											goto l317
										}
										position++
									case ')':
										if buffer[position] != rune(')') {
											goto l317
										}
										position++
									case '(':
										if buffer[position] != rune('(') {
											goto l317
										}
										position++
									case '*':
										if buffer[position] != rune('*') {
											goto l317
										}
										position++
									case '&':
										if buffer[position] != rune('&') {
											goto l317
										}
										position++
									case '^':
										if buffer[position] != rune('^') {
											goto l317
										}
										position++
									case '%':
										if buffer[position] != rune('%') {
											goto l317
										}
										position++
									case '$':
										if buffer[position] != rune('$') {
											goto l317
										}
										position++
									case '#':
										if buffer[position] != rune('#') {
											goto l317
										}
										position++
									case '@':
										if buffer[position] != rune('@') {
											goto l317
										}
										position++
									case '!':
										if buffer[position] != rune('!') {
											goto l317
										}
										position++
									case ',':
										if buffer[position] != rune(',') {
											goto l317
										}
										position++
									case '.':
										if buffer[position] != rune('.') {
											goto l317
										}
										position++
									case '_':
										if buffer[position] != rune('_') {
											goto l317
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l317
										}
										position++
									case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l317
										}
										position++
									case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
										if c := buffer[position]; c < rune('A') || c > rune('Z') {
											goto l317
										}
										position++
									default:
										if c := buffer[position]; c < rune('a') || c > rune('z') {
											goto l317
										}
										position++
									}
								}

								goto l316
							l317:
								position, tokenIndex = position317, tokenIndex317
							}
							if !_rules[ruleQUOTE]() {
								goto l305
							}
							add(ruleQuotedText, position315)
						}
					}
				l308:
					add(rulePegText, position307)
				}
				if !_rules[rule_]() {
					goto l305
				}
				{
					add(ruleAction26, position)
				}
				add(ruleStringLike, position306)
			}
			return true
		l305:
			position, tokenIndex = position305, tokenIndex305
			return false
		},
		/* 31 Number <- <(<[0-9]+> _ Action27)> */
		func() bool {
			position320, tokenIndex320 := position, tokenIndex
			{
				position321 := position
				{
					position322 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l320
					}
					position++
				l323:
					{
						position324, tokenIndex324 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l324
						}
						position++
						goto l323
					l324:
						position, tokenIndex = position324, tokenIndex324
					}
					add(rulePegText, position322)
				}
				if !_rules[rule_]() {
					goto l320
				}
				{
					add(ruleAction27, position)
				}
				add(ruleNumber, position321)
			}
			return true
		l320:
			position, tokenIndex = position320, tokenIndex320
			return false
		},
		/* 32 Boolean <- <(<(TRUE / FALSE)> Action28)> */
		func() bool {
			position326, tokenIndex326 := position, tokenIndex
			{
				position327 := position
				{
					position328 := position
					{
						position329, tokenIndex329 := position, tokenIndex
						{
							position331 := position
							if buffer[position] != rune('t') {
								goto l330
							}
							position++
							if buffer[position] != rune('r') {
								goto l330
							}
							position++
							if buffer[position] != rune('u') {
								goto l330
							}
							position++
							if buffer[position] != rune('e') {
								goto l330
							}
							position++
							if !_rules[rule_]() {
								goto l330
							}
							add(ruleTRUE, position331)
						}
						goto l329
					l330:
						position, tokenIndex = position329, tokenIndex329
						{
							position332 := position
							if buffer[position] != rune('f') {
								goto l326
							}
							position++
							if buffer[position] != rune('a') {
								goto l326
							}
							position++
							if buffer[position] != rune('l') {
								goto l326
							}
							position++
							if buffer[position] != rune('s') {
								goto l326
							}
							position++
							if buffer[position] != rune('e') {
								goto l326
							}
							position++
							if !_rules[rule_]() {
								goto l326
							}
							add(ruleFALSE, position332)
						}
					}
				l329:
					add(rulePegText, position328)
				}
				{
					add(ruleAction28, position)
				}
				add(ruleBoolean, position327)
			}
			return true
		l326:
			position, tokenIndex = position326, tokenIndex326
			return false
		},
		/* 33 Text <- <((&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))+> */
		nil,
		/* 34 QuotedText <- <(QUOTE ((&(' ') ' ') | (&(':') ':') | (&(';') ';') | (&('~') '~') | (&('=') '=') | (&('+') '+') | (&(']') ']') | (&('[') '[') | (&(')') ')') | (&('(') '(') | (&('*') '*') | (&('&') '&') | (&('^') '^') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('@') '@') | (&('!') '!') | (&(',') ',') | (&('.') '.') | (&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))* QUOTE)> */
		nil,
		/* 35 ItemExists <- <((ITEM_EXISTS / (Item Exists)) Action29)> */
		nil,
		/* 36 RelExists <- <((REL_EXISTS / (Rel Exists)) Action30)> */
		nil,
		/* 37 World <- <(WORLD Action31)> */
		nil,
		/* 38 Item <- <(ITEM Action32)> */
		func() bool {
			position339, tokenIndex339 := position, tokenIndex
			{
				position340 := position
				if !_rules[ruleITEM]() {
					goto l339
				}
				{
					add(ruleAction32, position)
				}
				add(ruleItem, position340)
			}
			return true
		l339:
			position, tokenIndex = position339, tokenIndex339
			return false
		},
		/* 39 Rel <- <(REL Action33)> */
		func() bool {
			position342, tokenIndex342 := position, tokenIndex
			{
				position343 := position
				if !_rules[ruleREL]() {
					goto l342
				}
				{
					add(ruleAction33, position)
				}
				add(ruleRel, position343)
			}
			return true
		l342:
			position, tokenIndex = position342, tokenIndex342
			return false
		},
		/* 40 Create <- <(CREATE Action34)> */
		func() bool {
			position345, tokenIndex345 := position, tokenIndex
			{
				position346 := position
				if !_rules[ruleCREATE]() {
					goto l345
				}
				{
					add(ruleAction34, position)
				}
				add(ruleCreate, position346)
			}
			return true
		l345:
			position, tokenIndex = position345, tokenIndex345
			return false
		},
		/* 41 Fetch <- <(FETCH Action35)> */
		func() bool {
			position348, tokenIndex348 := position, tokenIndex
			{
				position349 := position
				if !_rules[ruleFETCH]() {
					goto l348
				}
				{
					add(ruleAction35, position)
				}
				add(ruleFetch, position349)
			}
			return true
		l348:
			position, tokenIndex = position348, tokenIndex348
			return false
		},
		/* 42 Set <- <(SET Action36)> */
		func() bool {
			position351, tokenIndex351 := position, tokenIndex
			{
				position352 := position
				if !_rules[ruleSET]() {
					goto l351
				}
				{
					add(ruleAction36, position)
				}
				add(ruleSet, position352)
			}
			return true
		l351:
			position, tokenIndex = position351, tokenIndex351
			return false
		},
		/* 43 Clear <- <(CLEAR Action37)> */
		func() bool {
			position354, tokenIndex354 := position, tokenIndex
			{
				position355 := position
				if !_rules[ruleCLEAR]() {
					goto l354
				}
				{
					add(ruleAction37, position)
				}
				add(ruleClear, position355)
			}
			return true
		l354:
			position, tokenIndex = position354, tokenIndex354
			return false
		},
		/* 44 Delete <- <(DELETE Action38)> */
		func() bool {
			position357, tokenIndex357 := position, tokenIndex
			{
				position358 := position
				if !_rules[ruleDELETE]() {
					goto l357
				}
				{
					add(ruleAction38, position)
				}
				add(ruleDelete, position358)
			}
			return true
		l357:
			position, tokenIndex = position357, tokenIndex357
			return false
		},
		/* 45 List <- <(LIST Action39)> */
		nil,
		/* 46 Nest <- <(NEST Action40)> */
		nil,
		/* 47 Free <- <(FREE Action41)> */
		nil,
		/* 48 Exists <- <(EXISTS Action42)> */
		func() bool {
			position363, tokenIndex363 := position, tokenIndex
			{
				position364 := position
				if !_rules[ruleEXISTS]() {
					goto l363
				}
				{
					add(ruleAction42, position)
				}
				add(ruleExists, position364)
			}
			return true
		l363:
			position, tokenIndex = position363, tokenIndex363
			return false
		},
		/* 49 InQuery <- <(IN_QUERY Action43)> */
		nil,
		/* 50 FromQuery <- <(FROM_QUERY Action44)> */
		nil,
		/* 51 ToQuery <- <(TO_QUERY Action45)> */
		nil,
		/* 52 Flag <- <(StrictFlag / VerboseFlag / IdsFlag)> */
		nil,
		/* 53 StrictFlag <- <(FLAG STRICT Action46)> */
		nil,
		/* 54 VerboseFlag <- <(FLAG VERBOSE Action47)> */
		nil,
		/* 55 IdsFlag <- <(FLAG IDS Action48)> */
		nil,
		/* 56 BeginWorld <- <(DELIMITER WORLD)> */
		nil,
		/* 57 EndWorld <- <(ENDWORLD DELIMITER)> */
		nil,
		/* 58 ItemType <- <(DATABASE / BLOBSTORE / ((&('c') CODE) | (&('d') DEVICE) | (&('s') SERVER) | (&('m') MOBILE) | (&('b') BROWSER) | (&('q') QUEUE) | (&('p') PERSON)))> */
		nil,
		/* 59 Keyword <- <(ENDWORLD / ITEM / ITEM_EXISTS / REL / FROM_QUERY / IN / CREATE / FETCH / ((&('$') DELIMITER) | (&('-') FLAG) | (&('n') NEST) | (&('f') FREE) | (&('e') EXISTS) | (&('l') LIST) | (&('c') CLEAR) | (&('s') SET) | (&('d') DELETE) | (&('i') IN_QUERY) | (&('t') TO_QUERY) | (&('r') REL_EXISTS) | (&('w') WORLD)))> */
		func() bool {
			position376, tokenIndex376 := position, tokenIndex
			{
				position377 := position
				{
					position378, tokenIndex378 := position, tokenIndex
					if !_rules[ruleENDWORLD]() {
						goto l379
					}
					goto l378
				l379:
					position, tokenIndex = position378, tokenIndex378
					if !_rules[ruleITEM]() {
						goto l380
					}
					goto l378
				l380:
					position, tokenIndex = position378, tokenIndex378
					if !_rules[ruleITEM_EXISTS]() {
						goto l381
					}
					goto l378
				l381:
					position, tokenIndex = position378, tokenIndex378
					if !_rules[ruleREL]() {
						goto l382
					}
					goto l378
				l382:
					position, tokenIndex = position378, tokenIndex378
					if !_rules[ruleFROM_QUERY]() {
						goto l383
					}
					goto l378
				l383:
					position, tokenIndex = position378, tokenIndex378
					if !_rules[ruleIN]() {
						goto l384
					}
					goto l378
				l384:
					position, tokenIndex = position378, tokenIndex378
					if !_rules[ruleCREATE]() {
						goto l385
					}
					goto l378
				l385:
					position, tokenIndex = position378, tokenIndex378
					if !_rules[ruleFETCH]() {
						goto l386
					}
					goto l378
				l386:
					position, tokenIndex = position378, tokenIndex378
					{
						switch buffer[position] {
						case '$':
							if !_rules[ruleDELIMITER]() {
								goto l376
							}
						case '-':
							if !_rules[ruleFLAG]() {
								goto l376
							}
						case 'n':
							if !_rules[ruleNEST]() {
								goto l376
							}
						case 'f':
							if !_rules[ruleFREE]() {
								goto l376
							}
						case 'e':
							if !_rules[ruleEXISTS]() {
								goto l376
							}
						case 'l':
							if !_rules[ruleLIST]() {
								goto l376
							}
						case 'c':
							if !_rules[ruleCLEAR]() {
								goto l376
							}
						case 's':
							if !_rules[ruleSET]() {
								goto l376
							}
						case 'd':
							if !_rules[ruleDELETE]() {
								goto l376
							}
						case 'i':
							if !_rules[ruleIN_QUERY]() {
								goto l376
							}
						case 't':
							if !_rules[ruleTO_QUERY]() {
								goto l376
							}
						case 'r':
							if !_rules[ruleREL_EXISTS]() {
								goto l376
							}
						default:
							if !_rules[ruleWORLD]() {
								goto l376
							}
						}
					}

				}
			l378:
				add(ruleKeyword, position377)
			}
			return true
		l376:
			position, tokenIndex = position376, tokenIndex376
			return false
		},
		/* 60 WORLD <- <('w' 'o' 'r' 'l' 'd' _)> */
		func() bool {
			position388, tokenIndex388 := position, tokenIndex
			{
				position389 := position
				if buffer[position] != rune('w') {
					goto l388
				}
				position++
				if buffer[position] != rune('o') {
					goto l388
				}
				position++
				if buffer[position] != rune('r') {
					goto l388
				}
				position++
				if buffer[position] != rune('l') {
					goto l388
				}
				position++
				if buffer[position] != rune('d') {
					goto l388
				}
				position++
				if !_rules[rule_]() {
					goto l388
				}
				add(ruleWORLD, position389)
			}
			return true
		l388:
			position, tokenIndex = position388, tokenIndex388
			return false
		},
		/* 61 ENDWORLD <- <('e' 'n' 'd' 'w' 'o' 'r' 'l' 'd' _)> */
		func() bool {
			position390, tokenIndex390 := position, tokenIndex
			{
				position391 := position
				if buffer[position] != rune('e') {
					goto l390
				}
				position++
				if buffer[position] != rune('n') {
					goto l390
				}
				position++
				if buffer[position] != rune('d') {
					goto l390
				}
				position++
				if buffer[position] != rune('w') {
					goto l390
				}
				position++
				if buffer[position] != rune('o') {
					goto l390
				}
				position++
				if buffer[position] != rune('r') {
					goto l390
				}
				position++
				if buffer[position] != rune('l') {
					goto l390
				}
				position++
				if buffer[position] != rune('d') {
					goto l390
				}
				position++
				if !_rules[rule_]() {
					goto l390
				}
				add(ruleENDWORLD, position391)
			}
			return true
		l390:
			position, tokenIndex = position390, tokenIndex390
			return false
		},
		/* 62 ERROR <- <('e' 'r' 'r' 'o' 'r' _)> */
		nil,
		/* 63 ITEM <- <('i' 't' 'e' 'm' 's'? _)> */
		func() bool {
			position393, tokenIndex393 := position, tokenIndex
			{
				position394 := position
				if buffer[position] != rune('i') {
					goto l393
				}
				position++
				if buffer[position] != rune('t') {
					goto l393
				}
				position++
				if buffer[position] != rune('e') {
					goto l393
				}
				position++
				if buffer[position] != rune('m') {
					goto l393
				}
				position++
				{
					position395, tokenIndex395 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l395
					}
					position++
					goto l396
				l395:
					position, tokenIndex = position395, tokenIndex395
				}
			l396:
				if !_rules[rule_]() {
					goto l393
				}
				add(ruleITEM, position394)
			}
			return true
		l393:
			position, tokenIndex = position393, tokenIndex393
			return false
		},
		/* 64 ITEM_EXISTS <- <('i' 't' 'e' 'm' '?' _)> */
		func() bool {
			position397, tokenIndex397 := position, tokenIndex
			{
				position398 := position
				if buffer[position] != rune('i') {
					goto l397
				}
				position++
				if buffer[position] != rune('t') {
					goto l397
				}
				position++
				if buffer[position] != rune('e') {
					goto l397
				}
				position++
				if buffer[position] != rune('m') {
					goto l397
				}
				position++
				if buffer[position] != rune('?') {
					goto l397
				}
				position++
				if !_rules[rule_]() {
					goto l397
				}
				add(ruleITEM_EXISTS, position398)
			}
			return true
		l397:
			position, tokenIndex = position397, tokenIndex397
			return false
		},
		/* 65 REL <- <('r' 'e' 'l' 's'? _)> */
		func() bool {
			position399, tokenIndex399 := position, tokenIndex
			{
				position400 := position
				if buffer[position] != rune('r') {
					goto l399
				}
				position++
				if buffer[position] != rune('e') {
					goto l399
				}
				position++
				if buffer[position] != rune('l') {
					goto l399
				}
				position++
				{
					position401, tokenIndex401 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l401
					}
					position++
					goto l402
				l401:
					position, tokenIndex = position401, tokenIndex401
				}
			l402:
				if !_rules[rule_]() {
					goto l399
				}
				add(ruleREL, position400)
			}
			return true
		l399:
			position, tokenIndex = position399, tokenIndex399
			return false
		},
		/* 66 REL_EXISTS <- <('r' 'e' 'l' '?' _)> */
		func() bool {
			position403, tokenIndex403 := position, tokenIndex
			{
				position404 := position
				if buffer[position] != rune('r') {
					goto l403
				}
				position++
				if buffer[position] != rune('e') {
					goto l403
				}
				position++
				if buffer[position] != rune('l') {
					goto l403
				}
				position++
				if buffer[position] != rune('?') {
					goto l403
				}
				position++
				if !_rules[rule_]() {
					goto l403
				}
				add(ruleREL_EXISTS, position404)
			}
			return true
		l403:
			position, tokenIndex = position403, tokenIndex403
			return false
		},
		/* 67 FROM_QUERY <- <('f' 'r' 'o' 'm' '?' _)> */
		func() bool {
			position405, tokenIndex405 := position, tokenIndex
			{
				position406 := position
				if buffer[position] != rune('f') {
					goto l405
				}
				position++
				if buffer[position] != rune('r') {
					goto l405
				}
				position++
				if buffer[position] != rune('o') {
					goto l405
				}
				position++
				if buffer[position] != rune('m') {
					goto l405
				}
				position++
				if buffer[position] != rune('?') {
					goto l405
				}
				position++
				if !_rules[rule_]() {
					goto l405
				}
				add(ruleFROM_QUERY, position406)
			}
			return true
		l405:
			position, tokenIndex = position405, tokenIndex405
			return false
		},
		/* 68 TO_QUERY <- <('t' 'o' '?' _)> */
		func() bool {
			position407, tokenIndex407 := position, tokenIndex
			{
				position408 := position
				if buffer[position] != rune('t') {
					goto l407
				}
				position++
				if buffer[position] != rune('o') {
					goto l407
				}
				position++
				if buffer[position] != rune('?') {
					goto l407
				}
				position++
				if !_rules[rule_]() {
					goto l407
				}
				add(ruleTO_QUERY, position408)
			}
			return true
		l407:
			position, tokenIndex = position407, tokenIndex407
			return false
		},
		/* 69 IN <- <('i' 'n' _)> */
		func() bool {
			position409, tokenIndex409 := position, tokenIndex
			{
				position410 := position
				if buffer[position] != rune('i') {
					goto l409
				}
				position++
				if buffer[position] != rune('n') {
					goto l409
				}
				position++
				if !_rules[rule_]() {
					goto l409
				}
				add(ruleIN, position410)
			}
			return true
		l409:
			position, tokenIndex = position409, tokenIndex409
			return false
		},
		/* 70 IN_QUERY <- <('i' 'n' '?' _)> */
		func() bool {
			position411, tokenIndex411 := position, tokenIndex
			{
				position412 := position
				if buffer[position] != rune('i') {
					goto l411
				}
				position++
				if buffer[position] != rune('n') {
					goto l411
				}
				position++
				if buffer[position] != rune('?') {
					goto l411
				}
				position++
				if !_rules[rule_]() {
					goto l411
				}
				add(ruleIN_QUERY, position412)
			}
			return true
		l411:
			position, tokenIndex = position411, tokenIndex411
			return false
		},
		/* 71 CREATE <- <('c' 'r' 'e' 'a' 't' 'e' _)> */
		func() bool {
			position413, tokenIndex413 := position, tokenIndex
			{
				position414 := position
				if buffer[position] != rune('c') {
					goto l413
				}
				position++
				if buffer[position] != rune('r') {
					goto l413
				}
				position++
				if buffer[position] != rune('e') {
					goto l413
				}
				position++
				if buffer[position] != rune('a') {
					goto l413
				}
				position++
				if buffer[position] != rune('t') {
					goto l413
				}
				position++
				if buffer[position] != rune('e') {
					goto l413
				}
				position++
				if !_rules[rule_]() {
					goto l413
				}
				add(ruleCREATE, position414)
			}
			return true
		l413:
			position, tokenIndex = position413, tokenIndex413
			return false
		},
		/* 72 DELETE <- <('d' 'e' 'l' 'e' 't' 'e' _)> */
		func() bool {
			position415, tokenIndex415 := position, tokenIndex
			{
				position416 := position
				if buffer[position] != rune('d') {
					goto l415
				}
				position++
				if buffer[position] != rune('e') {
					goto l415
				}
				position++
				if buffer[position] != rune('l') {
					goto l415
				}
				position++
				if buffer[position] != rune('e') {
					goto l415
				}
				position++
				if buffer[position] != rune('t') {
					goto l415
				}
				position++
				if buffer[position] != rune('e') {
					goto l415
				}
				position++
				if !_rules[rule_]() {
					goto l415
				}
				add(ruleDELETE, position416)
			}
			return true
		l415:
			position, tokenIndex = position415, tokenIndex415
			return false
		},
		/* 73 SET <- <('s' 'e' 't' _)> */
		func() bool {
			position417, tokenIndex417 := position, tokenIndex
			{
				position418 := position
				if buffer[position] != rune('s') {
					goto l417
				}
				position++
				if buffer[position] != rune('e') {
					goto l417
				}
				position++
				if buffer[position] != rune('t') {
					goto l417
				}
				position++
				if !_rules[rule_]() {
					goto l417
				}
				add(ruleSET, position418)
			}
			return true
		l417:
			position, tokenIndex = position417, tokenIndex417
			return false
		},
		/* 74 CLEAR <- <('c' 'l' 'e' 'a' 'r' _)> */
		func() bool {
			position419, tokenIndex419 := position, tokenIndex
			{
				position420 := position
				if buffer[position] != rune('c') {
					goto l419
				}
				position++
				if buffer[position] != rune('l') {
					goto l419
				}
				position++
				if buffer[position] != rune('e') {
					goto l419
				}
				position++
				if buffer[position] != rune('a') {
					goto l419
				}
				position++
				if buffer[position] != rune('r') {
					goto l419
				}
				position++
				if !_rules[rule_]() {
					goto l419
				}
				add(ruleCLEAR, position420)
			}
			return true
		l419:
			position, tokenIndex = position419, tokenIndex419
			return false
		},
		/* 75 FETCH <- <('f' 'e' 't' 'c' 'h' _)> */
		func() bool {
			position421, tokenIndex421 := position, tokenIndex
			{
				position422 := position
				if buffer[position] != rune('f') {
					goto l421
				}
				position++
				if buffer[position] != rune('e') {
					goto l421
				}
				position++
				if buffer[position] != rune('t') {
					goto l421
				}
				position++
				if buffer[position] != rune('c') {
					goto l421
				}
				position++
				if buffer[position] != rune('h') {
					goto l421
				}
				position++
				if !_rules[rule_]() {
					goto l421
				}
				add(ruleFETCH, position422)
			}
			return true
		l421:
			position, tokenIndex = position421, tokenIndex421
			return false
		},
		/* 76 LIST <- <('l' 'i' 's' 't' _)> */
		func() bool {
			position423, tokenIndex423 := position, tokenIndex
			{
				position424 := position
				if buffer[position] != rune('l') {
					goto l423
				}
				position++
				if buffer[position] != rune('i') {
					goto l423
				}
				position++
				if buffer[position] != rune('s') {
					goto l423
				}
				position++
				if buffer[position] != rune('t') {
					goto l423
				}
				position++
				if !_rules[rule_]() {
					goto l423
				}
				add(ruleLIST, position424)
			}
			return true
		l423:
			position, tokenIndex = position423, tokenIndex423
			return false
		},
		/* 77 EXISTS <- <('e' 'x' 'i' 's' 't' 's' _)> */
		func() bool {
			position425, tokenIndex425 := position, tokenIndex
			{
				position426 := position
				if buffer[position] != rune('e') {
					goto l425
				}
				position++
				if buffer[position] != rune('x') {
					goto l425
				}
				position++
				if buffer[position] != rune('i') {
					goto l425
				}
				position++
				if buffer[position] != rune('s') {
					goto l425
				}
				position++
				if buffer[position] != rune('t') {
					goto l425
				}
				position++
				if buffer[position] != rune('s') {
					goto l425
				}
				position++
				if !_rules[rule_]() {
					goto l425
				}
				add(ruleEXISTS, position426)
			}
			return true
		l425:
			position, tokenIndex = position425, tokenIndex425
			return false
		},
		/* 78 FREE <- <('f' 'r' 'e' 'e' _)> */
		func() bool {
			position427, tokenIndex427 := position, tokenIndex
			{
				position428 := position
				if buffer[position] != rune('f') {
					goto l427
				}
				position++
				if buffer[position] != rune('r') {
					goto l427
				}
				position++
				if buffer[position] != rune('e') {
					goto l427
				}
				position++
				if buffer[position] != rune('e') {
					goto l427
				}
				position++
				if !_rules[rule_]() {
					goto l427
				}
				add(ruleFREE, position428)
			}
			return true
		l427:
			position, tokenIndex = position427, tokenIndex427
			return false
		},
		/* 79 NEST <- <('n' 'e' 's' 't' _)> */
		func() bool {
			position429, tokenIndex429 := position, tokenIndex
			{
				position430 := position
				if buffer[position] != rune('n') {
					goto l429
				}
				position++
				if buffer[position] != rune('e') {
					goto l429
				}
				position++
				if buffer[position] != rune('s') {
					goto l429
				}
				position++
				if buffer[position] != rune('t') {
					goto l429
				}
				position++
				if !_rules[rule_]() {
					goto l429
				}
				add(ruleNEST, position430)
			}
			return true
		l429:
			position, tokenIndex = position429, tokenIndex429
			return false
		},
		/* 80 TRUE <- <('t' 'r' 'u' 'e' _)> */
		nil,
		/* 81 FALSE <- <('f' 'a' 'l' 's' 'e' _)> */
		nil,
		/* 82 EXTERNAL <- <('e' 'x' 't' 'e' 'r' 'n' 'a' 'l')> */
		func() bool {
			position433, tokenIndex433 := position, tokenIndex
			{
				position434 := position
				if buffer[position] != rune('e') {
					goto l433
				}
				position++
				if buffer[position] != rune('x') {
					goto l433
				}
				position++
				if buffer[position] != rune('t') {
					goto l433
				}
				position++
				if buffer[position] != rune('e') {
					goto l433
				}
				position++
				if buffer[position] != rune('r') {
					goto l433
				}
				position++
				if buffer[position] != rune('n') {
					goto l433
				}
				position++
				if buffer[position] != rune('a') {
					goto l433
				}
				position++
				if buffer[position] != rune('l') {
					goto l433
				}
				position++
				add(ruleEXTERNAL, position434)
			}
			return true
		l433:
			position, tokenIndex = position433, tokenIndex433
			return false
		},
		/* 83 NAME <- <('n' 'a' 'm' 'e')> */
		func() bool {
			position435, tokenIndex435 := position, tokenIndex
			{
				position436 := position
				if buffer[position] != rune('n') {
					goto l435
				}
				position++
				if buffer[position] != rune('a') {
					goto l435
				}
				position++
				if buffer[position] != rune('m') {
					goto l435
				}
				position++
				if buffer[position] != rune('e') {
					goto l435
				}
				position++
				add(ruleNAME, position436)
			}
			return true
		l435:
			position, tokenIndex = position435, tokenIndex435
			return false
		},
		/* 84 TYPE <- <('t' 'y' 'p' 'e')> */
		func() bool {
			position437, tokenIndex437 := position, tokenIndex
			{
				position438 := position
				if buffer[position] != rune('t') {
					goto l437
				}
				position++
				if buffer[position] != rune('y') {
					goto l437
				}
				position++
				if buffer[position] != rune('p') {
					goto l437
				}
				position++
				if buffer[position] != rune('e') {
					goto l437
				}
				position++
				add(ruleTYPE, position438)
			}
			return true
		l437:
			position, tokenIndex = position437, tokenIndex437
			return false
		},
		/* 85 VERB <- <('v' 'e' 'r' 'b')> */
		func() bool {
			position439, tokenIndex439 := position, tokenIndex
			{
				position440 := position
				if buffer[position] != rune('v') {
					goto l439
				}
				position++
				if buffer[position] != rune('e') {
					goto l439
				}
				position++
				if buffer[position] != rune('r') {
					goto l439
				}
				position++
				if buffer[position] != rune('b') {
					goto l439
				}
				position++
				add(ruleVERB, position440)
			}
			return true
		l439:
			position, tokenIndex = position439, tokenIndex439
			return false
		},
		/* 86 MECHANISM <- <('m' 'e' 'c' 'h' 'a' 'n' 'i' 's' 'm')> */
		func() bool {
			position441, tokenIndex441 := position, tokenIndex
			{
				position442 := position
				if buffer[position] != rune('m') {
					goto l441
				}
				position++
				if buffer[position] != rune('e') {
					goto l441
				}
				position++
				if buffer[position] != rune('c') {
					goto l441
				}
				position++
				if buffer[position] != rune('h') {
					goto l441
				}
				position++
				if buffer[position] != rune('a') {
					goto l441
				}
				position++
				if buffer[position] != rune('n') {
					goto l441
				}
				position++
				if buffer[position] != rune('i') {
					goto l441
				}
				position++
				if buffer[position] != rune('s') {
					goto l441
				}
				position++
				if buffer[position] != rune('m') {
					goto l441
				}
				position++
				add(ruleMECHANISM, position442)
			}
			return true
		l441:
			position, tokenIndex = position441, tokenIndex441
			return false
		},
		/* 87 ASYNC <- <('a' 's' 'y' 'n' 'c')> */
		func() bool {
			position443, tokenIndex443 := position, tokenIndex
			{
				position444 := position
				if buffer[position] != rune('a') {
					goto l443
				}
				position++
				if buffer[position] != rune('s') {
					goto l443
				}
				position++
				if buffer[position] != rune('y') {
					goto l443
				}
				position++
				if buffer[position] != rune('n') {
					goto l443
				}
				position++
				if buffer[position] != rune('c') {
					goto l443
				}
				position++
				add(ruleASYNC, position444)
			}
			return true
		l443:
			position, tokenIndex = position443, tokenIndex443
			return false
		},
		/* 88 EXPANDED <- <('e' 'x' 'p' 'a' 'n' 'd' 'e' 'd')> */
		func() bool {
			position445, tokenIndex445 := position, tokenIndex
			{
				position446 := position
				if buffer[position] != rune('e') {
					goto l445
				}
				position++
				if buffer[position] != rune('x') {
					goto l445
				}
				position++
				if buffer[position] != rune('p') {
					goto l445
				}
				position++
				if buffer[position] != rune('a') {
					goto l445
				}
				position++
				if buffer[position] != rune('n') {
					goto l445
				}
				position++
				if buffer[position] != rune('d') {
					goto l445
				}
				position++
				if buffer[position] != rune('e') {
					goto l445
				}
				position++
				if buffer[position] != rune('d') {
					goto l445
				}
				position++
				add(ruleEXPANDED, position446)
			}
			return true
		l445:
			position, tokenIndex = position445, tokenIndex445
			return false
		},
		/* 89 PERSON <- <('p' 'e' 'r' 's' 'o' 'n' _)> */
		nil,
		/* 90 DATABASE <- <('d' 'a' 't' 'a' 'b' 'a' 's' 'e' _)> */
		nil,
		/* 91 QUEUE <- <('q' 'u' 'e' 'u' 'e' _)> */
		nil,
		/* 92 BLOBSTORE <- <('b' 'l' 'o' 'b' 's' 't' 'o' 'r' 'e' _)> */
		nil,
		/* 93 BROWSER <- <('b' 'r' 'o' 'w' 's' 'e' 'r' _)> */
		nil,
		/* 94 MOBILE <- <('m' 'o' 'b' 'i' 'l' 'e' _)> */
		nil,
		/* 95 SERVER <- <('s' 'e' 'r' 'v' 'e' 'r' _)> */
		nil,
		/* 96 DEVICE <- <('d' 'e' 'v' 'i' 'c' 'e' _)> */
		nil,
		/* 97 CODE <- <('c' 'o' 'd' 'e' _)> */
		nil,
		/* 98 DELIMITER <- <('$' '$')> */
		func() bool {
			position456, tokenIndex456 := position, tokenIndex
			{
				position457 := position
				if buffer[position] != rune('$') {
					goto l456
				}
				position++
				if buffer[position] != rune('$') {
					goto l456
				}
				position++
				add(ruleDELIMITER, position457)
			}
			return true
		l456:
			position, tokenIndex = position456, tokenIndex456
			return false
		},
		/* 99 QUOTE <- <'"'> */
		func() bool {
			position458, tokenIndex458 := position, tokenIndex
			{
				position459 := position
				if buffer[position] != rune('"') {
					goto l458
				}
				position++
				add(ruleQUOTE, position459)
			}
			return true
		l458:
			position, tokenIndex = position458, tokenIndex458
			return false
		},
		/* 100 EQUALS <- <'='> */
		func() bool {
			position460, tokenIndex460 := position, tokenIndex
			{
				position461 := position
				if buffer[position] != rune('=') {
					goto l460
				}
				position++
				add(ruleEQUALS, position461)
			}
			return true
		l460:
			position, tokenIndex = position460, tokenIndex460
			return false
		},
		/* 101 FLAG <- <('-' '-'?)> */
		func() bool {
			position462, tokenIndex462 := position, tokenIndex
			{
				position463 := position
				if buffer[position] != rune('-') {
					goto l462
				}
				position++
				{
					position464, tokenIndex464 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l464
					}
					position++
					goto l465
				l464:
					position, tokenIndex = position464, tokenIndex464
				}
			l465:
				add(ruleFLAG, position463)
			}
			return true
		l462:
			position, tokenIndex = position462, tokenIndex462
			return false
		},
		/* 102 STRICT <- <('s' 't' 'r' 'i' 'c' 't' _)> */
		nil,
		/* 103 VERBOSE <- <('v' 'e' 'r' 'b' 'o' 's' 'e' _)> */
		nil,
		/* 104 IDS <- <('i' 'd' 's' _)> */
		nil,
		/* 105 _ <- <Whitespace*> */
		func() bool {
			{
				position470 := position
			l471:
				{
					position472, tokenIndex472 := position, tokenIndex
					{
						position473 := position
						{
							switch buffer[position] {
							case '\t':
								if buffer[position] != rune('\t') {
									goto l472
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l472
								}
								position++
							default:
								if !_rules[ruleEOL]() {
									goto l472
								}
							}
						}

						add(ruleWhitespace, position473)
					}
					goto l471
				l472:
					position, tokenIndex = position472, tokenIndex472
				}
				add(rule_, position470)
			}
			return true
		},
		/* 106 Whitespace <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') EOL))> */
		nil,
		/* 107 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position476, tokenIndex476 := position, tokenIndex
			{
				position477 := position
				{
					position478, tokenIndex478 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l479
					}
					position++
					if buffer[position] != rune('\n') {
						goto l479
					}
					position++
					goto l478
				l479:
					position, tokenIndex = position478, tokenIndex478
					if buffer[position] != rune('\n') {
						goto l480
					}
					position++
					goto l478
				l480:
					position, tokenIndex = position478, tokenIndex478
					if buffer[position] != rune('\r') {
						goto l476
					}
					position++
				}
			l478:
				add(ruleEOL, position477)
			}
			return true
		l476:
			position, tokenIndex = position476, tokenIndex476
			return false
		},
		/* 108 END <- <!.> */
		func() bool {
			position481, tokenIndex481 := position, tokenIndex
			{
				position482 := position
				{
					position483, tokenIndex483 := position, tokenIndex
					if !matchDot() {
						goto l483
					}
					goto l481
				l483:
					position, tokenIndex = position483, tokenIndex483
				}
				add(ruleEND, position482)
			}
			return true
		l481:
			position, tokenIndex = position481, tokenIndex481
			return false
		},
		/* 110 Action0 <- <{
		   p.StmtType = "Response"
		 }> */
		nil,
		/* 111 Action1 <- <{
		   p.StmtType = "Command"
		   p.InputAttributes.Raw = p.Buffer
		 }> */
		nil,
		nil,
		/* 113 Action2 <- <{ p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text)) }> */
		nil,
		/* 114 Action3 <- <{ p.InputAttributes.Verb = "fetch" }> */
		nil,
		/* 115 Action4 <- <{ p.InputAttributes.Verb = "list" }> */
		nil,
		/* 116 Action5 <- <{ p.InputAttributes.Verb = "create-or-fetch" }> */
		nil,
		/* 117 Action6 <- <{ p.InputAttributes.Verb = "create-or-set" }> */
		nil,
		/* 118 Action7 <- <{ p.Response.Object.Repr = cleanString(text) }> */
		nil,
		/* 119 Action8 <- <{ p.Response.Object.Repr = cleanString(text) }> */
		nil,
		/* 120 Action9 <- <{ p.Response.Object.Repr = cleanString(text) }> */
		nil,
		/* 121 Action10 <- <{
		   p.Response.Error.Message = cleanString(text)
		   if p.number != 0 {
		     p.Response.Error.Code = p.number
		   }
		 }> */
		nil,
		/* 122 Action11 <- <{ p.InputAttributes.Params["limit"] = cleanString(text) }> */
		nil,
		/* 123 Action12 <- <{ p.InputAttributes.ResourceId = cleanString(text) }> */
		nil,
		/* 124 Action13 <- <{
		   p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text))
		 }> */
		nil,
		/* 125 Action14 <- <{
		   p.InputAttributes.ResourceId = ""
		   ids := strings.Fields(text)
		   for _, id := range ids {
		     p.InputAttributes.ResourceIds = append(p.InputAttributes.ResourceIds, cleanString(id))
		   }
		 }> */
		nil,
		/* 126 Action15 <- <{ p.Params["external"] = cleanString(text) }> */
		nil,
		/* 127 Action16 <- <{ p.Params["type"] = cleanString(text) }> */
		nil,
		/* 128 Action17 <- <{ p.Params["name"] = cleanString(text) }> */
		nil,
		/* 129 Action18 <- <{ p.Params["mechanism"] = cleanString(text) }> */
		nil,
		/* 130 Action19 <- <{ p.Params["expanded"] = cleanString(text) }> */
		nil,
		/* 131 Action20 <- <{ p.Params["verb"] = cleanString(text) }> */
		nil,
		/* 132 Action21 <- <{ p.Params["mechanism"] = cleanString(text) }> */
		nil,
		/* 133 Action22 <- <{ p.Params["async"] = cleanString(text) }> */
		nil,
		/* 134 Action23 <- <{ p.Params["expanded"] = cleanString(text) }> */
		nil,
		/* 135 Action24 <- <{ p.InputAttributes.Params[cleanString(text)] = "" }> */
		nil,
		/* 136 Action25 <- <{ p.InputAttributes.Params[cleanString(text)] = "" }> */
		nil,
		/* 137 Action26 <- <{ p.text = cleanString(text) }> */
		nil,
		/* 138 Action27 <- <{ n, _ := strconv.Atoi(text); p.number = n }> */
		nil,
		/* 139 Action28 <- <{ p.bool = text == "true" }> */
		nil,
		/* 140 Action29 <- <{ p.InputAttributes.ResourceType = "item"; p.InputAttributes.Verb = "exists" }> */
		nil,
		/* 141 Action30 <- <{ p.InputAttributes.ResourceType = "rel"; p.InputAttributes.Verb = "exists" }> */
		nil,
		/* 142 Action31 <- <{ p.InputAttributes.ResourceType = "world" }> */
		nil,
		/* 143 Action32 <- <{ p.InputAttributes.ResourceType = "item" }> */
		nil,
		/* 144 Action33 <- <{ p.InputAttributes.ResourceType = "rel" }> */
		nil,
		/* 145 Action34 <- <{ p.InputAttributes.Verb = "create" }> */
		nil,
		/* 146 Action35 <- <{ p.InputAttributes.Verb = "fetch" }> */
		nil,
		/* 147 Action36 <- <{ p.InputAttributes.Verb = "set" }> */
		nil,
		/* 148 Action37 <- <{ p.InputAttributes.Verb = "clear" }> */
		nil,
		/* 149 Action38 <- <{ p.InputAttributes.Verb = "delete" }> */
		nil,
		/* 150 Action39 <- <{ p.InputAttributes.Verb = "list" }> */
		nil,
		/* 151 Action40 <- <{ p.InputAttributes.Verb = "nest"; p.InputAttributes.ResourceType = "item" }> */
		nil,
		/* 152 Action41 <- <{ p.InputAttributes.Verb = "free"; p.InputAttributes.ResourceType = "item" }> */
		nil,
		/* 153 Action42 <- <{ p.InputAttributes.Verb = "exists" }> */
		nil,
		/* 154 Action43 <- <{ p.InputAttributes.Verb = "in?"; p.InputAttributes.ResourceType = "item" }> */
		nil,
		/* 155 Action44 <- <{ p.InputAttributes.Verb = "from?"; p.InputAttributes.ResourceType = "rel" }> */
		nil,
		/* 156 Action45 <- <{ p.InputAttributes.Verb = "to?"; p.InputAttributes.ResourceType = "rel" }> */
		nil,
		/* 157 Action46 <- <{ p.InputAttributes.Flags = append(p.InputAttributes.Flags, "strict") }> */
		nil,
		/* 158 Action47 <- <{ p.InputAttributes.Flags = append(p.InputAttributes.Flags, "verbose") }> */
		nil,
		/* 159 Action48 <- <{ p.InputAttributes.Flags = append(p.InputAttributes.Flags, "ids") }> */
		nil,
	}
	p.rules = _rules
	return nil
}
