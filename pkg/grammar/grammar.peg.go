package grammar

// Code generated by peg -inline -switch -strict -output pkg/grammar/grammar.peg.go pkg/grammar/grammar.peg DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleValid
	ruleResponse
	ruleCommand
	ruleMutation
	ruleTreeMutation
	ruleQuery
	ruleFetchQuery
	ruleListQuery
	ruleExistsQuery
	ruleStateBound
	ruleCreateOrFetch
	ruleCreateOrSet
	ruleObjects
	ruleWorldObject
	ruleItemObject
	ruleRelObject
	ruleIdentifierListObject
	ruleTree
	ruleNil
	ruleErrorOrOkay
	ruleErrCode
	ruleLimit
	ruleIdentifier
	ruleSecondIdentifier
	ruleDualIdentifier
	ruleIdentifierList
	ruleItemParams
	ruleRelParams
	ruleItemParam
	ruleRelParam
	ruleItemKeys
	ruleRelKeys
	ruleItemKey
	ruleRelKey
	ruleStringLike
	ruleNumber
	ruleBoolean
	ruleText
	ruleQuotedText
	ruleItemExists
	ruleRelExists
	ruleWorld
	ruleItem
	ruleRel
	ruleCreate
	ruleFetch
	ruleSet
	ruleClear
	ruleDelete
	ruleList
	ruleNest
	ruleFree
	ruleExists
	ruleInQuery
	ruleFromQuery
	ruleToQuery
	ruleFlag
	ruleStrictFlag
	ruleVerboseFlag
	ruleIdsFlag
	ruleBeginWorld
	ruleEndWorld
	ruleItemType
	ruleKeyword
	ruleWORLD
	ruleENDWORLD
	ruleERROR
	ruleOK
	ruleITEM
	ruleITEM_EXISTS
	ruleREL
	ruleREL_EXISTS
	ruleFROM_QUERY
	ruleTO_QUERY
	ruleIN
	ruleIN_QUERY
	ruleCREATE
	ruleDELETE
	ruleSET
	ruleCLEAR
	ruleFETCH
	ruleLIST
	ruleEXISTS
	ruleFREE
	ruleNEST
	ruleTRUE
	ruleFALSE
	ruleEXTERNAL
	ruleNAME
	ruleTYPE
	ruleVERB
	ruleMECHANISM
	ruleASYNC
	ruleEXPANDED
	rulePERSON
	ruleDATABASE
	ruleQUEUE
	ruleBLOBSTORE
	ruleBROWSER
	ruleMOBILE
	ruleSERVER
	ruleDEVICE
	ruleCODE
	ruleDELIMITER
	ruleQUOTE
	ruleEQUALS
	ruleFLAG
	ruleSTRICT
	ruleVERBOSE
	ruleIDS
	rule_
	ruleWhitespace
	ruleEOL
	ruleEND
	ruleAction0
	ruleAction1
	rulePegText
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
	ruleAction50
	ruleAction51
	ruleAction52
)

var rul3s = [...]string{
	"Unknown",
	"Valid",
	"Response",
	"Command",
	"Mutation",
	"TreeMutation",
	"Query",
	"FetchQuery",
	"ListQuery",
	"ExistsQuery",
	"StateBound",
	"CreateOrFetch",
	"CreateOrSet",
	"Objects",
	"WorldObject",
	"ItemObject",
	"RelObject",
	"IdentifierListObject",
	"Tree",
	"Nil",
	"ErrorOrOkay",
	"ErrCode",
	"Limit",
	"Identifier",
	"SecondIdentifier",
	"DualIdentifier",
	"IdentifierList",
	"ItemParams",
	"RelParams",
	"ItemParam",
	"RelParam",
	"ItemKeys",
	"RelKeys",
	"ItemKey",
	"RelKey",
	"StringLike",
	"Number",
	"Boolean",
	"Text",
	"QuotedText",
	"ItemExists",
	"RelExists",
	"World",
	"Item",
	"Rel",
	"Create",
	"Fetch",
	"Set",
	"Clear",
	"Delete",
	"List",
	"Nest",
	"Free",
	"Exists",
	"InQuery",
	"FromQuery",
	"ToQuery",
	"Flag",
	"StrictFlag",
	"VerboseFlag",
	"IdsFlag",
	"BeginWorld",
	"EndWorld",
	"ItemType",
	"Keyword",
	"WORLD",
	"ENDWORLD",
	"ERROR",
	"OK",
	"ITEM",
	"ITEM_EXISTS",
	"REL",
	"REL_EXISTS",
	"FROM_QUERY",
	"TO_QUERY",
	"IN",
	"IN_QUERY",
	"CREATE",
	"DELETE",
	"SET",
	"CLEAR",
	"FETCH",
	"LIST",
	"EXISTS",
	"FREE",
	"NEST",
	"TRUE",
	"FALSE",
	"EXTERNAL",
	"NAME",
	"TYPE",
	"VERB",
	"MECHANISM",
	"ASYNC",
	"EXPANDED",
	"PERSON",
	"DATABASE",
	"QUEUE",
	"BLOBSTORE",
	"BROWSER",
	"MOBILE",
	"SERVER",
	"DEVICE",
	"CODE",
	"DELIMITER",
	"QUOTE",
	"EQUALS",
	"FLAG",
	"STRICT",
	"VERBOSE",
	"IDS",
	"_",
	"Whitespace",
	"EOL",
	"END",
	"Action0",
	"Action1",
	"PegText",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
	"Action50",
	"Action51",
	"Action52",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	StmtType string
	InputAttributes
	Response

	text   string // Text parsed by the StringLike rule.
	number int    // Number parsed by the Number rule.
	bool   bool   // Boolean parsed by the Boolean rule.

	Tree        Node     // The root of the world.Tree.
	TreeString  string   // Track the string representation of the Tree parsed by the Tree rule.
	ItemStrings []string // Track the string representations of Items parsed by the ItemObject rule.
	RelStrings  []string // Track the string representations of Rels parsed by the RelObject rule.

	currentId string // Current Identifier being parsed.
	nodeStack []Node // Stack of nodes for building the tree.

	Buffer string
	buffer []rune
	rules  [169]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.StmtType = "Response"

		case ruleAction1:

			p.StmtType = "Command"
			p.InputAttributes.Raw = p.Buffer

		case ruleAction2:
			p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text))
		case ruleAction3:
			p.InputAttributes.Verb = "fetch"
		case ruleAction4:
			p.InputAttributes.Verb = "list"
		case ruleAction5:
			p.InputAttributes.Verb = "create-or-fetch"
		case ruleAction6:
			p.InputAttributes.Verb = "create-or-set"
		case ruleAction7:
			p.Response.Object.Type = "world"
			p.Response.Object.Repr = strings.Join(append([]string{p.TreeString}, p.RelStrings...), "\n")
		case ruleAction8:

			p.Response.Object.Type = "item"
			p.Response.Object.Repr = cleanString(text)
			p.ItemStrings = append(p.ItemStrings, strings.TrimSpace(text))
			p.currentId = p.InputAttributes.ResourceId
			p.nodeStack = append(p.nodeStack, Node{Id: p.currentId, Children: []Node{}})

		case ruleAction9:
			p.Response.Object.Type = "rel"
			p.Response.Object.Repr = cleanString(text)
			p.RelStrings = append(p.RelStrings, strings.TrimSpace(text))
		case ruleAction10:
			p.Response.Object.Type = "ids"
			b, _ := json.Marshal(p.InputAttributes.ResourceIds)
			p.Response.Object.Repr = string(b)
		case ruleAction11:

			p.StmtType = "Tree"
			p.Response.Object.Type = "tree"
			p.Response.Object.Repr = text
			p.TreeString = text
			if len(p.nodeStack) > 0 {
				node := p.nodeStack[len(p.nodeStack)-1]
				p.nodeStack = p.nodeStack[:len(p.nodeStack)-1]
				if len(p.nodeStack) > 0 {
					p.nodeStack[len(p.nodeStack)-1].Children = append(p.nodeStack[len(p.nodeStack)-1].Children, node)
				} else {
					p.Tree = node
				}
			}

		case ruleAction12:

			p.currentId = "nil"
			p.nodeStack = append(p.nodeStack, Node{Id: p.currentId, Children: []Node{}})

		case ruleAction13:

			p.Response.Status.Message = cleanString(text)

		case ruleAction14:
			p.Response.Status.Code = p.number
		case ruleAction15:
			p.InputAttributes.Params["limit"] = cleanString(text)
		case ruleAction16:
			p.InputAttributes.ResourceId = cleanString(text)
		case ruleAction17:

			p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text))

		case ruleAction18:

			p.InputAttributes.ResourceId = ""
			ids := strings.Fields(text)
			for _, id := range ids {
				p.InputAttributes.ResourceIds = append(p.InputAttributes.ResourceIds, cleanString(id))
			}

		case ruleAction19:
			p.Params["external"] = cleanString(text)
		case ruleAction20:
			p.Params["type"] = cleanString(text)
		case ruleAction21:
			p.Params["name"] = cleanString(text)
		case ruleAction22:
			p.Params["mechanism"] = cleanString(text)
		case ruleAction23:
			p.Params["expanded"] = cleanString(text)
		case ruleAction24:
			p.Params["verb"] = cleanString(text)
		case ruleAction25:
			p.Params["mechanism"] = cleanString(text)
		case ruleAction26:
			p.Params["async"] = cleanString(text)
		case ruleAction27:
			p.Params["expanded"] = cleanString(text)
		case ruleAction28:
			p.InputAttributes.Params[cleanString(text)] = ""
		case ruleAction29:
			p.InputAttributes.Params[cleanString(text)] = ""
		case ruleAction30:
			p.text = cleanString(text)
		case ruleAction31:
			n, _ := strconv.Atoi(text)
			p.number = n
		case ruleAction32:
			p.bool = text == "true"
		case ruleAction33:
			p.InputAttributes.ResourceType = "item"
			p.InputAttributes.Verb = "exists"
		case ruleAction34:
			p.InputAttributes.ResourceType = "rel"
			p.InputAttributes.Verb = "exists"
		case ruleAction35:
			p.InputAttributes.ResourceType = "world"
		case ruleAction36:
			p.InputAttributes.ResourceType = "item"
		case ruleAction37:
			p.InputAttributes.ResourceType = "rel"
		case ruleAction38:
			p.InputAttributes.Verb = "create"
		case ruleAction39:
			p.InputAttributes.Verb = "fetch"
		case ruleAction40:
			p.InputAttributes.Verb = "set"
		case ruleAction41:
			p.InputAttributes.Verb = "clear"
		case ruleAction42:
			p.InputAttributes.Verb = "delete"
		case ruleAction43:
			p.InputAttributes.Verb = "list"
		case ruleAction44:
			p.InputAttributes.Verb = "nest"
			p.InputAttributes.ResourceType = "item"
		case ruleAction45:
			p.InputAttributes.Verb = "free"
			p.InputAttributes.ResourceType = "item"
		case ruleAction46:
			p.InputAttributes.Verb = "exists"
		case ruleAction47:
			p.InputAttributes.Verb = "in?"
			p.InputAttributes.ResourceType = "item"
		case ruleAction48:
			p.InputAttributes.Verb = "from?"
			p.InputAttributes.ResourceType = "rel"
		case ruleAction49:
			p.InputAttributes.Verb = "to?"
			p.InputAttributes.ResourceType = "rel"
		case ruleAction50:
			p.InputAttributes.Flags = append(p.InputAttributes.Flags, "strict")
		case ruleAction51:
			p.InputAttributes.Flags = append(p.InputAttributes.Flags, "verbose")
		case ruleAction52:
			p.InputAttributes.Flags = append(p.InputAttributes.Flags, "ids")

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Valid <- <(Command / Response / Tree)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						if !_rules[rule_]() {
							goto l3
						}
						{
							position5, tokenIndex5 := position, tokenIndex
							{
								position7 := position
								{
									position8, tokenIndex8 := position, tokenIndex
									if !_rules[ruleItem]() {
										goto l9
									}
									{
										position10, tokenIndex10 := position, tokenIndex
										if !_rules[ruleCreate]() {
											goto l11
										}
										goto l10
									l11:
										position, tokenIndex = position10, tokenIndex10
										if !_rules[ruleSet]() {
											goto l9
										}
									}
								l10:
									if !_rules[ruleIdentifier]() {
										goto l9
									}
									{
										position12, tokenIndex12 := position, tokenIndex
										if !_rules[ruleItemParams]() {
											goto l12
										}
										goto l13
									l12:
										position, tokenIndex = position12, tokenIndex12
									}
								l13:
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleItem]() {
										goto l14
									}
									if !_rules[ruleClear]() {
										goto l14
									}
									if !_rules[ruleIdentifier]() {
										goto l14
									}
									{
										position15 := position
										{
											position18 := position
											{
												position19 := position
												{
													position20, tokenIndex20 := position, tokenIndex
													if !_rules[ruleEXTERNAL]() {
														goto l21
													}
													goto l20
												l21:
													position, tokenIndex = position20, tokenIndex20
													{
														switch buffer[position] {
														case 'e':
															if !_rules[ruleEXPANDED]() {
																goto l14
															}
														case 'm':
															if !_rules[ruleMECHANISM]() {
																goto l14
															}
														case 't':
															if !_rules[ruleTYPE]() {
																goto l14
															}
														default:
															if !_rules[ruleNAME]() {
																goto l14
															}
														}
													}

												}
											l20:
												add(rulePegText, position19)
											}
											if !_rules[rule_]() {
												goto l14
											}
											{
												add(ruleAction28, position)
											}
											add(ruleItemKey, position18)
										}
									l16:
										{
											position17, tokenIndex17 := position, tokenIndex
											{
												position24 := position
												{
													position25 := position
													{
														position26, tokenIndex26 := position, tokenIndex
														if !_rules[ruleEXTERNAL]() {
															goto l27
														}
														goto l26
													l27:
														position, tokenIndex = position26, tokenIndex26
														{
															switch buffer[position] {
															case 'e':
																if !_rules[ruleEXPANDED]() {
																	goto l17
																}
															case 'm':
																if !_rules[ruleMECHANISM]() {
																	goto l17
																}
															case 't':
																if !_rules[ruleTYPE]() {
																	goto l17
																}
															default:
																if !_rules[ruleNAME]() {
																	goto l17
																}
															}
														}

													}
												l26:
													add(rulePegText, position25)
												}
												if !_rules[rule_]() {
													goto l17
												}
												{
													add(ruleAction28, position)
												}
												add(ruleItemKey, position24)
											}
											goto l16
										l17:
											position, tokenIndex = position17, tokenIndex17
										}
										add(ruleItemKeys, position15)
									}
									goto l8
								l14:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleItem]() {
										goto l30
									}
									if !_rules[ruleDelete]() {
										goto l30
									}
									if !_rules[ruleIdentifier]() {
										goto l30
									}
									goto l8
								l30:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleRel]() {
										goto l31
									}
									{
										position32, tokenIndex32 := position, tokenIndex
										if !_rules[ruleCreate]() {
											goto l33
										}
										goto l32
									l33:
										position, tokenIndex = position32, tokenIndex32
										if !_rules[ruleSet]() {
											goto l31
										}
									}
								l32:
									if !_rules[ruleDualIdentifier]() {
										goto l31
									}
									{
										position34, tokenIndex34 := position, tokenIndex
										if !_rules[ruleRelParams]() {
											goto l34
										}
										goto l35
									l34:
										position, tokenIndex = position34, tokenIndex34
									}
								l35:
									goto l8
								l31:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleRel]() {
										goto l36
									}
									if !_rules[ruleClear]() {
										goto l36
									}
									if !_rules[ruleDualIdentifier]() {
										goto l36
									}
									{
										position37 := position
										{
											position40 := position
											{
												position41 := position
												{
													switch buffer[position] {
													case 'e':
														if !_rules[ruleEXPANDED]() {
															goto l36
														}
													case 'a':
														if !_rules[ruleASYNC]() {
															goto l36
														}
													case 'm':
														if !_rules[ruleMECHANISM]() {
															goto l36
														}
													default:
														if !_rules[ruleVERB]() {
															goto l36
														}
													}
												}

												add(rulePegText, position41)
											}
											if !_rules[rule_]() {
												goto l36
											}
											{
												add(ruleAction29, position)
											}
											add(ruleRelKey, position40)
										}
									l38:
										{
											position39, tokenIndex39 := position, tokenIndex
											{
												position44 := position
												{
													position45 := position
													{
														switch buffer[position] {
														case 'e':
															if !_rules[ruleEXPANDED]() {
																goto l39
															}
														case 'a':
															if !_rules[ruleASYNC]() {
																goto l39
															}
														case 'm':
															if !_rules[ruleMECHANISM]() {
																goto l39
															}
														default:
															if !_rules[ruleVERB]() {
																goto l39
															}
														}
													}

													add(rulePegText, position45)
												}
												if !_rules[rule_]() {
													goto l39
												}
												{
													add(ruleAction29, position)
												}
												add(ruleRelKey, position44)
											}
											goto l38
										l39:
											position, tokenIndex = position39, tokenIndex39
										}
										add(ruleRelKeys, position37)
									}
									goto l8
								l36:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleRel]() {
										goto l6
									}
									if !_rules[ruleDelete]() {
										goto l6
									}
									if !_rules[ruleDualIdentifier]() {
										goto l6
									}
								}
							l8:
								add(ruleMutation, position7)
							}
							goto l5
						l6:
							position, tokenIndex = position5, tokenIndex5
							{
								position49 := position
								{
									position50, tokenIndex50 := position, tokenIndex
									{
										position52 := position
										if !_rules[ruleFREE]() {
											goto l51
										}
										{
											add(ruleAction45, position)
										}
										add(ruleFree, position52)
									}
									if !_rules[ruleIdentifierList]() {
										goto l51
									}
									goto l50
								l51:
									position, tokenIndex = position50, tokenIndex50
									{
										position54 := position
										if !_rules[ruleNEST]() {
											goto l48
										}
										{
											add(ruleAction44, position)
										}
										add(ruleNest, position54)
									}
									if !_rules[ruleIdentifierList]() {
										goto l48
									}
									if !_rules[rule_]() {
										goto l48
									}
									if !_rules[ruleIN]() {
										goto l48
									}
									{
										position56 := position
										if !_rules[ruleStringLike]() {
											goto l48
										}
										add(rulePegText, position56)
									}
									{
										add(ruleAction2, position)
									}
								}
							l50:
								add(ruleTreeMutation, position49)
							}
							goto l5
						l48:
							position, tokenIndex = position5, tokenIndex5
							{
								position59 := position
								{
									position60, tokenIndex60 := position, tokenIndex
									{
										position62 := position
										{
											switch buffer[position] {
											case 'w':
												{
													position64 := position
													if !_rules[ruleWORLD]() {
														goto l61
													}
													{
														add(ruleAction35, position)
													}
													add(ruleWorld, position64)
												}
												{
													add(ruleAction3, position)
												}
											case 'r':
												if !_rules[ruleRel]() {
													goto l61
												}
												if !_rules[ruleFetch]() {
													goto l61
												}
												if !_rules[ruleDualIdentifier]() {
													goto l61
												}
											default:
												if !_rules[ruleItem]() {
													goto l61
												}
												if !_rules[ruleFetch]() {
													goto l61
												}
												if !_rules[ruleIdentifier]() {
													goto l61
												}
											}
										}

										add(ruleFetchQuery, position62)
									}
									goto l60
								l61:
									position, tokenIndex = position60, tokenIndex60
									{
										position68 := position
										{
											position69, tokenIndex69 := position, tokenIndex
											{
												position71, tokenIndex71 := position, tokenIndex
												if !_rules[ruleItem]() {
													goto l72
												}
												goto l71
											l72:
												position, tokenIndex = position71, tokenIndex71
												if !_rules[ruleRel]() {
													goto l70
												}
											}
										l71:
											{
												position73 := position
												if !_rules[ruleLIST]() {
													goto l70
												}
												{
													add(ruleAction43, position)
												}
												add(ruleList, position73)
											}
											{
												position75, tokenIndex75 := position, tokenIndex
												{
													position77 := position
													{
														position78 := position
														if !_rules[ruleNumber]() {
															goto l75
														}
														add(rulePegText, position78)
													}
													{
														add(ruleAction15, position)
													}
													add(ruleLimit, position77)
												}
												goto l76
											l75:
												position, tokenIndex = position75, tokenIndex75
											}
										l76:
											goto l69
										l70:
											position, tokenIndex = position69, tokenIndex69
											{
												switch buffer[position] {
												case 'f':
													{
														position81 := position
														if !_rules[ruleFROM_QUERY]() {
															goto l67
														}
														{
															add(ruleAction48, position)
														}
														add(ruleFromQuery, position81)
													}
													if !_rules[ruleIdentifier]() {
														goto l67
													}
												case 't':
													{
														position83 := position
														if !_rules[ruleTO_QUERY]() {
															goto l67
														}
														{
															add(ruleAction49, position)
														}
														add(ruleToQuery, position83)
													}
													if !_rules[ruleIdentifier]() {
														goto l67
													}
												default:
													if !_rules[ruleItem]() {
														goto l67
													}
													if !_rules[ruleIN]() {
														goto l67
													}
													if !_rules[ruleIdentifier]() {
														goto l67
													}
													{
														add(ruleAction4, position)
													}
												}
											}

										}
									l69:
										add(ruleListQuery, position68)
									}
									goto l60
								l67:
									position, tokenIndex = position60, tokenIndex60
									{
										position86 := position
										{
											position87, tokenIndex87 := position, tokenIndex
											{
												position89 := position
												if !_rules[ruleIN_QUERY]() {
													goto l88
												}
												{
													add(ruleAction47, position)
												}
												add(ruleInQuery, position89)
											}
											if !_rules[ruleDualIdentifier]() {
												goto l88
											}
											goto l87
										l88:
											position, tokenIndex = position87, tokenIndex87
											{
												position92 := position
												{
													position93, tokenIndex93 := position, tokenIndex
													if !_rules[ruleITEM_EXISTS]() {
														goto l94
													}
													goto l93
												l94:
													position, tokenIndex = position93, tokenIndex93
													if !_rules[ruleItem]() {
														goto l91
													}
													if !_rules[ruleExists]() {
														goto l91
													}
												}
											l93:
												{
													add(ruleAction33, position)
												}
												add(ruleItemExists, position92)
											}
											if !_rules[ruleIdentifier]() {
												goto l91
											}
											goto l87
										l91:
											position, tokenIndex = position87, tokenIndex87
											{
												position96 := position
												{
													position97, tokenIndex97 := position, tokenIndex
													if !_rules[ruleREL_EXISTS]() {
														goto l98
													}
													goto l97
												l98:
													position, tokenIndex = position97, tokenIndex97
													if !_rules[ruleRel]() {
														goto l58
													}
													if !_rules[ruleExists]() {
														goto l58
													}
												}
											l97:
												{
													add(ruleAction34, position)
												}
												add(ruleRelExists, position96)
											}
											if !_rules[ruleDualIdentifier]() {
												goto l58
											}
										}
									l87:
										add(ruleExistsQuery, position86)
									}
								}
							l60:
								add(ruleQuery, position59)
							}
							goto l5
						l58:
							position, tokenIndex = position5, tokenIndex5
							{
								position100 := position
								{
									position101, tokenIndex101 := position, tokenIndex
									{
										position103 := position
										{
											position104, tokenIndex104 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l105
											}
											if !_rules[ruleIdentifier]() {
												goto l105
											}
											{
												position106, tokenIndex106 := position, tokenIndex
												if !_rules[ruleItemParams]() {
													goto l106
												}
												goto l105
											l106:
												position, tokenIndex = position106, tokenIndex106
											}
											goto l104
										l105:
											position, tokenIndex = position104, tokenIndex104
											if !_rules[ruleRel]() {
												goto l102
											}
											if !_rules[ruleDualIdentifier]() {
												goto l102
											}
											{
												position107, tokenIndex107 := position, tokenIndex
												if !_rules[ruleRelParams]() {
													goto l107
												}
												goto l102
											l107:
												position, tokenIndex = position107, tokenIndex107
											}
										}
									l104:
										add(ruleCreateOrFetch, position103)
									}
									{
										add(ruleAction5, position)
									}
									goto l101
								l102:
									position, tokenIndex = position101, tokenIndex101
									{
										position109 := position
										{
											position110, tokenIndex110 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l111
											}
											if !_rules[ruleIdentifier]() {
												goto l111
											}
											if !_rules[ruleItemParams]() {
												goto l111
											}
											goto l110
										l111:
											position, tokenIndex = position110, tokenIndex110
											if !_rules[ruleRel]() {
												goto l3
											}
											if !_rules[ruleDualIdentifier]() {
												goto l3
											}
											if !_rules[ruleRelParams]() {
												goto l3
											}
										}
									l110:
										add(ruleCreateOrSet, position109)
									}
									{
										add(ruleAction6, position)
									}
								}
							l101:
								add(ruleStateBound, position100)
							}
						}
					l5:
					l113:
						{
							position114, tokenIndex114 := position, tokenIndex
							{
								position115 := position
								{
									position116, tokenIndex116 := position, tokenIndex
									{
										position118 := position
										if !_rules[ruleFLAG]() {
											goto l117
										}
										{
											position119 := position
											if buffer[position] != rune('s') {
												goto l117
											}
											position++
											if buffer[position] != rune('t') {
												goto l117
											}
											position++
											if buffer[position] != rune('r') {
												goto l117
											}
											position++
											if buffer[position] != rune('i') {
												goto l117
											}
											position++
											if buffer[position] != rune('c') {
												goto l117
											}
											position++
											if buffer[position] != rune('t') {
												goto l117
											}
											position++
											if !_rules[rule_]() {
												goto l117
											}
											add(ruleSTRICT, position119)
										}
										{
											add(ruleAction50, position)
										}
										add(ruleStrictFlag, position118)
									}
									goto l116
								l117:
									position, tokenIndex = position116, tokenIndex116
									{
										position122 := position
										if !_rules[ruleFLAG]() {
											goto l121
										}
										{
											position123 := position
											if buffer[position] != rune('v') {
												goto l121
											}
											position++
											if buffer[position] != rune('e') {
												goto l121
											}
											position++
											if buffer[position] != rune('r') {
												goto l121
											}
											position++
											if buffer[position] != rune('b') {
												goto l121
											}
											position++
											if buffer[position] != rune('o') {
												goto l121
											}
											position++
											if buffer[position] != rune('s') {
												goto l121
											}
											position++
											if buffer[position] != rune('e') {
												goto l121
											}
											position++
											if !_rules[rule_]() {
												goto l121
											}
											add(ruleVERBOSE, position123)
										}
										{
											add(ruleAction51, position)
										}
										add(ruleVerboseFlag, position122)
									}
									goto l116
								l121:
									position, tokenIndex = position116, tokenIndex116
									{
										position125 := position
										if !_rules[ruleFLAG]() {
											goto l114
										}
										{
											position126 := position
											if buffer[position] != rune('i') {
												goto l114
											}
											position++
											if buffer[position] != rune('d') {
												goto l114
											}
											position++
											if buffer[position] != rune('s') {
												goto l114
											}
											position++
											if !_rules[rule_]() {
												goto l114
											}
											add(ruleIDS, position126)
										}
										{
											add(ruleAction52, position)
										}
										add(ruleIdsFlag, position125)
									}
								}
							l116:
								add(ruleFlag, position115)
							}
							goto l113
						l114:
							position, tokenIndex = position114, tokenIndex114
						}
						if !_rules[ruleEND]() {
							goto l3
						}
						{
							add(ruleAction1, position)
						}
						add(ruleCommand, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position130 := position
						{
							position131, tokenIndex131 := position, tokenIndex
							{
								position133 := position
								{
									position134, tokenIndex134 := position, tokenIndex
									{
										position136 := position
										{
											position137 := position
											if !_rules[rule_]() {
												goto l135
											}
											if !_rules[ruleDELIMITER]() {
												goto l135
											}
											if !_rules[ruleWORLD]() {
												goto l135
											}
											if !_rules[rule_]() {
												goto l135
											}
											add(ruleBeginWorld, position137)
										}
										if !_rules[ruleTree]() {
											goto l135
										}
									l138:
										{
											position139, tokenIndex139 := position, tokenIndex
											if !_rules[ruleRelObject]() {
												goto l139
											}
											goto l138
										l139:
											position, tokenIndex = position139, tokenIndex139
										}
										{
											position140 := position
											if !_rules[rule_]() {
												goto l135
											}
											if !_rules[ruleENDWORLD]() {
												goto l135
											}
											if !_rules[ruleDELIMITER]() {
												goto l135
											}
											if !_rules[rule_]() {
												goto l135
											}
											add(ruleEndWorld, position140)
										}
										{
											add(ruleAction7, position)
										}
										add(ruleWorldObject, position136)
									}
									goto l134
								l135:
									position, tokenIndex = position134, tokenIndex134
									if !_rules[ruleTree]() {
										goto l142
									}
									goto l134
								l142:
									position, tokenIndex = position134, tokenIndex134
									if !_rules[ruleItemObject]() {
										goto l143
									}
								l144:
									{
										position145, tokenIndex145 := position, tokenIndex
										if !_rules[ruleItemObject]() {
											goto l145
										}
										goto l144
									l145:
										position, tokenIndex = position145, tokenIndex145
									}
									goto l134
								l143:
									position, tokenIndex = position134, tokenIndex134
									if !_rules[ruleRelObject]() {
										goto l146
									}
								l147:
									{
										position148, tokenIndex148 := position, tokenIndex
										if !_rules[ruleRelObject]() {
											goto l148
										}
										goto l147
									l148:
										position, tokenIndex = position148, tokenIndex148
									}
									goto l134
								l146:
									position, tokenIndex = position134, tokenIndex134
									{
										position149 := position
										if !_rules[ruleIdentifierList]() {
											goto l131
										}
										{
											add(ruleAction10, position)
										}
										add(ruleIdentifierListObject, position149)
									}
								}
							l134:
								add(ruleObjects, position133)
							}
							goto l132
						l131:
							position, tokenIndex = position131, tokenIndex131
						}
					l132:
						if !_rules[rule_]() {
							goto l129
						}
						if !_rules[ruleDELIMITER]() {
							goto l129
						}
						if !_rules[ruleDELIMITER]() {
							goto l129
						}
						if !_rules[rule_]() {
							goto l129
						}
						{
							position151 := position
							{
								position152 := position
								{
									position153 := position
									if !_rules[ruleNumber]() {
										goto l129
									}
									add(rulePegText, position153)
								}
								{
									add(ruleAction14, position)
								}
								add(ruleErrCode, position152)
							}
							{
								position155, tokenIndex155 := position, tokenIndex
								if !_rules[ruleERROR]() {
									goto l156
								}
								goto l155
							l156:
								position, tokenIndex = position155, tokenIndex155
								if !_rules[ruleOK]() {
									goto l129
								}
							}
						l155:
							{
								position157 := position
							l158:
								{
									position159, tokenIndex159 := position, tokenIndex
									if !_rules[ruleStringLike]() {
										goto l159
									}
									goto l158
								l159:
									position, tokenIndex = position159, tokenIndex159
								}
								add(rulePegText, position157)
							}
							{
								add(ruleAction13, position)
							}
							add(ruleErrorOrOkay, position151)
						}
						if !_rules[ruleEND]() {
							goto l129
						}
						{
							add(ruleAction0, position)
						}
						add(ruleResponse, position130)
					}
					goto l2
				l129:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleTree]() {
						goto l0
					}
				}
			l2:
				add(ruleValid, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Response <- <(Objects? _ DELIMITER DELIMITER _ ErrorOrOkay END Action0)> */
		nil,
		/* 2 Command <- <(_ (Mutation / TreeMutation / Query / StateBound) Flag* END Action1)> */
		nil,
		/* 3 Mutation <- <((Item (Create / Set) Identifier ItemParams?) / (Item Clear Identifier ItemKeys) / (Item Delete Identifier) / (Rel (Create / Set) DualIdentifier RelParams?) / (Rel Clear DualIdentifier RelKeys) / (Rel Delete DualIdentifier))> */
		nil,
		/* 4 TreeMutation <- <((Free IdentifierList) / (Nest IdentifierList _ IN <StringLike> Action2))> */
		nil,
		/* 5 Query <- <(FetchQuery / ListQuery / ExistsQuery)> */
		nil,
		/* 6 FetchQuery <- <((&('w') (World Action3)) | (&('r') (Rel Fetch DualIdentifier)) | (&('i') (Item Fetch Identifier)))> */
		nil,
		/* 7 ListQuery <- <(((Item / Rel) List Limit?) / ((&('f') (FromQuery Identifier)) | (&('t') (ToQuery Identifier)) | (&('i') (Item IN Identifier Action4))))> */
		nil,
		/* 8 ExistsQuery <- <((InQuery DualIdentifier) / (ItemExists Identifier) / (RelExists DualIdentifier))> */
		nil,
		/* 9 StateBound <- <((CreateOrFetch Action5) / (CreateOrSet Action6))> */
		nil,
		/* 10 CreateOrFetch <- <((Item Identifier !ItemParams) / (Rel DualIdentifier !RelParams))> */
		nil,
		/* 11 CreateOrSet <- <((Item Identifier ItemParams) / (Rel DualIdentifier RelParams))> */
		nil,
		/* 12 Objects <- <(WorldObject / Tree / ItemObject+ / RelObject+ / IdentifierListObject)> */
		nil,
		/* 13 WorldObject <- <(BeginWorld Tree RelObject* EndWorld Action7)> */
		nil,
		/* 14 ItemObject <- <(<(Item Identifier ItemParams?)> Action8)> */
		func() bool {
			position175, tokenIndex175 := position, tokenIndex
			{
				position176 := position
				{
					position177 := position
					if !_rules[ruleItem]() {
						goto l175
					}
					if !_rules[ruleIdentifier]() {
						goto l175
					}
					{
						position178, tokenIndex178 := position, tokenIndex
						if !_rules[ruleItemParams]() {
							goto l178
						}
						goto l179
					l178:
						position, tokenIndex = position178, tokenIndex178
					}
				l179:
					add(rulePegText, position177)
				}
				{
					add(ruleAction8, position)
				}
				add(ruleItemObject, position176)
			}
			return true
		l175:
			position, tokenIndex = position175, tokenIndex175
			return false
		},
		/* 15 RelObject <- <(<(Rel DualIdentifier RelParams?)> Action9)> */
		func() bool {
			position181, tokenIndex181 := position, tokenIndex
			{
				position182 := position
				{
					position183 := position
					if !_rules[ruleRel]() {
						goto l181
					}
					if !_rules[ruleDualIdentifier]() {
						goto l181
					}
					{
						position184, tokenIndex184 := position, tokenIndex
						if !_rules[ruleRelParams]() {
							goto l184
						}
						goto l185
					l184:
						position, tokenIndex = position184, tokenIndex184
					}
				l185:
					add(rulePegText, position183)
				}
				{
					add(ruleAction9, position)
				}
				add(ruleRelObject, position182)
			}
			return true
		l181:
			position, tokenIndex = position181, tokenIndex181
			return false
		},
		/* 16 IdentifierListObject <- <(IdentifierList Action10)> */
		nil,
		/* 17 Tree <- <(<('t' 'r' 'e' 'e' '{' (Nil / ItemObject) (':' ':' '[') Tree* (']' '}'))> _ Action11)> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				{
					position190 := position
					if buffer[position] != rune('t') {
						goto l188
					}
					position++
					if buffer[position] != rune('r') {
						goto l188
					}
					position++
					if buffer[position] != rune('e') {
						goto l188
					}
					position++
					if buffer[position] != rune('e') {
						goto l188
					}
					position++
					if buffer[position] != rune('{') {
						goto l188
					}
					position++
					{
						position191, tokenIndex191 := position, tokenIndex
						{
							position193 := position
							if buffer[position] != rune('n') {
								goto l192
							}
							position++
							if buffer[position] != rune('i') {
								goto l192
							}
							position++
							if buffer[position] != rune('l') {
								goto l192
							}
							position++
							{
								add(ruleAction12, position)
							}
							add(ruleNil, position193)
						}
						goto l191
					l192:
						position, tokenIndex = position191, tokenIndex191
						if !_rules[ruleItemObject]() {
							goto l188
						}
					}
				l191:
					if buffer[position] != rune(':') {
						goto l188
					}
					position++
					if buffer[position] != rune(':') {
						goto l188
					}
					position++
					if buffer[position] != rune('[') {
						goto l188
					}
					position++
				l195:
					{
						position196, tokenIndex196 := position, tokenIndex
						if !_rules[ruleTree]() {
							goto l196
						}
						goto l195
					l196:
						position, tokenIndex = position196, tokenIndex196
					}
					if buffer[position] != rune(']') {
						goto l188
					}
					position++
					if buffer[position] != rune('}') {
						goto l188
					}
					position++
					add(rulePegText, position190)
				}
				if !_rules[rule_]() {
					goto l188
				}
				{
					add(ruleAction11, position)
				}
				add(ruleTree, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 18 Nil <- <('n' 'i' 'l' Action12)> */
		nil,
		/* 19 ErrorOrOkay <- <(ErrCode (ERROR / OK) <StringLike*> Action13)> */
		nil,
		/* 20 ErrCode <- <(<Number> Action14)> */
		nil,
		/* 21 Limit <- <(<Number> Action15)> */
		nil,
		/* 22 Identifier <- <(!Keyword <StringLike> Action16)> */
		func() bool {
			position202, tokenIndex202 := position, tokenIndex
			{
				position203 := position
				{
					position204, tokenIndex204 := position, tokenIndex
					if !_rules[ruleKeyword]() {
						goto l204
					}
					goto l202
				l204:
					position, tokenIndex = position204, tokenIndex204
				}
				{
					position205 := position
					if !_rules[ruleStringLike]() {
						goto l202
					}
					add(rulePegText, position205)
				}
				{
					add(ruleAction16, position)
				}
				add(ruleIdentifier, position203)
			}
			return true
		l202:
			position, tokenIndex = position202, tokenIndex202
			return false
		},
		/* 23 SecondIdentifier <- <(!Keyword &Identifier <StringLike> Action17)> */
		nil,
		/* 24 DualIdentifier <- <(Identifier SecondIdentifier)> */
		func() bool {
			position208, tokenIndex208 := position, tokenIndex
			{
				position209 := position
				if !_rules[ruleIdentifier]() {
					goto l208
				}
				{
					position210 := position
					{
						position211, tokenIndex211 := position, tokenIndex
						if !_rules[ruleKeyword]() {
							goto l211
						}
						goto l208
					l211:
						position, tokenIndex = position211, tokenIndex211
					}
					{
						position212, tokenIndex212 := position, tokenIndex
						if !_rules[ruleIdentifier]() {
							goto l208
						}
						position, tokenIndex = position212, tokenIndex212
					}
					{
						position213 := position
						if !_rules[ruleStringLike]() {
							goto l208
						}
						add(rulePegText, position213)
					}
					{
						add(ruleAction17, position)
					}
					add(ruleSecondIdentifier, position210)
				}
				add(ruleDualIdentifier, position209)
			}
			return true
		l208:
			position, tokenIndex = position208, tokenIndex208
			return false
		},
		/* 25 IdentifierList <- <(<(Identifier Identifier*)> Action18)> */
		func() bool {
			position215, tokenIndex215 := position, tokenIndex
			{
				position216 := position
				{
					position217 := position
					if !_rules[ruleIdentifier]() {
						goto l215
					}
				l218:
					{
						position219, tokenIndex219 := position, tokenIndex
						if !_rules[ruleIdentifier]() {
							goto l219
						}
						goto l218
					l219:
						position, tokenIndex = position219, tokenIndex219
					}
					add(rulePegText, position217)
				}
				{
					add(ruleAction18, position)
				}
				add(ruleIdentifierList, position216)
			}
			return true
		l215:
			position, tokenIndex = position215, tokenIndex215
			return false
		},
		/* 26 ItemParams <- <ItemParam+> */
		func() bool {
			position221, tokenIndex221 := position, tokenIndex
			{
				position222 := position
				{
					position225 := position
					{
						position226, tokenIndex226 := position, tokenIndex
						if !_rules[ruleEXTERNAL]() {
							goto l227
						}
						if !_rules[ruleEQUALS]() {
							goto l227
						}
						{
							position228 := position
							if !_rules[ruleBoolean]() {
								goto l227
							}
							add(rulePegText, position228)
						}
						{
							add(ruleAction19, position)
						}
						goto l226
					l227:
						position, tokenIndex = position226, tokenIndex226
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l221
								}
								if !_rules[ruleEQUALS]() {
									goto l221
								}
								{
									position231 := position
									if !_rules[ruleStringLike]() {
										goto l221
									}
									add(rulePegText, position231)
								}
								{
									add(ruleAction23, position)
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l221
								}
								if !_rules[ruleEQUALS]() {
									goto l221
								}
								{
									position233 := position
									if !_rules[ruleStringLike]() {
										goto l221
									}
									add(rulePegText, position233)
								}
								{
									add(ruleAction22, position)
								}
							case 'n':
								if !_rules[ruleNAME]() {
									goto l221
								}
								if !_rules[ruleEQUALS]() {
									goto l221
								}
								{
									position235 := position
									if !_rules[ruleStringLike]() {
										goto l221
									}
									add(rulePegText, position235)
								}
								{
									add(ruleAction21, position)
								}
							default:
								if !_rules[ruleTYPE]() {
									goto l221
								}
								if !_rules[ruleEQUALS]() {
									goto l221
								}
								{
									position237 := position
									{
										position238 := position
										{
											position239, tokenIndex239 := position, tokenIndex
											{
												position241 := position
												if buffer[position] != rune('d') {
													goto l240
												}
												position++
												if buffer[position] != rune('a') {
													goto l240
												}
												position++
												if buffer[position] != rune('t') {
													goto l240
												}
												position++
												if buffer[position] != rune('a') {
													goto l240
												}
												position++
												if buffer[position] != rune('b') {
													goto l240
												}
												position++
												if buffer[position] != rune('a') {
													goto l240
												}
												position++
												if buffer[position] != rune('s') {
													goto l240
												}
												position++
												if buffer[position] != rune('e') {
													goto l240
												}
												position++
												if !_rules[rule_]() {
													goto l240
												}
												add(ruleDATABASE, position241)
											}
											goto l239
										l240:
											position, tokenIndex = position239, tokenIndex239
											{
												position243 := position
												if buffer[position] != rune('b') {
													goto l242
												}
												position++
												if buffer[position] != rune('l') {
													goto l242
												}
												position++
												if buffer[position] != rune('o') {
													goto l242
												}
												position++
												if buffer[position] != rune('b') {
													goto l242
												}
												position++
												if buffer[position] != rune('s') {
													goto l242
												}
												position++
												if buffer[position] != rune('t') {
													goto l242
												}
												position++
												if buffer[position] != rune('o') {
													goto l242
												}
												position++
												if buffer[position] != rune('r') {
													goto l242
												}
												position++
												if buffer[position] != rune('e') {
													goto l242
												}
												position++
												if !_rules[rule_]() {
													goto l242
												}
												add(ruleBLOBSTORE, position243)
											}
											goto l239
										l242:
											position, tokenIndex = position239, tokenIndex239
											{
												switch buffer[position] {
												case 'c':
													{
														position245 := position
														if buffer[position] != rune('c') {
															goto l221
														}
														position++
														if buffer[position] != rune('o') {
															goto l221
														}
														position++
														if buffer[position] != rune('d') {
															goto l221
														}
														position++
														if buffer[position] != rune('e') {
															goto l221
														}
														position++
														if !_rules[rule_]() {
															goto l221
														}
														add(ruleCODE, position245)
													}
												case 'd':
													{
														position246 := position
														if buffer[position] != rune('d') {
															goto l221
														}
														position++
														if buffer[position] != rune('e') {
															goto l221
														}
														position++
														if buffer[position] != rune('v') {
															goto l221
														}
														position++
														if buffer[position] != rune('i') {
															goto l221
														}
														position++
														if buffer[position] != rune('c') {
															goto l221
														}
														position++
														if buffer[position] != rune('e') {
															goto l221
														}
														position++
														if !_rules[rule_]() {
															goto l221
														}
														add(ruleDEVICE, position246)
													}
												case 's':
													{
														position247 := position
														if buffer[position] != rune('s') {
															goto l221
														}
														position++
														if buffer[position] != rune('e') {
															goto l221
														}
														position++
														if buffer[position] != rune('r') {
															goto l221
														}
														position++
														if buffer[position] != rune('v') {
															goto l221
														}
														position++
														if buffer[position] != rune('e') {
															goto l221
														}
														position++
														if buffer[position] != rune('r') {
															goto l221
														}
														position++
														if !_rules[rule_]() {
															goto l221
														}
														add(ruleSERVER, position247)
													}
												case 'm':
													{
														position248 := position
														if buffer[position] != rune('m') {
															goto l221
														}
														position++
														if buffer[position] != rune('o') {
															goto l221
														}
														position++
														if buffer[position] != rune('b') {
															goto l221
														}
														position++
														if buffer[position] != rune('i') {
															goto l221
														}
														position++
														if buffer[position] != rune('l') {
															goto l221
														}
														position++
														if buffer[position] != rune('e') {
															goto l221
														}
														position++
														if !_rules[rule_]() {
															goto l221
														}
														add(ruleMOBILE, position248)
													}
												case 'b':
													{
														position249 := position
														if buffer[position] != rune('b') {
															goto l221
														}
														position++
														if buffer[position] != rune('r') {
															goto l221
														}
														position++
														if buffer[position] != rune('o') {
															goto l221
														}
														position++
														if buffer[position] != rune('w') {
															goto l221
														}
														position++
														if buffer[position] != rune('s') {
															goto l221
														}
														position++
														if buffer[position] != rune('e') {
															goto l221
														}
														position++
														if buffer[position] != rune('r') {
															goto l221
														}
														position++
														if !_rules[rule_]() {
															goto l221
														}
														add(ruleBROWSER, position249)
													}
												case 'q':
													{
														position250 := position
														if buffer[position] != rune('q') {
															goto l221
														}
														position++
														if buffer[position] != rune('u') {
															goto l221
														}
														position++
														if buffer[position] != rune('e') {
															goto l221
														}
														position++
														if buffer[position] != rune('u') {
															goto l221
														}
														position++
														if buffer[position] != rune('e') {
															goto l221
														}
														position++
														if !_rules[rule_]() {
															goto l221
														}
														add(ruleQUEUE, position250)
													}
												default:
													{
														position251 := position
														if buffer[position] != rune('p') {
															goto l221
														}
														position++
														if buffer[position] != rune('e') {
															goto l221
														}
														position++
														if buffer[position] != rune('r') {
															goto l221
														}
														position++
														if buffer[position] != rune('s') {
															goto l221
														}
														position++
														if buffer[position] != rune('o') {
															goto l221
														}
														position++
														if buffer[position] != rune('n') {
															goto l221
														}
														position++
														if !_rules[rule_]() {
															goto l221
														}
														add(rulePERSON, position251)
													}
												}
											}

										}
									l239:
										add(ruleItemType, position238)
									}
									add(rulePegText, position237)
								}
								{
									add(ruleAction20, position)
								}
							}
						}

					}
				l226:
					add(ruleItemParam, position225)
				}
			l223:
				{
					position224, tokenIndex224 := position, tokenIndex
					{
						position253 := position
						{
							position254, tokenIndex254 := position, tokenIndex
							if !_rules[ruleEXTERNAL]() {
								goto l255
							}
							if !_rules[ruleEQUALS]() {
								goto l255
							}
							{
								position256 := position
								if !_rules[ruleBoolean]() {
									goto l255
								}
								add(rulePegText, position256)
							}
							{
								add(ruleAction19, position)
							}
							goto l254
						l255:
							position, tokenIndex = position254, tokenIndex254
							{
								switch buffer[position] {
								case 'e':
									if !_rules[ruleEXPANDED]() {
										goto l224
									}
									if !_rules[ruleEQUALS]() {
										goto l224
									}
									{
										position259 := position
										if !_rules[ruleStringLike]() {
											goto l224
										}
										add(rulePegText, position259)
									}
									{
										add(ruleAction23, position)
									}
								case 'm':
									if !_rules[ruleMECHANISM]() {
										goto l224
									}
									if !_rules[ruleEQUALS]() {
										goto l224
									}
									{
										position261 := position
										if !_rules[ruleStringLike]() {
											goto l224
										}
										add(rulePegText, position261)
									}
									{
										add(ruleAction22, position)
									}
								case 'n':
									if !_rules[ruleNAME]() {
										goto l224
									}
									if !_rules[ruleEQUALS]() {
										goto l224
									}
									{
										position263 := position
										if !_rules[ruleStringLike]() {
											goto l224
										}
										add(rulePegText, position263)
									}
									{
										add(ruleAction21, position)
									}
								default:
									if !_rules[ruleTYPE]() {
										goto l224
									}
									if !_rules[ruleEQUALS]() {
										goto l224
									}
									{
										position265 := position
										{
											position266 := position
											{
												position267, tokenIndex267 := position, tokenIndex
												{
													position269 := position
													if buffer[position] != rune('d') {
														goto l268
													}
													position++
													if buffer[position] != rune('a') {
														goto l268
													}
													position++
													if buffer[position] != rune('t') {
														goto l268
													}
													position++
													if buffer[position] != rune('a') {
														goto l268
													}
													position++
													if buffer[position] != rune('b') {
														goto l268
													}
													position++
													if buffer[position] != rune('a') {
														goto l268
													}
													position++
													if buffer[position] != rune('s') {
														goto l268
													}
													position++
													if buffer[position] != rune('e') {
														goto l268
													}
													position++
													if !_rules[rule_]() {
														goto l268
													}
													add(ruleDATABASE, position269)
												}
												goto l267
											l268:
												position, tokenIndex = position267, tokenIndex267
												{
													position271 := position
													if buffer[position] != rune('b') {
														goto l270
													}
													position++
													if buffer[position] != rune('l') {
														goto l270
													}
													position++
													if buffer[position] != rune('o') {
														goto l270
													}
													position++
													if buffer[position] != rune('b') {
														goto l270
													}
													position++
													if buffer[position] != rune('s') {
														goto l270
													}
													position++
													if buffer[position] != rune('t') {
														goto l270
													}
													position++
													if buffer[position] != rune('o') {
														goto l270
													}
													position++
													if buffer[position] != rune('r') {
														goto l270
													}
													position++
													if buffer[position] != rune('e') {
														goto l270
													}
													position++
													if !_rules[rule_]() {
														goto l270
													}
													add(ruleBLOBSTORE, position271)
												}
												goto l267
											l270:
												position, tokenIndex = position267, tokenIndex267
												{
													switch buffer[position] {
													case 'c':
														{
															position273 := position
															if buffer[position] != rune('c') {
																goto l224
															}
															position++
															if buffer[position] != rune('o') {
																goto l224
															}
															position++
															if buffer[position] != rune('d') {
																goto l224
															}
															position++
															if buffer[position] != rune('e') {
																goto l224
															}
															position++
															if !_rules[rule_]() {
																goto l224
															}
															add(ruleCODE, position273)
														}
													case 'd':
														{
															position274 := position
															if buffer[position] != rune('d') {
																goto l224
															}
															position++
															if buffer[position] != rune('e') {
																goto l224
															}
															position++
															if buffer[position] != rune('v') {
																goto l224
															}
															position++
															if buffer[position] != rune('i') {
																goto l224
															}
															position++
															if buffer[position] != rune('c') {
																goto l224
															}
															position++
															if buffer[position] != rune('e') {
																goto l224
															}
															position++
															if !_rules[rule_]() {
																goto l224
															}
															add(ruleDEVICE, position274)
														}
													case 's':
														{
															position275 := position
															if buffer[position] != rune('s') {
																goto l224
															}
															position++
															if buffer[position] != rune('e') {
																goto l224
															}
															position++
															if buffer[position] != rune('r') {
																goto l224
															}
															position++
															if buffer[position] != rune('v') {
																goto l224
															}
															position++
															if buffer[position] != rune('e') {
																goto l224
															}
															position++
															if buffer[position] != rune('r') {
																goto l224
															}
															position++
															if !_rules[rule_]() {
																goto l224
															}
															add(ruleSERVER, position275)
														}
													case 'm':
														{
															position276 := position
															if buffer[position] != rune('m') {
																goto l224
															}
															position++
															if buffer[position] != rune('o') {
																goto l224
															}
															position++
															if buffer[position] != rune('b') {
																goto l224
															}
															position++
															if buffer[position] != rune('i') {
																goto l224
															}
															position++
															if buffer[position] != rune('l') {
																goto l224
															}
															position++
															if buffer[position] != rune('e') {
																goto l224
															}
															position++
															if !_rules[rule_]() {
																goto l224
															}
															add(ruleMOBILE, position276)
														}
													case 'b':
														{
															position277 := position
															if buffer[position] != rune('b') {
																goto l224
															}
															position++
															if buffer[position] != rune('r') {
																goto l224
															}
															position++
															if buffer[position] != rune('o') {
																goto l224
															}
															position++
															if buffer[position] != rune('w') {
																goto l224
															}
															position++
															if buffer[position] != rune('s') {
																goto l224
															}
															position++
															if buffer[position] != rune('e') {
																goto l224
															}
															position++
															if buffer[position] != rune('r') {
																goto l224
															}
															position++
															if !_rules[rule_]() {
																goto l224
															}
															add(ruleBROWSER, position277)
														}
													case 'q':
														{
															position278 := position
															if buffer[position] != rune('q') {
																goto l224
															}
															position++
															if buffer[position] != rune('u') {
																goto l224
															}
															position++
															if buffer[position] != rune('e') {
																goto l224
															}
															position++
															if buffer[position] != rune('u') {
																goto l224
															}
															position++
															if buffer[position] != rune('e') {
																goto l224
															}
															position++
															if !_rules[rule_]() {
																goto l224
															}
															add(ruleQUEUE, position278)
														}
													default:
														{
															position279 := position
															if buffer[position] != rune('p') {
																goto l224
															}
															position++
															if buffer[position] != rune('e') {
																goto l224
															}
															position++
															if buffer[position] != rune('r') {
																goto l224
															}
															position++
															if buffer[position] != rune('s') {
																goto l224
															}
															position++
															if buffer[position] != rune('o') {
																goto l224
															}
															position++
															if buffer[position] != rune('n') {
																goto l224
															}
															position++
															if !_rules[rule_]() {
																goto l224
															}
															add(rulePERSON, position279)
														}
													}
												}

											}
										l267:
											add(ruleItemType, position266)
										}
										add(rulePegText, position265)
									}
									{
										add(ruleAction20, position)
									}
								}
							}

						}
					l254:
						add(ruleItemParam, position253)
					}
					goto l223
				l224:
					position, tokenIndex = position224, tokenIndex224
				}
				add(ruleItemParams, position222)
			}
			return true
		l221:
			position, tokenIndex = position221, tokenIndex221
			return false
		},
		/* 27 RelParams <- <RelParam+> */
		func() bool {
			position281, tokenIndex281 := position, tokenIndex
			{
				position282 := position
				{
					position285 := position
					{
						switch buffer[position] {
						case 'e':
							if !_rules[ruleEXPANDED]() {
								goto l281
							}
							if !_rules[ruleEQUALS]() {
								goto l281
							}
							{
								position287 := position
								if !_rules[ruleStringLike]() {
									goto l281
								}
								add(rulePegText, position287)
							}
							{
								add(ruleAction27, position)
							}
						case 'a':
							if !_rules[ruleASYNC]() {
								goto l281
							}
							if !_rules[ruleEQUALS]() {
								goto l281
							}
							{
								position289 := position
								if !_rules[ruleBoolean]() {
									goto l281
								}
								add(rulePegText, position289)
							}
							{
								add(ruleAction26, position)
							}
						case 'm':
							if !_rules[ruleMECHANISM]() {
								goto l281
							}
							if !_rules[ruleEQUALS]() {
								goto l281
							}
							{
								position291 := position
								if !_rules[ruleStringLike]() {
									goto l281
								}
								add(rulePegText, position291)
							}
							{
								add(ruleAction25, position)
							}
						default:
							if !_rules[ruleVERB]() {
								goto l281
							}
							if !_rules[ruleEQUALS]() {
								goto l281
							}
							{
								position293 := position
								if !_rules[ruleStringLike]() {
									goto l281
								}
								add(rulePegText, position293)
							}
							{
								add(ruleAction24, position)
							}
						}
					}

					add(ruleRelParam, position285)
				}
			l283:
				{
					position284, tokenIndex284 := position, tokenIndex
					{
						position295 := position
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l284
								}
								if !_rules[ruleEQUALS]() {
									goto l284
								}
								{
									position297 := position
									if !_rules[ruleStringLike]() {
										goto l284
									}
									add(rulePegText, position297)
								}
								{
									add(ruleAction27, position)
								}
							case 'a':
								if !_rules[ruleASYNC]() {
									goto l284
								}
								if !_rules[ruleEQUALS]() {
									goto l284
								}
								{
									position299 := position
									if !_rules[ruleBoolean]() {
										goto l284
									}
									add(rulePegText, position299)
								}
								{
									add(ruleAction26, position)
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l284
								}
								if !_rules[ruleEQUALS]() {
									goto l284
								}
								{
									position301 := position
									if !_rules[ruleStringLike]() {
										goto l284
									}
									add(rulePegText, position301)
								}
								{
									add(ruleAction25, position)
								}
							default:
								if !_rules[ruleVERB]() {
									goto l284
								}
								if !_rules[ruleEQUALS]() {
									goto l284
								}
								{
									position303 := position
									if !_rules[ruleStringLike]() {
										goto l284
									}
									add(rulePegText, position303)
								}
								{
									add(ruleAction24, position)
								}
							}
						}

						add(ruleRelParam, position295)
					}
					goto l283
				l284:
					position, tokenIndex = position284, tokenIndex284
				}
				add(ruleRelParams, position282)
			}
			return true
		l281:
			position, tokenIndex = position281, tokenIndex281
			return false
		},
		/* 28 ItemParam <- <((EXTERNAL EQUALS <Boolean> Action19) / ((&('e') (EXPANDED EQUALS <StringLike> Action23)) | (&('m') (MECHANISM EQUALS <StringLike> Action22)) | (&('n') (NAME EQUALS <StringLike> Action21)) | (&('t') (TYPE EQUALS <ItemType> Action20))))> */
		nil,
		/* 29 RelParam <- <((&('e') (EXPANDED EQUALS <StringLike> Action27)) | (&('a') (ASYNC EQUALS <Boolean> Action26)) | (&('m') (MECHANISM EQUALS <StringLike> Action25)) | (&('v') (VERB EQUALS <StringLike> Action24)))> */
		nil,
		/* 30 ItemKeys <- <ItemKey+> */
		nil,
		/* 31 RelKeys <- <RelKey+> */
		nil,
		/* 32 ItemKey <- <(<(EXTERNAL / ((&('e') EXPANDED) | (&('m') MECHANISM) | (&('t') TYPE) | (&('n') NAME)))> _ Action28)> */
		nil,
		/* 33 RelKey <- <(<((&('e') EXPANDED) | (&('a') ASYNC) | (&('m') MECHANISM) | (&('v') VERB))> _ Action29)> */
		nil,
		/* 34 StringLike <- <(<(Text / QuotedText)> _ Action30)> */
		func() bool {
			position311, tokenIndex311 := position, tokenIndex
			{
				position312 := position
				{
					position313 := position
					{
						position314, tokenIndex314 := position, tokenIndex
						{
							position316 := position
							{
								switch buffer[position] {
								case '_':
									if buffer[position] != rune('_') {
										goto l315
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l315
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l315
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l315
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l315
									}
									position++
								}
							}

						l317:
							{
								position318, tokenIndex318 := position, tokenIndex
								{
									switch buffer[position] {
									case '_':
										if buffer[position] != rune('_') {
											goto l318
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l318
										}
										position++
									case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l318
										}
										position++
									case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
										if c := buffer[position]; c < rune('A') || c > rune('Z') {
											goto l318
										}
										position++
									default:
										if c := buffer[position]; c < rune('a') || c > rune('z') {
											goto l318
										}
										position++
									}
								}

								goto l317
							l318:
								position, tokenIndex = position318, tokenIndex318
							}
							add(ruleText, position316)
						}
						goto l314
					l315:
						position, tokenIndex = position314, tokenIndex314
						{
							position321 := position
							if !_rules[ruleQUOTE]() {
								goto l311
							}
						l322:
							{
								position323, tokenIndex323 := position, tokenIndex
								{
									switch buffer[position] {
									case ' ':
										if buffer[position] != rune(' ') {
											goto l323
										}
										position++
									case ':':
										if buffer[position] != rune(':') {
											goto l323
										}
										position++
									case ';':
										if buffer[position] != rune(';') {
											goto l323
										}
										position++
									case '~':
										if buffer[position] != rune('~') {
											goto l323
										}
										position++
									case '=':
										if buffer[position] != rune('=') {
											goto l323
										}
										position++
									case '+':
										if buffer[position] != rune('+') {
											goto l323
										}
										position++
									case ']':
										if buffer[position] != rune(']') {
											goto l323
										}
										position++
									case '[':
										if buffer[position] != rune('[') {
											goto l323
										}
										position++
									case ')':
										if buffer[position] != rune(')') {
											goto l323
										}
										position++
									case '(':
										if buffer[position] != rune('(') {
											goto l323
										}
										position++
									case '*':
										if buffer[position] != rune('*') {
											goto l323
										}
										position++
									case '&':
										if buffer[position] != rune('&') {
											goto l323
										}
										position++
									case '^':
										if buffer[position] != rune('^') {
											goto l323
										}
										position++
									case '%':
										if buffer[position] != rune('%') {
											goto l323
										}
										position++
									case '$':
										if buffer[position] != rune('$') {
											goto l323
										}
										position++
									case '#':
										if buffer[position] != rune('#') {
											goto l323
										}
										position++
									case '@':
										if buffer[position] != rune('@') {
											goto l323
										}
										position++
									case '!':
										if buffer[position] != rune('!') {
											goto l323
										}
										position++
									case ',':
										if buffer[position] != rune(',') {
											goto l323
										}
										position++
									case '.':
										if buffer[position] != rune('.') {
											goto l323
										}
										position++
									case '_':
										if buffer[position] != rune('_') {
											goto l323
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l323
										}
										position++
									case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l323
										}
										position++
									case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
										if c := buffer[position]; c < rune('A') || c > rune('Z') {
											goto l323
										}
										position++
									default:
										if c := buffer[position]; c < rune('a') || c > rune('z') {
											goto l323
										}
										position++
									}
								}

								goto l322
							l323:
								position, tokenIndex = position323, tokenIndex323
							}
							if !_rules[ruleQUOTE]() {
								goto l311
							}
							add(ruleQuotedText, position321)
						}
					}
				l314:
					add(rulePegText, position313)
				}
				if !_rules[rule_]() {
					goto l311
				}
				{
					add(ruleAction30, position)
				}
				add(ruleStringLike, position312)
			}
			return true
		l311:
			position, tokenIndex = position311, tokenIndex311
			return false
		},
		/* 35 Number <- <(<[0-9]+> _ Action31)> */
		func() bool {
			position326, tokenIndex326 := position, tokenIndex
			{
				position327 := position
				{
					position328 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l326
					}
					position++
				l329:
					{
						position330, tokenIndex330 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l330
						}
						position++
						goto l329
					l330:
						position, tokenIndex = position330, tokenIndex330
					}
					add(rulePegText, position328)
				}
				if !_rules[rule_]() {
					goto l326
				}
				{
					add(ruleAction31, position)
				}
				add(ruleNumber, position327)
			}
			return true
		l326:
			position, tokenIndex = position326, tokenIndex326
			return false
		},
		/* 36 Boolean <- <(<(TRUE / FALSE)> Action32)> */
		func() bool {
			position332, tokenIndex332 := position, tokenIndex
			{
				position333 := position
				{
					position334 := position
					{
						position335, tokenIndex335 := position, tokenIndex
						{
							position337 := position
							if buffer[position] != rune('t') {
								goto l336
							}
							position++
							if buffer[position] != rune('r') {
								goto l336
							}
							position++
							if buffer[position] != rune('u') {
								goto l336
							}
							position++
							if buffer[position] != rune('e') {
								goto l336
							}
							position++
							if !_rules[rule_]() {
								goto l336
							}
							add(ruleTRUE, position337)
						}
						goto l335
					l336:
						position, tokenIndex = position335, tokenIndex335
						{
							position338 := position
							if buffer[position] != rune('f') {
								goto l332
							}
							position++
							if buffer[position] != rune('a') {
								goto l332
							}
							position++
							if buffer[position] != rune('l') {
								goto l332
							}
							position++
							if buffer[position] != rune('s') {
								goto l332
							}
							position++
							if buffer[position] != rune('e') {
								goto l332
							}
							position++
							if !_rules[rule_]() {
								goto l332
							}
							add(ruleFALSE, position338)
						}
					}
				l335:
					add(rulePegText, position334)
				}
				{
					add(ruleAction32, position)
				}
				add(ruleBoolean, position333)
			}
			return true
		l332:
			position, tokenIndex = position332, tokenIndex332
			return false
		},
		/* 37 Text <- <((&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))+> */
		nil,
		/* 38 QuotedText <- <(QUOTE ((&(' ') ' ') | (&(':') ':') | (&(';') ';') | (&('~') '~') | (&('=') '=') | (&('+') '+') | (&(']') ']') | (&('[') '[') | (&(')') ')') | (&('(') '(') | (&('*') '*') | (&('&') '&') | (&('^') '^') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('@') '@') | (&('!') '!') | (&(',') ',') | (&('.') '.') | (&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))* QUOTE)> */
		nil,
		/* 39 ItemExists <- <((ITEM_EXISTS / (Item Exists)) Action33)> */
		nil,
		/* 40 RelExists <- <((REL_EXISTS / (Rel Exists)) Action34)> */
		nil,
		/* 41 World <- <(WORLD Action35)> */
		nil,
		/* 42 Item <- <(ITEM Action36)> */
		func() bool {
			position345, tokenIndex345 := position, tokenIndex
			{
				position346 := position
				if !_rules[ruleITEM]() {
					goto l345
				}
				{
					add(ruleAction36, position)
				}
				add(ruleItem, position346)
			}
			return true
		l345:
			position, tokenIndex = position345, tokenIndex345
			return false
		},
		/* 43 Rel <- <(REL Action37)> */
		func() bool {
			position348, tokenIndex348 := position, tokenIndex
			{
				position349 := position
				if !_rules[ruleREL]() {
					goto l348
				}
				{
					add(ruleAction37, position)
				}
				add(ruleRel, position349)
			}
			return true
		l348:
			position, tokenIndex = position348, tokenIndex348
			return false
		},
		/* 44 Create <- <(CREATE Action38)> */
		func() bool {
			position351, tokenIndex351 := position, tokenIndex
			{
				position352 := position
				if !_rules[ruleCREATE]() {
					goto l351
				}
				{
					add(ruleAction38, position)
				}
				add(ruleCreate, position352)
			}
			return true
		l351:
			position, tokenIndex = position351, tokenIndex351
			return false
		},
		/* 45 Fetch <- <(FETCH Action39)> */
		func() bool {
			position354, tokenIndex354 := position, tokenIndex
			{
				position355 := position
				if !_rules[ruleFETCH]() {
					goto l354
				}
				{
					add(ruleAction39, position)
				}
				add(ruleFetch, position355)
			}
			return true
		l354:
			position, tokenIndex = position354, tokenIndex354
			return false
		},
		/* 46 Set <- <(SET Action40)> */
		func() bool {
			position357, tokenIndex357 := position, tokenIndex
			{
				position358 := position
				if !_rules[ruleSET]() {
					goto l357
				}
				{
					add(ruleAction40, position)
				}
				add(ruleSet, position358)
			}
			return true
		l357:
			position, tokenIndex = position357, tokenIndex357
			return false
		},
		/* 47 Clear <- <(CLEAR Action41)> */
		func() bool {
			position360, tokenIndex360 := position, tokenIndex
			{
				position361 := position
				if !_rules[ruleCLEAR]() {
					goto l360
				}
				{
					add(ruleAction41, position)
				}
				add(ruleClear, position361)
			}
			return true
		l360:
			position, tokenIndex = position360, tokenIndex360
			return false
		},
		/* 48 Delete <- <(DELETE Action42)> */
		func() bool {
			position363, tokenIndex363 := position, tokenIndex
			{
				position364 := position
				if !_rules[ruleDELETE]() {
					goto l363
				}
				{
					add(ruleAction42, position)
				}
				add(ruleDelete, position364)
			}
			return true
		l363:
			position, tokenIndex = position363, tokenIndex363
			return false
		},
		/* 49 List <- <(LIST Action43)> */
		nil,
		/* 50 Nest <- <(NEST Action44)> */
		nil,
		/* 51 Free <- <(FREE Action45)> */
		nil,
		/* 52 Exists <- <(EXISTS Action46)> */
		func() bool {
			position369, tokenIndex369 := position, tokenIndex
			{
				position370 := position
				if !_rules[ruleEXISTS]() {
					goto l369
				}
				{
					add(ruleAction46, position)
				}
				add(ruleExists, position370)
			}
			return true
		l369:
			position, tokenIndex = position369, tokenIndex369
			return false
		},
		/* 53 InQuery <- <(IN_QUERY Action47)> */
		nil,
		/* 54 FromQuery <- <(FROM_QUERY Action48)> */
		nil,
		/* 55 ToQuery <- <(TO_QUERY Action49)> */
		nil,
		/* 56 Flag <- <(StrictFlag / VerboseFlag / IdsFlag)> */
		nil,
		/* 57 StrictFlag <- <(FLAG STRICT Action50)> */
		nil,
		/* 58 VerboseFlag <- <(FLAG VERBOSE Action51)> */
		nil,
		/* 59 IdsFlag <- <(FLAG IDS Action52)> */
		nil,
		/* 60 BeginWorld <- <(_ DELIMITER WORLD _)> */
		nil,
		/* 61 EndWorld <- <(_ ENDWORLD DELIMITER _)> */
		nil,
		/* 62 ItemType <- <(DATABASE / BLOBSTORE / ((&('c') CODE) | (&('d') DEVICE) | (&('s') SERVER) | (&('m') MOBILE) | (&('b') BROWSER) | (&('q') QUEUE) | (&('p') PERSON)))> */
		nil,
		/* 63 Keyword <- <(ENDWORLD / ERROR / ITEM / ITEM_EXISTS / REL / FROM_QUERY / IN / CREATE / FETCH / ((&('$') DELIMITER) | (&('-') FLAG) | (&('n') NEST) | (&('f') FREE) | (&('e') EXISTS) | (&('l') LIST) | (&('c') CLEAR) | (&('s') SET) | (&('d') DELETE) | (&('i') IN_QUERY) | (&('t') TO_QUERY) | (&('r') REL_EXISTS) | (&('o') OK) | (&('w') WORLD)))> */
		func() bool {
			position382, tokenIndex382 := position, tokenIndex
			{
				position383 := position
				{
					position384, tokenIndex384 := position, tokenIndex
					if !_rules[ruleENDWORLD]() {
						goto l385
					}
					goto l384
				l385:
					position, tokenIndex = position384, tokenIndex384
					if !_rules[ruleERROR]() {
						goto l386
					}
					goto l384
				l386:
					position, tokenIndex = position384, tokenIndex384
					if !_rules[ruleITEM]() {
						goto l387
					}
					goto l384
				l387:
					position, tokenIndex = position384, tokenIndex384
					if !_rules[ruleITEM_EXISTS]() {
						goto l388
					}
					goto l384
				l388:
					position, tokenIndex = position384, tokenIndex384
					if !_rules[ruleREL]() {
						goto l389
					}
					goto l384
				l389:
					position, tokenIndex = position384, tokenIndex384
					if !_rules[ruleFROM_QUERY]() {
						goto l390
					}
					goto l384
				l390:
					position, tokenIndex = position384, tokenIndex384
					if !_rules[ruleIN]() {
						goto l391
					}
					goto l384
				l391:
					position, tokenIndex = position384, tokenIndex384
					if !_rules[ruleCREATE]() {
						goto l392
					}
					goto l384
				l392:
					position, tokenIndex = position384, tokenIndex384
					if !_rules[ruleFETCH]() {
						goto l393
					}
					goto l384
				l393:
					position, tokenIndex = position384, tokenIndex384
					{
						switch buffer[position] {
						case '$':
							if !_rules[ruleDELIMITER]() {
								goto l382
							}
						case '-':
							if !_rules[ruleFLAG]() {
								goto l382
							}
						case 'n':
							if !_rules[ruleNEST]() {
								goto l382
							}
						case 'f':
							if !_rules[ruleFREE]() {
								goto l382
							}
						case 'e':
							if !_rules[ruleEXISTS]() {
								goto l382
							}
						case 'l':
							if !_rules[ruleLIST]() {
								goto l382
							}
						case 'c':
							if !_rules[ruleCLEAR]() {
								goto l382
							}
						case 's':
							if !_rules[ruleSET]() {
								goto l382
							}
						case 'd':
							if !_rules[ruleDELETE]() {
								goto l382
							}
						case 'i':
							if !_rules[ruleIN_QUERY]() {
								goto l382
							}
						case 't':
							if !_rules[ruleTO_QUERY]() {
								goto l382
							}
						case 'r':
							if !_rules[ruleREL_EXISTS]() {
								goto l382
							}
						case 'o':
							if !_rules[ruleOK]() {
								goto l382
							}
						default:
							if !_rules[ruleWORLD]() {
								goto l382
							}
						}
					}

				}
			l384:
				add(ruleKeyword, position383)
			}
			return true
		l382:
			position, tokenIndex = position382, tokenIndex382
			return false
		},
		/* 64 WORLD <- <('w' 'o' 'r' 'l' 'd' _)> */
		func() bool {
			position395, tokenIndex395 := position, tokenIndex
			{
				position396 := position
				if buffer[position] != rune('w') {
					goto l395
				}
				position++
				if buffer[position] != rune('o') {
					goto l395
				}
				position++
				if buffer[position] != rune('r') {
					goto l395
				}
				position++
				if buffer[position] != rune('l') {
					goto l395
				}
				position++
				if buffer[position] != rune('d') {
					goto l395
				}
				position++
				if !_rules[rule_]() {
					goto l395
				}
				add(ruleWORLD, position396)
			}
			return true
		l395:
			position, tokenIndex = position395, tokenIndex395
			return false
		},
		/* 65 ENDWORLD <- <('e' 'n' 'd' 'w' 'o' 'r' 'l' 'd' _)> */
		func() bool {
			position397, tokenIndex397 := position, tokenIndex
			{
				position398 := position
				if buffer[position] != rune('e') {
					goto l397
				}
				position++
				if buffer[position] != rune('n') {
					goto l397
				}
				position++
				if buffer[position] != rune('d') {
					goto l397
				}
				position++
				if buffer[position] != rune('w') {
					goto l397
				}
				position++
				if buffer[position] != rune('o') {
					goto l397
				}
				position++
				if buffer[position] != rune('r') {
					goto l397
				}
				position++
				if buffer[position] != rune('l') {
					goto l397
				}
				position++
				if buffer[position] != rune('d') {
					goto l397
				}
				position++
				if !_rules[rule_]() {
					goto l397
				}
				add(ruleENDWORLD, position398)
			}
			return true
		l397:
			position, tokenIndex = position397, tokenIndex397
			return false
		},
		/* 66 ERROR <- <('e' 'r' 'r' 'o' 'r' _)> */
		func() bool {
			position399, tokenIndex399 := position, tokenIndex
			{
				position400 := position
				if buffer[position] != rune('e') {
					goto l399
				}
				position++
				if buffer[position] != rune('r') {
					goto l399
				}
				position++
				if buffer[position] != rune('r') {
					goto l399
				}
				position++
				if buffer[position] != rune('o') {
					goto l399
				}
				position++
				if buffer[position] != rune('r') {
					goto l399
				}
				position++
				if !_rules[rule_]() {
					goto l399
				}
				add(ruleERROR, position400)
			}
			return true
		l399:
			position, tokenIndex = position399, tokenIndex399
			return false
		},
		/* 67 OK <- <('o' 'k' _)> */
		func() bool {
			position401, tokenIndex401 := position, tokenIndex
			{
				position402 := position
				if buffer[position] != rune('o') {
					goto l401
				}
				position++
				if buffer[position] != rune('k') {
					goto l401
				}
				position++
				if !_rules[rule_]() {
					goto l401
				}
				add(ruleOK, position402)
			}
			return true
		l401:
			position, tokenIndex = position401, tokenIndex401
			return false
		},
		/* 68 ITEM <- <('i' 't' 'e' 'm' 's'? _)> */
		func() bool {
			position403, tokenIndex403 := position, tokenIndex
			{
				position404 := position
				if buffer[position] != rune('i') {
					goto l403
				}
				position++
				if buffer[position] != rune('t') {
					goto l403
				}
				position++
				if buffer[position] != rune('e') {
					goto l403
				}
				position++
				if buffer[position] != rune('m') {
					goto l403
				}
				position++
				{
					position405, tokenIndex405 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l405
					}
					position++
					goto l406
				l405:
					position, tokenIndex = position405, tokenIndex405
				}
			l406:
				if !_rules[rule_]() {
					goto l403
				}
				add(ruleITEM, position404)
			}
			return true
		l403:
			position, tokenIndex = position403, tokenIndex403
			return false
		},
		/* 69 ITEM_EXISTS <- <('i' 't' 'e' 'm' '?' _)> */
		func() bool {
			position407, tokenIndex407 := position, tokenIndex
			{
				position408 := position
				if buffer[position] != rune('i') {
					goto l407
				}
				position++
				if buffer[position] != rune('t') {
					goto l407
				}
				position++
				if buffer[position] != rune('e') {
					goto l407
				}
				position++
				if buffer[position] != rune('m') {
					goto l407
				}
				position++
				if buffer[position] != rune('?') {
					goto l407
				}
				position++
				if !_rules[rule_]() {
					goto l407
				}
				add(ruleITEM_EXISTS, position408)
			}
			return true
		l407:
			position, tokenIndex = position407, tokenIndex407
			return false
		},
		/* 70 REL <- <('r' 'e' 'l' 's'? _)> */
		func() bool {
			position409, tokenIndex409 := position, tokenIndex
			{
				position410 := position
				if buffer[position] != rune('r') {
					goto l409
				}
				position++
				if buffer[position] != rune('e') {
					goto l409
				}
				position++
				if buffer[position] != rune('l') {
					goto l409
				}
				position++
				{
					position411, tokenIndex411 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l411
					}
					position++
					goto l412
				l411:
					position, tokenIndex = position411, tokenIndex411
				}
			l412:
				if !_rules[rule_]() {
					goto l409
				}
				add(ruleREL, position410)
			}
			return true
		l409:
			position, tokenIndex = position409, tokenIndex409
			return false
		},
		/* 71 REL_EXISTS <- <('r' 'e' 'l' '?' _)> */
		func() bool {
			position413, tokenIndex413 := position, tokenIndex
			{
				position414 := position
				if buffer[position] != rune('r') {
					goto l413
				}
				position++
				if buffer[position] != rune('e') {
					goto l413
				}
				position++
				if buffer[position] != rune('l') {
					goto l413
				}
				position++
				if buffer[position] != rune('?') {
					goto l413
				}
				position++
				if !_rules[rule_]() {
					goto l413
				}
				add(ruleREL_EXISTS, position414)
			}
			return true
		l413:
			position, tokenIndex = position413, tokenIndex413
			return false
		},
		/* 72 FROM_QUERY <- <('f' 'r' 'o' 'm' '?' _)> */
		func() bool {
			position415, tokenIndex415 := position, tokenIndex
			{
				position416 := position
				if buffer[position] != rune('f') {
					goto l415
				}
				position++
				if buffer[position] != rune('r') {
					goto l415
				}
				position++
				if buffer[position] != rune('o') {
					goto l415
				}
				position++
				if buffer[position] != rune('m') {
					goto l415
				}
				position++
				if buffer[position] != rune('?') {
					goto l415
				}
				position++
				if !_rules[rule_]() {
					goto l415
				}
				add(ruleFROM_QUERY, position416)
			}
			return true
		l415:
			position, tokenIndex = position415, tokenIndex415
			return false
		},
		/* 73 TO_QUERY <- <('t' 'o' '?' _)> */
		func() bool {
			position417, tokenIndex417 := position, tokenIndex
			{
				position418 := position
				if buffer[position] != rune('t') {
					goto l417
				}
				position++
				if buffer[position] != rune('o') {
					goto l417
				}
				position++
				if buffer[position] != rune('?') {
					goto l417
				}
				position++
				if !_rules[rule_]() {
					goto l417
				}
				add(ruleTO_QUERY, position418)
			}
			return true
		l417:
			position, tokenIndex = position417, tokenIndex417
			return false
		},
		/* 74 IN <- <('i' 'n' _)> */
		func() bool {
			position419, tokenIndex419 := position, tokenIndex
			{
				position420 := position
				if buffer[position] != rune('i') {
					goto l419
				}
				position++
				if buffer[position] != rune('n') {
					goto l419
				}
				position++
				if !_rules[rule_]() {
					goto l419
				}
				add(ruleIN, position420)
			}
			return true
		l419:
			position, tokenIndex = position419, tokenIndex419
			return false
		},
		/* 75 IN_QUERY <- <('i' 'n' '?' _)> */
		func() bool {
			position421, tokenIndex421 := position, tokenIndex
			{
				position422 := position
				if buffer[position] != rune('i') {
					goto l421
				}
				position++
				if buffer[position] != rune('n') {
					goto l421
				}
				position++
				if buffer[position] != rune('?') {
					goto l421
				}
				position++
				if !_rules[rule_]() {
					goto l421
				}
				add(ruleIN_QUERY, position422)
			}
			return true
		l421:
			position, tokenIndex = position421, tokenIndex421
			return false
		},
		/* 76 CREATE <- <('c' 'r' 'e' 'a' 't' 'e' _)> */
		func() bool {
			position423, tokenIndex423 := position, tokenIndex
			{
				position424 := position
				if buffer[position] != rune('c') {
					goto l423
				}
				position++
				if buffer[position] != rune('r') {
					goto l423
				}
				position++
				if buffer[position] != rune('e') {
					goto l423
				}
				position++
				if buffer[position] != rune('a') {
					goto l423
				}
				position++
				if buffer[position] != rune('t') {
					goto l423
				}
				position++
				if buffer[position] != rune('e') {
					goto l423
				}
				position++
				if !_rules[rule_]() {
					goto l423
				}
				add(ruleCREATE, position424)
			}
			return true
		l423:
			position, tokenIndex = position423, tokenIndex423
			return false
		},
		/* 77 DELETE <- <('d' 'e' 'l' 'e' 't' 'e' _)> */
		func() bool {
			position425, tokenIndex425 := position, tokenIndex
			{
				position426 := position
				if buffer[position] != rune('d') {
					goto l425
				}
				position++
				if buffer[position] != rune('e') {
					goto l425
				}
				position++
				if buffer[position] != rune('l') {
					goto l425
				}
				position++
				if buffer[position] != rune('e') {
					goto l425
				}
				position++
				if buffer[position] != rune('t') {
					goto l425
				}
				position++
				if buffer[position] != rune('e') {
					goto l425
				}
				position++
				if !_rules[rule_]() {
					goto l425
				}
				add(ruleDELETE, position426)
			}
			return true
		l425:
			position, tokenIndex = position425, tokenIndex425
			return false
		},
		/* 78 SET <- <('s' 'e' 't' _)> */
		func() bool {
			position427, tokenIndex427 := position, tokenIndex
			{
				position428 := position
				if buffer[position] != rune('s') {
					goto l427
				}
				position++
				if buffer[position] != rune('e') {
					goto l427
				}
				position++
				if buffer[position] != rune('t') {
					goto l427
				}
				position++
				if !_rules[rule_]() {
					goto l427
				}
				add(ruleSET, position428)
			}
			return true
		l427:
			position, tokenIndex = position427, tokenIndex427
			return false
		},
		/* 79 CLEAR <- <('c' 'l' 'e' 'a' 'r' _)> */
		func() bool {
			position429, tokenIndex429 := position, tokenIndex
			{
				position430 := position
				if buffer[position] != rune('c') {
					goto l429
				}
				position++
				if buffer[position] != rune('l') {
					goto l429
				}
				position++
				if buffer[position] != rune('e') {
					goto l429
				}
				position++
				if buffer[position] != rune('a') {
					goto l429
				}
				position++
				if buffer[position] != rune('r') {
					goto l429
				}
				position++
				if !_rules[rule_]() {
					goto l429
				}
				add(ruleCLEAR, position430)
			}
			return true
		l429:
			position, tokenIndex = position429, tokenIndex429
			return false
		},
		/* 80 FETCH <- <('f' 'e' 't' 'c' 'h' _)> */
		func() bool {
			position431, tokenIndex431 := position, tokenIndex
			{
				position432 := position
				if buffer[position] != rune('f') {
					goto l431
				}
				position++
				if buffer[position] != rune('e') {
					goto l431
				}
				position++
				if buffer[position] != rune('t') {
					goto l431
				}
				position++
				if buffer[position] != rune('c') {
					goto l431
				}
				position++
				if buffer[position] != rune('h') {
					goto l431
				}
				position++
				if !_rules[rule_]() {
					goto l431
				}
				add(ruleFETCH, position432)
			}
			return true
		l431:
			position, tokenIndex = position431, tokenIndex431
			return false
		},
		/* 81 LIST <- <('l' 'i' 's' 't' _)> */
		func() bool {
			position433, tokenIndex433 := position, tokenIndex
			{
				position434 := position
				if buffer[position] != rune('l') {
					goto l433
				}
				position++
				if buffer[position] != rune('i') {
					goto l433
				}
				position++
				if buffer[position] != rune('s') {
					goto l433
				}
				position++
				if buffer[position] != rune('t') {
					goto l433
				}
				position++
				if !_rules[rule_]() {
					goto l433
				}
				add(ruleLIST, position434)
			}
			return true
		l433:
			position, tokenIndex = position433, tokenIndex433
			return false
		},
		/* 82 EXISTS <- <('e' 'x' 'i' 's' 't' 's' _)> */
		func() bool {
			position435, tokenIndex435 := position, tokenIndex
			{
				position436 := position
				if buffer[position] != rune('e') {
					goto l435
				}
				position++
				if buffer[position] != rune('x') {
					goto l435
				}
				position++
				if buffer[position] != rune('i') {
					goto l435
				}
				position++
				if buffer[position] != rune('s') {
					goto l435
				}
				position++
				if buffer[position] != rune('t') {
					goto l435
				}
				position++
				if buffer[position] != rune('s') {
					goto l435
				}
				position++
				if !_rules[rule_]() {
					goto l435
				}
				add(ruleEXISTS, position436)
			}
			return true
		l435:
			position, tokenIndex = position435, tokenIndex435
			return false
		},
		/* 83 FREE <- <('f' 'r' 'e' 'e' _)> */
		func() bool {
			position437, tokenIndex437 := position, tokenIndex
			{
				position438 := position
				if buffer[position] != rune('f') {
					goto l437
				}
				position++
				if buffer[position] != rune('r') {
					goto l437
				}
				position++
				if buffer[position] != rune('e') {
					goto l437
				}
				position++
				if buffer[position] != rune('e') {
					goto l437
				}
				position++
				if !_rules[rule_]() {
					goto l437
				}
				add(ruleFREE, position438)
			}
			return true
		l437:
			position, tokenIndex = position437, tokenIndex437
			return false
		},
		/* 84 NEST <- <('n' 'e' 's' 't' _)> */
		func() bool {
			position439, tokenIndex439 := position, tokenIndex
			{
				position440 := position
				if buffer[position] != rune('n') {
					goto l439
				}
				position++
				if buffer[position] != rune('e') {
					goto l439
				}
				position++
				if buffer[position] != rune('s') {
					goto l439
				}
				position++
				if buffer[position] != rune('t') {
					goto l439
				}
				position++
				if !_rules[rule_]() {
					goto l439
				}
				add(ruleNEST, position440)
			}
			return true
		l439:
			position, tokenIndex = position439, tokenIndex439
			return false
		},
		/* 85 TRUE <- <('t' 'r' 'u' 'e' _)> */
		nil,
		/* 86 FALSE <- <('f' 'a' 'l' 's' 'e' _)> */
		nil,
		/* 87 EXTERNAL <- <('e' 'x' 't' 'e' 'r' 'n' 'a' 'l')> */
		func() bool {
			position443, tokenIndex443 := position, tokenIndex
			{
				position444 := position
				if buffer[position] != rune('e') {
					goto l443
				}
				position++
				if buffer[position] != rune('x') {
					goto l443
				}
				position++
				if buffer[position] != rune('t') {
					goto l443
				}
				position++
				if buffer[position] != rune('e') {
					goto l443
				}
				position++
				if buffer[position] != rune('r') {
					goto l443
				}
				position++
				if buffer[position] != rune('n') {
					goto l443
				}
				position++
				if buffer[position] != rune('a') {
					goto l443
				}
				position++
				if buffer[position] != rune('l') {
					goto l443
				}
				position++
				add(ruleEXTERNAL, position444)
			}
			return true
		l443:
			position, tokenIndex = position443, tokenIndex443
			return false
		},
		/* 88 NAME <- <('n' 'a' 'm' 'e')> */
		func() bool {
			position445, tokenIndex445 := position, tokenIndex
			{
				position446 := position
				if buffer[position] != rune('n') {
					goto l445
				}
				position++
				if buffer[position] != rune('a') {
					goto l445
				}
				position++
				if buffer[position] != rune('m') {
					goto l445
				}
				position++
				if buffer[position] != rune('e') {
					goto l445
				}
				position++
				add(ruleNAME, position446)
			}
			return true
		l445:
			position, tokenIndex = position445, tokenIndex445
			return false
		},
		/* 89 TYPE <- <('t' 'y' 'p' 'e')> */
		func() bool {
			position447, tokenIndex447 := position, tokenIndex
			{
				position448 := position
				if buffer[position] != rune('t') {
					goto l447
				}
				position++
				if buffer[position] != rune('y') {
					goto l447
				}
				position++
				if buffer[position] != rune('p') {
					goto l447
				}
				position++
				if buffer[position] != rune('e') {
					goto l447
				}
				position++
				add(ruleTYPE, position448)
			}
			return true
		l447:
			position, tokenIndex = position447, tokenIndex447
			return false
		},
		/* 90 VERB <- <('v' 'e' 'r' 'b')> */
		func() bool {
			position449, tokenIndex449 := position, tokenIndex
			{
				position450 := position
				if buffer[position] != rune('v') {
					goto l449
				}
				position++
				if buffer[position] != rune('e') {
					goto l449
				}
				position++
				if buffer[position] != rune('r') {
					goto l449
				}
				position++
				if buffer[position] != rune('b') {
					goto l449
				}
				position++
				add(ruleVERB, position450)
			}
			return true
		l449:
			position, tokenIndex = position449, tokenIndex449
			return false
		},
		/* 91 MECHANISM <- <('m' 'e' 'c' 'h' 'a' 'n' 'i' 's' 'm')> */
		func() bool {
			position451, tokenIndex451 := position, tokenIndex
			{
				position452 := position
				if buffer[position] != rune('m') {
					goto l451
				}
				position++
				if buffer[position] != rune('e') {
					goto l451
				}
				position++
				if buffer[position] != rune('c') {
					goto l451
				}
				position++
				if buffer[position] != rune('h') {
					goto l451
				}
				position++
				if buffer[position] != rune('a') {
					goto l451
				}
				position++
				if buffer[position] != rune('n') {
					goto l451
				}
				position++
				if buffer[position] != rune('i') {
					goto l451
				}
				position++
				if buffer[position] != rune('s') {
					goto l451
				}
				position++
				if buffer[position] != rune('m') {
					goto l451
				}
				position++
				add(ruleMECHANISM, position452)
			}
			return true
		l451:
			position, tokenIndex = position451, tokenIndex451
			return false
		},
		/* 92 ASYNC <- <('a' 's' 'y' 'n' 'c')> */
		func() bool {
			position453, tokenIndex453 := position, tokenIndex
			{
				position454 := position
				if buffer[position] != rune('a') {
					goto l453
				}
				position++
				if buffer[position] != rune('s') {
					goto l453
				}
				position++
				if buffer[position] != rune('y') {
					goto l453
				}
				position++
				if buffer[position] != rune('n') {
					goto l453
				}
				position++
				if buffer[position] != rune('c') {
					goto l453
				}
				position++
				add(ruleASYNC, position454)
			}
			return true
		l453:
			position, tokenIndex = position453, tokenIndex453
			return false
		},
		/* 93 EXPANDED <- <('e' 'x' 'p' 'a' 'n' 'd' 'e' 'd')> */
		func() bool {
			position455, tokenIndex455 := position, tokenIndex
			{
				position456 := position
				if buffer[position] != rune('e') {
					goto l455
				}
				position++
				if buffer[position] != rune('x') {
					goto l455
				}
				position++
				if buffer[position] != rune('p') {
					goto l455
				}
				position++
				if buffer[position] != rune('a') {
					goto l455
				}
				position++
				if buffer[position] != rune('n') {
					goto l455
				}
				position++
				if buffer[position] != rune('d') {
					goto l455
				}
				position++
				if buffer[position] != rune('e') {
					goto l455
				}
				position++
				if buffer[position] != rune('d') {
					goto l455
				}
				position++
				add(ruleEXPANDED, position456)
			}
			return true
		l455:
			position, tokenIndex = position455, tokenIndex455
			return false
		},
		/* 94 PERSON <- <('p' 'e' 'r' 's' 'o' 'n' _)> */
		nil,
		/* 95 DATABASE <- <('d' 'a' 't' 'a' 'b' 'a' 's' 'e' _)> */
		nil,
		/* 96 QUEUE <- <('q' 'u' 'e' 'u' 'e' _)> */
		nil,
		/* 97 BLOBSTORE <- <('b' 'l' 'o' 'b' 's' 't' 'o' 'r' 'e' _)> */
		nil,
		/* 98 BROWSER <- <('b' 'r' 'o' 'w' 's' 'e' 'r' _)> */
		nil,
		/* 99 MOBILE <- <('m' 'o' 'b' 'i' 'l' 'e' _)> */
		nil,
		/* 100 SERVER <- <('s' 'e' 'r' 'v' 'e' 'r' _)> */
		nil,
		/* 101 DEVICE <- <('d' 'e' 'v' 'i' 'c' 'e' _)> */
		nil,
		/* 102 CODE <- <('c' 'o' 'd' 'e' _)> */
		nil,
		/* 103 DELIMITER <- <('$' '$')> */
		func() bool {
			position466, tokenIndex466 := position, tokenIndex
			{
				position467 := position
				if buffer[position] != rune('$') {
					goto l466
				}
				position++
				if buffer[position] != rune('$') {
					goto l466
				}
				position++
				add(ruleDELIMITER, position467)
			}
			return true
		l466:
			position, tokenIndex = position466, tokenIndex466
			return false
		},
		/* 104 QUOTE <- <'"'> */
		func() bool {
			position468, tokenIndex468 := position, tokenIndex
			{
				position469 := position
				if buffer[position] != rune('"') {
					goto l468
				}
				position++
				add(ruleQUOTE, position469)
			}
			return true
		l468:
			position, tokenIndex = position468, tokenIndex468
			return false
		},
		/* 105 EQUALS <- <'='> */
		func() bool {
			position470, tokenIndex470 := position, tokenIndex
			{
				position471 := position
				if buffer[position] != rune('=') {
					goto l470
				}
				position++
				add(ruleEQUALS, position471)
			}
			return true
		l470:
			position, tokenIndex = position470, tokenIndex470
			return false
		},
		/* 106 FLAG <- <('-' '-'?)> */
		func() bool {
			position472, tokenIndex472 := position, tokenIndex
			{
				position473 := position
				if buffer[position] != rune('-') {
					goto l472
				}
				position++
				{
					position474, tokenIndex474 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l474
					}
					position++
					goto l475
				l474:
					position, tokenIndex = position474, tokenIndex474
				}
			l475:
				add(ruleFLAG, position473)
			}
			return true
		l472:
			position, tokenIndex = position472, tokenIndex472
			return false
		},
		/* 107 STRICT <- <('s' 't' 'r' 'i' 'c' 't' _)> */
		nil,
		/* 108 VERBOSE <- <('v' 'e' 'r' 'b' 'o' 's' 'e' _)> */
		nil,
		/* 109 IDS <- <('i' 'd' 's' _)> */
		nil,
		/* 110 _ <- <Whitespace*> */
		func() bool {
			{
				position480 := position
			l481:
				{
					position482, tokenIndex482 := position, tokenIndex
					{
						position483 := position
						{
							switch buffer[position] {
							case '\t':
								if buffer[position] != rune('\t') {
									goto l482
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l482
								}
								position++
							default:
								{
									position485 := position
									{
										position486, tokenIndex486 := position, tokenIndex
										if buffer[position] != rune('\r') {
											goto l487
										}
										position++
										if buffer[position] != rune('\n') {
											goto l487
										}
										position++
										goto l486
									l487:
										position, tokenIndex = position486, tokenIndex486
										if buffer[position] != rune('\n') {
											goto l488
										}
										position++
										goto l486
									l488:
										position, tokenIndex = position486, tokenIndex486
										if buffer[position] != rune('\r') {
											goto l482
										}
										position++
									}
								l486:
									add(ruleEOL, position485)
								}
							}
						}

						add(ruleWhitespace, position483)
					}
					goto l481
				l482:
					position, tokenIndex = position482, tokenIndex482
				}
				add(rule_, position480)
			}
			return true
		},
		/* 111 Whitespace <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') EOL))> */
		nil,
		/* 112 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		nil,
		/* 113 END <- <!.> */
		func() bool {
			position491, tokenIndex491 := position, tokenIndex
			{
				position492 := position
				{
					position493, tokenIndex493 := position, tokenIndex
					if !matchDot() {
						goto l493
					}
					goto l491
				l493:
					position, tokenIndex = position493, tokenIndex493
				}
				add(ruleEND, position492)
			}
			return true
		l491:
			position, tokenIndex = position491, tokenIndex491
			return false
		},
		/* 115 Action0 <- <{
		   p.StmtType = "Response"
		 }> */
		nil,
		/* 116 Action1 <- <{
		   p.StmtType = "Command"
		   p.InputAttributes.Raw = p.Buffer
		 }> */
		nil,
		nil,
		/* 118 Action2 <- <{ p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text)) }> */
		nil,
		/* 119 Action3 <- <{ p.InputAttributes.Verb = "fetch" }> */
		nil,
		/* 120 Action4 <- <{ p.InputAttributes.Verb = "list" }> */
		nil,
		/* 121 Action5 <- <{ p.InputAttributes.Verb = "create-or-fetch" }> */
		nil,
		/* 122 Action6 <- <{ p.InputAttributes.Verb = "create-or-set" }> */
		nil,
		/* 123 Action7 <- <{ p.Response.Object.Type = "world"; p.Response.Object.Repr = strings.Join(append([]string{p.TreeString}, p.RelStrings...), "\n") }> */
		nil,
		/* 124 Action8 <- <{
		   p.Response.Object.Type = "item"; p.Response.Object.Repr = cleanString(text); p.ItemStrings = append(p.ItemStrings, strings.TrimSpace(text))
		   p.currentId = p.InputAttributes.ResourceId
		   p.nodeStack = append(p.nodeStack, Node{Id: p.currentId, Children: []Node{}})
		 }> */
		nil,
		/* 125 Action9 <- <{ p.Response.Object.Type = "rel"; p.Response.Object.Repr = cleanString(text); p.RelStrings = append(p.RelStrings, strings.TrimSpace(text)) }> */
		nil,
		/* 126 Action10 <- <{ p.Response.Object.Type = "ids"; b, _ := json.Marshal(p.InputAttributes.ResourceIds); p.Response.Object.Repr = string(b) }> */
		nil,
		/* 127 Action11 <- <{
		   p.StmtType = "Tree"; p.Response.Object.Type = "tree"; p.Response.Object.Repr = text; p.TreeString = text
		   if len(p.nodeStack) > 0 {
		     node := p.nodeStack[len(p.nodeStack)-1]
		     p.nodeStack = p.nodeStack[:len(p.nodeStack)-1]
		     if len(p.nodeStack) > 0 {
		       p.nodeStack[len(p.nodeStack)-1].Children = append(p.nodeStack[len(p.nodeStack)-1].Children, node)
		     } else {
		       p.Tree = node
		     }
		   }
		 }> */
		nil,
		/* 128 Action12 <- <{
		   p.currentId = "nil"
		   p.nodeStack = append(p.nodeStack, Node{Id: p.currentId, Children: []Node{}})
		 }> */
		nil,
		/* 129 Action13 <- <{
		   p.Response.Status.Message = cleanString(text)
		 }> */
		nil,
		/* 130 Action14 <- <{ p.Response.Status.Code = p.number }> */
		nil,
		/* 131 Action15 <- <{ p.InputAttributes.Params["limit"] = cleanString(text) }> */
		nil,
		/* 132 Action16 <- <{ p.InputAttributes.ResourceId = cleanString(text) }> */
		nil,
		/* 133 Action17 <- <{
		   p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text))
		 }> */
		nil,
		/* 134 Action18 <- <{
		   p.InputAttributes.ResourceId = ""
		   ids := strings.Fields(text)
		   for _, id := range ids {
		     p.InputAttributes.ResourceIds = append(p.InputAttributes.ResourceIds, cleanString(id))
		   }
		 }> */
		nil,
		/* 135 Action19 <- <{ p.Params["external"] = cleanString(text) }> */
		nil,
		/* 136 Action20 <- <{ p.Params["type"] = cleanString(text) }> */
		nil,
		/* 137 Action21 <- <{ p.Params["name"] = cleanString(text) }> */
		nil,
		/* 138 Action22 <- <{ p.Params["mechanism"] = cleanString(text) }> */
		nil,
		/* 139 Action23 <- <{ p.Params["expanded"] = cleanString(text) }> */
		nil,
		/* 140 Action24 <- <{ p.Params["verb"] = cleanString(text) }> */
		nil,
		/* 141 Action25 <- <{ p.Params["mechanism"] = cleanString(text) }> */
		nil,
		/* 142 Action26 <- <{ p.Params["async"] = cleanString(text) }> */
		nil,
		/* 143 Action27 <- <{ p.Params["expanded"] = cleanString(text) }> */
		nil,
		/* 144 Action28 <- <{ p.InputAttributes.Params[cleanString(text)] = "" }> */
		nil,
		/* 145 Action29 <- <{ p.InputAttributes.Params[cleanString(text)] = "" }> */
		nil,
		/* 146 Action30 <- <{ p.text = cleanString(text) }> */
		nil,
		/* 147 Action31 <- <{ n, _ := strconv.Atoi(text); p.number = n }> */
		nil,
		/* 148 Action32 <- <{ p.bool = text == "true" }> */
		nil,
		/* 149 Action33 <- <{ p.InputAttributes.ResourceType = "item"; p.InputAttributes.Verb = "exists" }> */
		nil,
		/* 150 Action34 <- <{ p.InputAttributes.ResourceType = "rel"; p.InputAttributes.Verb = "exists" }> */
		nil,
		/* 151 Action35 <- <{ p.InputAttributes.ResourceType = "world" }> */
		nil,
		/* 152 Action36 <- <{ p.InputAttributes.ResourceType = "item" }> */
		nil,
		/* 153 Action37 <- <{ p.InputAttributes.ResourceType = "rel" }> */
		nil,
		/* 154 Action38 <- <{ p.InputAttributes.Verb = "create" }> */
		nil,
		/* 155 Action39 <- <{ p.InputAttributes.Verb = "fetch" }> */
		nil,
		/* 156 Action40 <- <{ p.InputAttributes.Verb = "set" }> */
		nil,
		/* 157 Action41 <- <{ p.InputAttributes.Verb = "clear" }> */
		nil,
		/* 158 Action42 <- <{ p.InputAttributes.Verb = "delete" }> */
		nil,
		/* 159 Action43 <- <{ p.InputAttributes.Verb = "list" }> */
		nil,
		/* 160 Action44 <- <{ p.InputAttributes.Verb = "nest"; p.InputAttributes.ResourceType = "item" }> */
		nil,
		/* 161 Action45 <- <{ p.InputAttributes.Verb = "free"; p.InputAttributes.ResourceType = "item" }> */
		nil,
		/* 162 Action46 <- <{ p.InputAttributes.Verb = "exists" }> */
		nil,
		/* 163 Action47 <- <{ p.InputAttributes.Verb = "in?"; p.InputAttributes.ResourceType = "item" }> */
		nil,
		/* 164 Action48 <- <{ p.InputAttributes.Verb = "from?"; p.InputAttributes.ResourceType = "rel" }> */
		nil,
		/* 165 Action49 <- <{ p.InputAttributes.Verb = "to?"; p.InputAttributes.ResourceType = "rel" }> */
		nil,
		/* 166 Action50 <- <{ p.InputAttributes.Flags = append(p.InputAttributes.Flags, "strict") }> */
		nil,
		/* 167 Action51 <- <{ p.InputAttributes.Flags = append(p.InputAttributes.Flags, "verbose") }> */
		nil,
		/* 168 Action52 <- <{ p.InputAttributes.Flags = append(p.InputAttributes.Flags, "ids") }> */
		nil,
	}
	p.rules = _rules
	return nil
}
