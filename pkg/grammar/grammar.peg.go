package grammar

// Code generated by peg -inline -switch -strict -output pkg/grammar/grammar.peg.go pkg/grammar/grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleCommand
	ruleMutation
	ruleQuery
	ruleFetchQuery
	ruleExistsQuery
	ruleStateBound
	ruleCreateOrFetch
	ruleCreateOrSet
	ruleDualIdentifier
	ruleIdentifier
	ruleItemParams
	ruleRelParams
	ruleItemParam
	ruleRelParam
	ruleItemKeys
	ruleRelKeys
	ruleItemKey
	ruleRelKey
	ruleStringLike
	ruleBoolean
	ruleText
	ruleQuotedText
	ruleItemType
	ruleItemExists
	ruleRelExists
	ruleItem
	ruleRel
	ruleKeyword
	ruleITEM
	ruleITEM_EXISTS
	ruleREL
	ruleREL_EXISTS
	ruleIN
	ruleIN_QUERY
	ruleCREATE
	ruleDELETE
	ruleSET
	ruleCLEAR
	ruleFETCH
	ruleEXISTS
	ruleFREE
	ruleNEST
	ruleTRUE
	ruleFALSE
	ruleEXTERNAL
	ruleNAME
	ruleTYPE
	ruleVERB
	ruleMECHANISM
	ruleASYNC
	ruleEXPANDED
	rulePERSON
	ruleDATABASE
	ruleQUEUE
	ruleBLOBSTORE
	ruleBROWSER
	ruleMOBILE
	ruleSERVER
	ruleDEVICE
	ruleCODE
	ruleQUOTE
	ruleEQUALS
	rule_
	ruleWhitespace
	ruleEOL
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"Command",
	"Mutation",
	"Query",
	"FetchQuery",
	"ExistsQuery",
	"StateBound",
	"CreateOrFetch",
	"CreateOrSet",
	"DualIdentifier",
	"Identifier",
	"ItemParams",
	"RelParams",
	"ItemParam",
	"RelParam",
	"ItemKeys",
	"RelKeys",
	"ItemKey",
	"RelKey",
	"StringLike",
	"Boolean",
	"Text",
	"QuotedText",
	"ItemType",
	"ItemExists",
	"RelExists",
	"Item",
	"Rel",
	"Keyword",
	"ITEM",
	"ITEM_EXISTS",
	"REL",
	"REL_EXISTS",
	"IN",
	"IN_QUERY",
	"CREATE",
	"DELETE",
	"SET",
	"CLEAR",
	"FETCH",
	"EXISTS",
	"FREE",
	"NEST",
	"TRUE",
	"FALSE",
	"EXTERNAL",
	"NAME",
	"TYPE",
	"VERB",
	"MECHANISM",
	"ASYNC",
	"EXPANDED",
	"PERSON",
	"DATABASE",
	"QUEUE",
	"BLOBSTORE",
	"BROWSER",
	"MOBILE",
	"SERVER",
	"DEVICE",
	"CODE",
	"QUOTE",
	"EQUALS",
	"_",
	"Whitespace",
	"EOL",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	InputAttributes inputAttributes

	Buffer string
	buffer []rune
	rules  [67]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Command <- <(_ (Mutation / Query / StateBound) END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rule_]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						{
							position5, tokenIndex5 := position, tokenIndex
							if !_rules[ruleItem]() {
								goto l6
							}
							{
								position7, tokenIndex7 := position, tokenIndex
								if !_rules[ruleCREATE]() {
									goto l8
								}
								goto l7
							l8:
								position, tokenIndex = position7, tokenIndex7
								if !_rules[ruleSET]() {
									goto l6
								}
							}
						l7:
							if !_rules[ruleIdentifier]() {
								goto l6
							}
							{
								position9, tokenIndex9 := position, tokenIndex
								if !_rules[ruleItemParams]() {
									goto l9
								}
								goto l10
							l9:
								position, tokenIndex = position9, tokenIndex9
							}
						l10:
							goto l5
						l6:
							position, tokenIndex = position5, tokenIndex5
							if !_rules[ruleItem]() {
								goto l11
							}
							if !_rules[ruleCLEAR]() {
								goto l11
							}
							if !_rules[ruleIdentifier]() {
								goto l11
							}
							{
								position12 := position
								{
									position15 := position
									{
										position16, tokenIndex16 := position, tokenIndex
										if !_rules[ruleEXTERNAL]() {
											goto l17
										}
										goto l16
									l17:
										position, tokenIndex = position16, tokenIndex16
										{
											switch buffer[position] {
											case 'e':
												if !_rules[ruleEXPANDED]() {
													goto l11
												}
											case 'm':
												if !_rules[ruleMECHANISM]() {
													goto l11
												}
											case 't':
												if !_rules[ruleTYPE]() {
													goto l11
												}
											default:
												if !_rules[ruleNAME]() {
													goto l11
												}
											}
										}

									}
								l16:
									if !_rules[rule_]() {
										goto l11
									}
									add(ruleItemKey, position15)
								}
							l13:
								{
									position14, tokenIndex14 := position, tokenIndex
									{
										position19 := position
										{
											position20, tokenIndex20 := position, tokenIndex
											if !_rules[ruleEXTERNAL]() {
												goto l21
											}
											goto l20
										l21:
											position, tokenIndex = position20, tokenIndex20
											{
												switch buffer[position] {
												case 'e':
													if !_rules[ruleEXPANDED]() {
														goto l14
													}
												case 'm':
													if !_rules[ruleMECHANISM]() {
														goto l14
													}
												case 't':
													if !_rules[ruleTYPE]() {
														goto l14
													}
												default:
													if !_rules[ruleNAME]() {
														goto l14
													}
												}
											}

										}
									l20:
										if !_rules[rule_]() {
											goto l14
										}
										add(ruleItemKey, position19)
									}
									goto l13
								l14:
									position, tokenIndex = position14, tokenIndex14
								}
								add(ruleItemKeys, position12)
							}
							goto l5
						l11:
							position, tokenIndex = position5, tokenIndex5
							if !_rules[ruleRel]() {
								goto l23
							}
							{
								position24, tokenIndex24 := position, tokenIndex
								if !_rules[ruleCREATE]() {
									goto l25
								}
								goto l24
							l25:
								position, tokenIndex = position24, tokenIndex24
								if !_rules[ruleSET]() {
									goto l23
								}
							}
						l24:
							if !_rules[ruleDualIdentifier]() {
								goto l23
							}
							{
								position26, tokenIndex26 := position, tokenIndex
								if !_rules[ruleRelParams]() {
									goto l26
								}
								goto l27
							l26:
								position, tokenIndex = position26, tokenIndex26
							}
						l27:
							goto l5
						l23:
							position, tokenIndex = position5, tokenIndex5
							if !_rules[ruleRel]() {
								goto l28
							}
							if !_rules[ruleCLEAR]() {
								goto l28
							}
							if !_rules[ruleDualIdentifier]() {
								goto l28
							}
							{
								position29 := position
								{
									position32 := position
									{
										switch buffer[position] {
										case 'e':
											if !_rules[ruleEXPANDED]() {
												goto l28
											}
										case 'a':
											if !_rules[ruleASYNC]() {
												goto l28
											}
										case 'm':
											if !_rules[ruleMECHANISM]() {
												goto l28
											}
										default:
											if !_rules[ruleVERB]() {
												goto l28
											}
										}
									}

									if !_rules[rule_]() {
										goto l28
									}
									add(ruleRelKey, position32)
								}
							l30:
								{
									position31, tokenIndex31 := position, tokenIndex
									{
										position34 := position
										{
											switch buffer[position] {
											case 'e':
												if !_rules[ruleEXPANDED]() {
													goto l31
												}
											case 'a':
												if !_rules[ruleASYNC]() {
													goto l31
												}
											case 'm':
												if !_rules[ruleMECHANISM]() {
													goto l31
												}
											default:
												if !_rules[ruleVERB]() {
													goto l31
												}
											}
										}

										if !_rules[rule_]() {
											goto l31
										}
										add(ruleRelKey, position34)
									}
									goto l30
								l31:
									position, tokenIndex = position31, tokenIndex31
								}
								add(ruleRelKeys, position29)
							}
							goto l5
						l28:
							position, tokenIndex = position5, tokenIndex5
							{
								switch buffer[position] {
								case 'f':
									if !_rules[ruleFREE]() {
										goto l3
									}
									if !_rules[ruleIdentifier]() {
										goto l3
									}
								case 'n':
									if !_rules[ruleNEST]() {
										goto l3
									}
									if !_rules[ruleIdentifier]() {
										goto l3
									}
									if !_rules[ruleIN]() {
										goto l3
									}
									if !_rules[ruleIdentifier]() {
										goto l3
									}
								case 'r':
									if !_rules[ruleRel]() {
										goto l3
									}
									if !_rules[ruleDELETE]() {
										goto l3
									}
									if !_rules[ruleDualIdentifier]() {
										goto l3
									}
								default:
									if !_rules[ruleItem]() {
										goto l3
									}
									if !_rules[ruleDELETE]() {
										goto l3
									}
									if !_rules[ruleIdentifier]() {
										goto l3
									}
								}
							}

						}
					l5:
						add(ruleMutation, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position38 := position
						{
							position39, tokenIndex39 := position, tokenIndex
							{
								position41 := position
								{
									position42, tokenIndex42 := position, tokenIndex
									if !_rules[ruleItem]() {
										goto l43
									}
									if !_rules[ruleFETCH]() {
										goto l43
									}
									if !_rules[ruleIdentifier]() {
										goto l43
									}
									goto l42
								l43:
									position, tokenIndex = position42, tokenIndex42
									if !_rules[ruleItem]() {
										goto l44
									}
									if !_rules[ruleIN]() {
										goto l44
									}
									if !_rules[ruleIdentifier]() {
										goto l44
									}
									goto l42
								l44:
									position, tokenIndex = position42, tokenIndex42
									if !_rules[ruleRel]() {
										goto l45
									}
									if !_rules[ruleFETCH]() {
										goto l45
									}
									if !_rules[ruleDualIdentifier]() {
										goto l45
									}
									goto l42
								l45:
									position, tokenIndex = position42, tokenIndex42
									if !_rules[ruleRel]() {
										goto l40
									}
									if !_rules[ruleIdentifier]() {
										goto l40
									}
									{
										position46, tokenIndex46 := position, tokenIndex
										if !_rules[ruleIdentifier]() {
											goto l46
										}
										goto l40
									l46:
										position, tokenIndex = position46, tokenIndex46
									}
								}
							l42:
								add(ruleFetchQuery, position41)
							}
							goto l39
						l40:
							position, tokenIndex = position39, tokenIndex39
							{
								position47 := position
								{
									position48, tokenIndex48 := position, tokenIndex
									{
										position50 := position
										{
											position51, tokenIndex51 := position, tokenIndex
											if !_rules[ruleITEM_EXISTS]() {
												goto l52
											}
											goto l51
										l52:
											position, tokenIndex = position51, tokenIndex51
											if !_rules[ruleItem]() {
												goto l49
											}
											if !_rules[ruleEXISTS]() {
												goto l49
											}
										}
									l51:
										add(ruleItemExists, position50)
									}
									if !_rules[ruleIdentifier]() {
										goto l49
									}
									goto l48
								l49:
									position, tokenIndex = position48, tokenIndex48
									if !_rules[ruleIN_QUERY]() {
										goto l53
									}
									if !_rules[ruleIdentifier]() {
										goto l53
									}
									goto l48
								l53:
									position, tokenIndex = position48, tokenIndex48
									{
										position54 := position
										{
											position55, tokenIndex55 := position, tokenIndex
											if !_rules[ruleREL_EXISTS]() {
												goto l56
											}
											goto l55
										l56:
											position, tokenIndex = position55, tokenIndex55
											if !_rules[ruleRel]() {
												goto l37
											}
											if !_rules[ruleEXISTS]() {
												goto l37
											}
										}
									l55:
										add(ruleRelExists, position54)
									}
									if !_rules[ruleDualIdentifier]() {
										goto l37
									}
								}
							l48:
								add(ruleExistsQuery, position47)
							}
						}
					l39:
						add(ruleQuery, position38)
					}
					goto l2
				l37:
					position, tokenIndex = position2, tokenIndex2
					{
						position57 := position
						{
							position58, tokenIndex58 := position, tokenIndex
							{
								position60 := position
								{
									position61, tokenIndex61 := position, tokenIndex
									if !_rules[ruleItem]() {
										goto l62
									}
									if !_rules[ruleIdentifier]() {
										goto l62
									}
									{
										position63, tokenIndex63 := position, tokenIndex
										if !_rules[ruleItemParams]() {
											goto l63
										}
										goto l62
									l63:
										position, tokenIndex = position63, tokenIndex63
									}
									goto l61
								l62:
									position, tokenIndex = position61, tokenIndex61
									if !_rules[ruleRel]() {
										goto l59
									}
									if !_rules[ruleDualIdentifier]() {
										goto l59
									}
									{
										position64, tokenIndex64 := position, tokenIndex
										if !_rules[ruleRelParams]() {
											goto l64
										}
										goto l59
									l64:
										position, tokenIndex = position64, tokenIndex64
									}
								}
							l61:
								add(ruleCreateOrFetch, position60)
							}
							goto l58
						l59:
							position, tokenIndex = position58, tokenIndex58
							{
								position65 := position
								{
									position66, tokenIndex66 := position, tokenIndex
									if !_rules[ruleItem]() {
										goto l67
									}
									if !_rules[ruleIdentifier]() {
										goto l67
									}
									if !_rules[ruleItemParams]() {
										goto l67
									}
									goto l66
								l67:
									position, tokenIndex = position66, tokenIndex66
									if !_rules[ruleRel]() {
										goto l0
									}
									if !_rules[ruleDualIdentifier]() {
										goto l0
									}
									if !_rules[ruleRelParams]() {
										goto l0
									}
								}
							l66:
								add(ruleCreateOrSet, position65)
							}
						}
					l58:
						add(ruleStateBound, position57)
					}
				}
			l2:
				{
					position68 := position
					{
						position69, tokenIndex69 := position, tokenIndex
						if !matchDot() {
							goto l69
						}
						goto l0
					l69:
						position, tokenIndex = position69, tokenIndex69
					}
					add(ruleEND, position68)
				}
				add(ruleCommand, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Mutation <- <((Item (CREATE / SET) Identifier ItemParams?) / (Item CLEAR Identifier ItemKeys) / (Rel (CREATE / SET) DualIdentifier RelParams?) / (Rel CLEAR DualIdentifier RelKeys) / ((&('f') (FREE Identifier)) | (&('n') (NEST Identifier IN Identifier)) | (&('r') (Rel DELETE DualIdentifier)) | (&('i') (Item DELETE Identifier))))> */
		nil,
		/* 2 Query <- <(FetchQuery / ExistsQuery)> */
		nil,
		/* 3 FetchQuery <- <((Item FETCH Identifier) / (Item IN Identifier) / (Rel FETCH DualIdentifier) / (Rel Identifier !Identifier))> */
		nil,
		/* 4 ExistsQuery <- <((ItemExists Identifier) / (IN_QUERY Identifier) / (RelExists DualIdentifier))> */
		nil,
		/* 5 StateBound <- <(CreateOrFetch / CreateOrSet)> */
		nil,
		/* 6 CreateOrFetch <- <((Item Identifier !ItemParams) / (Rel DualIdentifier !RelParams))> */
		nil,
		/* 7 CreateOrSet <- <((Item Identifier ItemParams) / (Rel DualIdentifier RelParams))> */
		nil,
		/* 8 DualIdentifier <- <(Identifier Identifier)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if !_rules[ruleIdentifier]() {
					goto l77
				}
				if !_rules[ruleIdentifier]() {
					goto l77
				}
				add(ruleDualIdentifier, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 9 Identifier <- <(!Keyword StringLike)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					{
						position82 := position
						{
							position83, tokenIndex83 := position, tokenIndex
							if !_rules[ruleITEM]() {
								goto l84
							}
							goto l83
						l84:
							position, tokenIndex = position83, tokenIndex83
							if !_rules[ruleITEM_EXISTS]() {
								goto l85
							}
							goto l83
						l85:
							position, tokenIndex = position83, tokenIndex83
							if !_rules[ruleREL]() {
								goto l86
							}
							goto l83
						l86:
							position, tokenIndex = position83, tokenIndex83
							if !_rules[ruleIN]() {
								goto l87
							}
							goto l83
						l87:
							position, tokenIndex = position83, tokenIndex83
							if !_rules[ruleCREATE]() {
								goto l88
							}
							goto l83
						l88:
							position, tokenIndex = position83, tokenIndex83
							if !_rules[ruleFETCH]() {
								goto l89
							}
							goto l83
						l89:
							position, tokenIndex = position83, tokenIndex83
							{
								switch buffer[position] {
								case 'n':
									if !_rules[ruleNEST]() {
										goto l81
									}
								case 'f':
									if !_rules[ruleFREE]() {
										goto l81
									}
								case 'e':
									if !_rules[ruleEXISTS]() {
										goto l81
									}
								case 'c':
									if !_rules[ruleCLEAR]() {
										goto l81
									}
								case 's':
									if !_rules[ruleSET]() {
										goto l81
									}
								case 'd':
									if !_rules[ruleDELETE]() {
										goto l81
									}
								case 'i':
									if !_rules[ruleIN_QUERY]() {
										goto l81
									}
								default:
									if !_rules[ruleREL_EXISTS]() {
										goto l81
									}
								}
							}

						}
					l83:
						add(ruleKeyword, position82)
					}
					goto l79
				l81:
					position, tokenIndex = position81, tokenIndex81
				}
				if !_rules[ruleStringLike]() {
					goto l79
				}
				add(ruleIdentifier, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 10 ItemParams <- <ItemParam+> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				{
					position95 := position
					{
						position96, tokenIndex96 := position, tokenIndex
						if !_rules[ruleEXTERNAL]() {
							goto l97
						}
						if !_rules[ruleEQUALS]() {
							goto l97
						}
						if !_rules[ruleBoolean]() {
							goto l97
						}
						goto l96
					l97:
						position, tokenIndex = position96, tokenIndex96
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l91
								}
								if !_rules[ruleEQUALS]() {
									goto l91
								}
								if !_rules[ruleStringLike]() {
									goto l91
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l91
								}
								if !_rules[ruleEQUALS]() {
									goto l91
								}
								if !_rules[ruleStringLike]() {
									goto l91
								}
							case 'n':
								if !_rules[ruleNAME]() {
									goto l91
								}
								if !_rules[ruleEQUALS]() {
									goto l91
								}
								if !_rules[ruleStringLike]() {
									goto l91
								}
							default:
								if !_rules[ruleTYPE]() {
									goto l91
								}
								if !_rules[ruleEQUALS]() {
									goto l91
								}
								{
									position99 := position
									{
										position100, tokenIndex100 := position, tokenIndex
										{
											position102 := position
											if buffer[position] != rune('d') {
												goto l101
											}
											position++
											if buffer[position] != rune('a') {
												goto l101
											}
											position++
											if buffer[position] != rune('t') {
												goto l101
											}
											position++
											if buffer[position] != rune('a') {
												goto l101
											}
											position++
											if buffer[position] != rune('b') {
												goto l101
											}
											position++
											if buffer[position] != rune('a') {
												goto l101
											}
											position++
											if buffer[position] != rune('s') {
												goto l101
											}
											position++
											if buffer[position] != rune('e') {
												goto l101
											}
											position++
											if !_rules[rule_]() {
												goto l101
											}
											add(ruleDATABASE, position102)
										}
										goto l100
									l101:
										position, tokenIndex = position100, tokenIndex100
										{
											position104 := position
											if buffer[position] != rune('b') {
												goto l103
											}
											position++
											if buffer[position] != rune('l') {
												goto l103
											}
											position++
											if buffer[position] != rune('o') {
												goto l103
											}
											position++
											if buffer[position] != rune('b') {
												goto l103
											}
											position++
											if buffer[position] != rune('s') {
												goto l103
											}
											position++
											if buffer[position] != rune('t') {
												goto l103
											}
											position++
											if buffer[position] != rune('o') {
												goto l103
											}
											position++
											if buffer[position] != rune('r') {
												goto l103
											}
											position++
											if buffer[position] != rune('e') {
												goto l103
											}
											position++
											if !_rules[rule_]() {
												goto l103
											}
											add(ruleBLOBSTORE, position104)
										}
										goto l100
									l103:
										position, tokenIndex = position100, tokenIndex100
										{
											switch buffer[position] {
											case 'c':
												{
													position106 := position
													if buffer[position] != rune('c') {
														goto l91
													}
													position++
													if buffer[position] != rune('o') {
														goto l91
													}
													position++
													if buffer[position] != rune('d') {
														goto l91
													}
													position++
													if buffer[position] != rune('e') {
														goto l91
													}
													position++
													if !_rules[rule_]() {
														goto l91
													}
													add(ruleCODE, position106)
												}
											case 'd':
												{
													position107 := position
													if buffer[position] != rune('d') {
														goto l91
													}
													position++
													if buffer[position] != rune('e') {
														goto l91
													}
													position++
													if buffer[position] != rune('v') {
														goto l91
													}
													position++
													if buffer[position] != rune('i') {
														goto l91
													}
													position++
													if buffer[position] != rune('c') {
														goto l91
													}
													position++
													if buffer[position] != rune('e') {
														goto l91
													}
													position++
													if !_rules[rule_]() {
														goto l91
													}
													add(ruleDEVICE, position107)
												}
											case 's':
												{
													position108 := position
													if buffer[position] != rune('s') {
														goto l91
													}
													position++
													if buffer[position] != rune('e') {
														goto l91
													}
													position++
													if buffer[position] != rune('r') {
														goto l91
													}
													position++
													if buffer[position] != rune('v') {
														goto l91
													}
													position++
													if buffer[position] != rune('e') {
														goto l91
													}
													position++
													if buffer[position] != rune('r') {
														goto l91
													}
													position++
													if !_rules[rule_]() {
														goto l91
													}
													add(ruleSERVER, position108)
												}
											case 'm':
												{
													position109 := position
													if buffer[position] != rune('m') {
														goto l91
													}
													position++
													if buffer[position] != rune('o') {
														goto l91
													}
													position++
													if buffer[position] != rune('b') {
														goto l91
													}
													position++
													if buffer[position] != rune('i') {
														goto l91
													}
													position++
													if buffer[position] != rune('l') {
														goto l91
													}
													position++
													if buffer[position] != rune('e') {
														goto l91
													}
													position++
													if !_rules[rule_]() {
														goto l91
													}
													add(ruleMOBILE, position109)
												}
											case 'b':
												{
													position110 := position
													if buffer[position] != rune('b') {
														goto l91
													}
													position++
													if buffer[position] != rune('r') {
														goto l91
													}
													position++
													if buffer[position] != rune('o') {
														goto l91
													}
													position++
													if buffer[position] != rune('w') {
														goto l91
													}
													position++
													if buffer[position] != rune('s') {
														goto l91
													}
													position++
													if buffer[position] != rune('e') {
														goto l91
													}
													position++
													if buffer[position] != rune('r') {
														goto l91
													}
													position++
													if !_rules[rule_]() {
														goto l91
													}
													add(ruleBROWSER, position110)
												}
											case 'q':
												{
													position111 := position
													if buffer[position] != rune('q') {
														goto l91
													}
													position++
													if buffer[position] != rune('u') {
														goto l91
													}
													position++
													if buffer[position] != rune('e') {
														goto l91
													}
													position++
													if buffer[position] != rune('u') {
														goto l91
													}
													position++
													if buffer[position] != rune('e') {
														goto l91
													}
													position++
													if !_rules[rule_]() {
														goto l91
													}
													add(ruleQUEUE, position111)
												}
											default:
												{
													position112 := position
													if buffer[position] != rune('p') {
														goto l91
													}
													position++
													if buffer[position] != rune('e') {
														goto l91
													}
													position++
													if buffer[position] != rune('r') {
														goto l91
													}
													position++
													if buffer[position] != rune('s') {
														goto l91
													}
													position++
													if buffer[position] != rune('o') {
														goto l91
													}
													position++
													if buffer[position] != rune('n') {
														goto l91
													}
													position++
													if !_rules[rule_]() {
														goto l91
													}
													add(rulePERSON, position112)
												}
											}
										}

									}
								l100:
									add(ruleItemType, position99)
								}
							}
						}

					}
				l96:
					add(ruleItemParam, position95)
				}
			l93:
				{
					position94, tokenIndex94 := position, tokenIndex
					{
						position113 := position
						{
							position114, tokenIndex114 := position, tokenIndex
							if !_rules[ruleEXTERNAL]() {
								goto l115
							}
							if !_rules[ruleEQUALS]() {
								goto l115
							}
							if !_rules[ruleBoolean]() {
								goto l115
							}
							goto l114
						l115:
							position, tokenIndex = position114, tokenIndex114
							{
								switch buffer[position] {
								case 'e':
									if !_rules[ruleEXPANDED]() {
										goto l94
									}
									if !_rules[ruleEQUALS]() {
										goto l94
									}
									if !_rules[ruleStringLike]() {
										goto l94
									}
								case 'm':
									if !_rules[ruleMECHANISM]() {
										goto l94
									}
									if !_rules[ruleEQUALS]() {
										goto l94
									}
									if !_rules[ruleStringLike]() {
										goto l94
									}
								case 'n':
									if !_rules[ruleNAME]() {
										goto l94
									}
									if !_rules[ruleEQUALS]() {
										goto l94
									}
									if !_rules[ruleStringLike]() {
										goto l94
									}
								default:
									if !_rules[ruleTYPE]() {
										goto l94
									}
									if !_rules[ruleEQUALS]() {
										goto l94
									}
									{
										position117 := position
										{
											position118, tokenIndex118 := position, tokenIndex
											{
												position120 := position
												if buffer[position] != rune('d') {
													goto l119
												}
												position++
												if buffer[position] != rune('a') {
													goto l119
												}
												position++
												if buffer[position] != rune('t') {
													goto l119
												}
												position++
												if buffer[position] != rune('a') {
													goto l119
												}
												position++
												if buffer[position] != rune('b') {
													goto l119
												}
												position++
												if buffer[position] != rune('a') {
													goto l119
												}
												position++
												if buffer[position] != rune('s') {
													goto l119
												}
												position++
												if buffer[position] != rune('e') {
													goto l119
												}
												position++
												if !_rules[rule_]() {
													goto l119
												}
												add(ruleDATABASE, position120)
											}
											goto l118
										l119:
											position, tokenIndex = position118, tokenIndex118
											{
												position122 := position
												if buffer[position] != rune('b') {
													goto l121
												}
												position++
												if buffer[position] != rune('l') {
													goto l121
												}
												position++
												if buffer[position] != rune('o') {
													goto l121
												}
												position++
												if buffer[position] != rune('b') {
													goto l121
												}
												position++
												if buffer[position] != rune('s') {
													goto l121
												}
												position++
												if buffer[position] != rune('t') {
													goto l121
												}
												position++
												if buffer[position] != rune('o') {
													goto l121
												}
												position++
												if buffer[position] != rune('r') {
													goto l121
												}
												position++
												if buffer[position] != rune('e') {
													goto l121
												}
												position++
												if !_rules[rule_]() {
													goto l121
												}
												add(ruleBLOBSTORE, position122)
											}
											goto l118
										l121:
											position, tokenIndex = position118, tokenIndex118
											{
												switch buffer[position] {
												case 'c':
													{
														position124 := position
														if buffer[position] != rune('c') {
															goto l94
														}
														position++
														if buffer[position] != rune('o') {
															goto l94
														}
														position++
														if buffer[position] != rune('d') {
															goto l94
														}
														position++
														if buffer[position] != rune('e') {
															goto l94
														}
														position++
														if !_rules[rule_]() {
															goto l94
														}
														add(ruleCODE, position124)
													}
												case 'd':
													{
														position125 := position
														if buffer[position] != rune('d') {
															goto l94
														}
														position++
														if buffer[position] != rune('e') {
															goto l94
														}
														position++
														if buffer[position] != rune('v') {
															goto l94
														}
														position++
														if buffer[position] != rune('i') {
															goto l94
														}
														position++
														if buffer[position] != rune('c') {
															goto l94
														}
														position++
														if buffer[position] != rune('e') {
															goto l94
														}
														position++
														if !_rules[rule_]() {
															goto l94
														}
														add(ruleDEVICE, position125)
													}
												case 's':
													{
														position126 := position
														if buffer[position] != rune('s') {
															goto l94
														}
														position++
														if buffer[position] != rune('e') {
															goto l94
														}
														position++
														if buffer[position] != rune('r') {
															goto l94
														}
														position++
														if buffer[position] != rune('v') {
															goto l94
														}
														position++
														if buffer[position] != rune('e') {
															goto l94
														}
														position++
														if buffer[position] != rune('r') {
															goto l94
														}
														position++
														if !_rules[rule_]() {
															goto l94
														}
														add(ruleSERVER, position126)
													}
												case 'm':
													{
														position127 := position
														if buffer[position] != rune('m') {
															goto l94
														}
														position++
														if buffer[position] != rune('o') {
															goto l94
														}
														position++
														if buffer[position] != rune('b') {
															goto l94
														}
														position++
														if buffer[position] != rune('i') {
															goto l94
														}
														position++
														if buffer[position] != rune('l') {
															goto l94
														}
														position++
														if buffer[position] != rune('e') {
															goto l94
														}
														position++
														if !_rules[rule_]() {
															goto l94
														}
														add(ruleMOBILE, position127)
													}
												case 'b':
													{
														position128 := position
														if buffer[position] != rune('b') {
															goto l94
														}
														position++
														if buffer[position] != rune('r') {
															goto l94
														}
														position++
														if buffer[position] != rune('o') {
															goto l94
														}
														position++
														if buffer[position] != rune('w') {
															goto l94
														}
														position++
														if buffer[position] != rune('s') {
															goto l94
														}
														position++
														if buffer[position] != rune('e') {
															goto l94
														}
														position++
														if buffer[position] != rune('r') {
															goto l94
														}
														position++
														if !_rules[rule_]() {
															goto l94
														}
														add(ruleBROWSER, position128)
													}
												case 'q':
													{
														position129 := position
														if buffer[position] != rune('q') {
															goto l94
														}
														position++
														if buffer[position] != rune('u') {
															goto l94
														}
														position++
														if buffer[position] != rune('e') {
															goto l94
														}
														position++
														if buffer[position] != rune('u') {
															goto l94
														}
														position++
														if buffer[position] != rune('e') {
															goto l94
														}
														position++
														if !_rules[rule_]() {
															goto l94
														}
														add(ruleQUEUE, position129)
													}
												default:
													{
														position130 := position
														if buffer[position] != rune('p') {
															goto l94
														}
														position++
														if buffer[position] != rune('e') {
															goto l94
														}
														position++
														if buffer[position] != rune('r') {
															goto l94
														}
														position++
														if buffer[position] != rune('s') {
															goto l94
														}
														position++
														if buffer[position] != rune('o') {
															goto l94
														}
														position++
														if buffer[position] != rune('n') {
															goto l94
														}
														position++
														if !_rules[rule_]() {
															goto l94
														}
														add(rulePERSON, position130)
													}
												}
											}

										}
									l118:
										add(ruleItemType, position117)
									}
								}
							}

						}
					l114:
						add(ruleItemParam, position113)
					}
					goto l93
				l94:
					position, tokenIndex = position94, tokenIndex94
				}
				add(ruleItemParams, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 11 RelParams <- <RelParam+> */
		func() bool {
			position131, tokenIndex131 := position, tokenIndex
			{
				position132 := position
				{
					position135 := position
					{
						switch buffer[position] {
						case 'e':
							if !_rules[ruleEXPANDED]() {
								goto l131
							}
							if !_rules[ruleEQUALS]() {
								goto l131
							}
							if !_rules[ruleStringLike]() {
								goto l131
							}
						case 'a':
							if !_rules[ruleASYNC]() {
								goto l131
							}
							if !_rules[ruleEQUALS]() {
								goto l131
							}
							if !_rules[ruleBoolean]() {
								goto l131
							}
						case 'm':
							if !_rules[ruleMECHANISM]() {
								goto l131
							}
							if !_rules[ruleEQUALS]() {
								goto l131
							}
							if !_rules[ruleStringLike]() {
								goto l131
							}
						default:
							if !_rules[ruleVERB]() {
								goto l131
							}
							if !_rules[ruleEQUALS]() {
								goto l131
							}
							if !_rules[ruleStringLike]() {
								goto l131
							}
						}
					}

					add(ruleRelParam, position135)
				}
			l133:
				{
					position134, tokenIndex134 := position, tokenIndex
					{
						position137 := position
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l134
								}
								if !_rules[ruleEQUALS]() {
									goto l134
								}
								if !_rules[ruleStringLike]() {
									goto l134
								}
							case 'a':
								if !_rules[ruleASYNC]() {
									goto l134
								}
								if !_rules[ruleEQUALS]() {
									goto l134
								}
								if !_rules[ruleBoolean]() {
									goto l134
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l134
								}
								if !_rules[ruleEQUALS]() {
									goto l134
								}
								if !_rules[ruleStringLike]() {
									goto l134
								}
							default:
								if !_rules[ruleVERB]() {
									goto l134
								}
								if !_rules[ruleEQUALS]() {
									goto l134
								}
								if !_rules[ruleStringLike]() {
									goto l134
								}
							}
						}

						add(ruleRelParam, position137)
					}
					goto l133
				l134:
					position, tokenIndex = position134, tokenIndex134
				}
				add(ruleRelParams, position132)
			}
			return true
		l131:
			position, tokenIndex = position131, tokenIndex131
			return false
		},
		/* 12 ItemParam <- <((EXTERNAL EQUALS Boolean) / ((&('e') (EXPANDED EQUALS StringLike)) | (&('m') (MECHANISM EQUALS StringLike)) | (&('n') (NAME EQUALS StringLike)) | (&('t') (TYPE EQUALS ItemType))))> */
		nil,
		/* 13 RelParam <- <((&('e') (EXPANDED EQUALS StringLike)) | (&('a') (ASYNC EQUALS Boolean)) | (&('m') (MECHANISM EQUALS StringLike)) | (&('v') (VERB EQUALS StringLike)))> */
		nil,
		/* 14 ItemKeys <- <ItemKey+> */
		nil,
		/* 15 RelKeys <- <RelKey+> */
		nil,
		/* 16 ItemKey <- <((EXTERNAL / ((&('e') EXPANDED) | (&('m') MECHANISM) | (&('t') TYPE) | (&('n') NAME))) _)> */
		nil,
		/* 17 RelKey <- <(((&('e') EXPANDED) | (&('a') ASYNC) | (&('m') MECHANISM) | (&('v') VERB)) _)> */
		nil,
		/* 18 StringLike <- <((Text / QuotedText) _)> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				{
					position147, tokenIndex147 := position, tokenIndex
					{
						position149 := position
						{
							switch buffer[position] {
							case '_':
								if buffer[position] != rune('_') {
									goto l148
								}
								position++
							case '-':
								if buffer[position] != rune('-') {
									goto l148
								}
								position++
							case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l148
								}
								position++
							case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l148
								}
								position++
							default:
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l148
								}
								position++
							}
						}

					l150:
						{
							position151, tokenIndex151 := position, tokenIndex
							{
								switch buffer[position] {
								case '_':
									if buffer[position] != rune('_') {
										goto l151
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l151
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l151
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l151
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l151
									}
									position++
								}
							}

							goto l150
						l151:
							position, tokenIndex = position151, tokenIndex151
						}
						add(ruleText, position149)
					}
					goto l147
				l148:
					position, tokenIndex = position147, tokenIndex147
					{
						position154 := position
						if !_rules[ruleQUOTE]() {
							goto l145
						}
					l155:
						{
							position156, tokenIndex156 := position, tokenIndex
							{
								switch buffer[position] {
								case ' ':
									if buffer[position] != rune(' ') {
										goto l156
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l156
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l156
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l156
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l156
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l156
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l156
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l156
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l156
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l156
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l156
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l156
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l156
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l156
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l156
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l156
									}
									position++
								case ',':
									if buffer[position] != rune(',') {
										goto l156
									}
									position++
								case '.':
									if buffer[position] != rune('.') {
										goto l156
									}
									position++
								case '_':
									if buffer[position] != rune('_') {
										goto l156
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l156
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l156
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l156
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l156
									}
									position++
								}
							}

							goto l155
						l156:
							position, tokenIndex = position156, tokenIndex156
						}
						if !_rules[ruleQUOTE]() {
							goto l145
						}
						add(ruleQuotedText, position154)
					}
				}
			l147:
				if !_rules[rule_]() {
					goto l145
				}
				add(ruleStringLike, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 19 Boolean <- <(TRUE / FALSE)> */
		func() bool {
			position158, tokenIndex158 := position, tokenIndex
			{
				position159 := position
				{
					position160, tokenIndex160 := position, tokenIndex
					{
						position162 := position
						if buffer[position] != rune('t') {
							goto l161
						}
						position++
						if buffer[position] != rune('r') {
							goto l161
						}
						position++
						if buffer[position] != rune('u') {
							goto l161
						}
						position++
						if buffer[position] != rune('e') {
							goto l161
						}
						position++
						if !_rules[rule_]() {
							goto l161
						}
						add(ruleTRUE, position162)
					}
					goto l160
				l161:
					position, tokenIndex = position160, tokenIndex160
					{
						position163 := position
						if buffer[position] != rune('f') {
							goto l158
						}
						position++
						if buffer[position] != rune('a') {
							goto l158
						}
						position++
						if buffer[position] != rune('l') {
							goto l158
						}
						position++
						if buffer[position] != rune('s') {
							goto l158
						}
						position++
						if buffer[position] != rune('e') {
							goto l158
						}
						position++
						if !_rules[rule_]() {
							goto l158
						}
						add(ruleFALSE, position163)
					}
				}
			l160:
				add(ruleBoolean, position159)
			}
			return true
		l158:
			position, tokenIndex = position158, tokenIndex158
			return false
		},
		/* 20 Text <- <((&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))+> */
		nil,
		/* 21 QuotedText <- <(QUOTE ((&(' ') ' ') | (&('~') '~') | (&('=') '=') | (&('+') '+') | (&(']') ']') | (&('[') '[') | (&(')') ')') | (&('(') '(') | (&('*') '*') | (&('&') '&') | (&('^') '^') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('@') '@') | (&('!') '!') | (&(',') ',') | (&('.') '.') | (&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))* QUOTE)> */
		nil,
		/* 22 ItemType <- <(DATABASE / BLOBSTORE / ((&('c') CODE) | (&('d') DEVICE) | (&('s') SERVER) | (&('m') MOBILE) | (&('b') BROWSER) | (&('q') QUEUE) | (&('p') PERSON)))> */
		nil,
		/* 23 ItemExists <- <(ITEM_EXISTS / (Item EXISTS))> */
		nil,
		/* 24 RelExists <- <(REL_EXISTS / (Rel EXISTS))> */
		nil,
		/* 25 Item <- <ITEM> */
		func() bool {
			position169, tokenIndex169 := position, tokenIndex
			{
				position170 := position
				if !_rules[ruleITEM]() {
					goto l169
				}
				add(ruleItem, position170)
			}
			return true
		l169:
			position, tokenIndex = position169, tokenIndex169
			return false
		},
		/* 26 Rel <- <REL> */
		func() bool {
			position171, tokenIndex171 := position, tokenIndex
			{
				position172 := position
				if !_rules[ruleREL]() {
					goto l171
				}
				add(ruleRel, position172)
			}
			return true
		l171:
			position, tokenIndex = position171, tokenIndex171
			return false
		},
		/* 27 Keyword <- <(ITEM / ITEM_EXISTS / REL / IN / CREATE / FETCH / ((&('n') NEST) | (&('f') FREE) | (&('e') EXISTS) | (&('c') CLEAR) | (&('s') SET) | (&('d') DELETE) | (&('i') IN_QUERY) | (&('r') REL_EXISTS)))> */
		nil,
		/* 28 ITEM <- <('i' 't' 'e' 'm' _)> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if buffer[position] != rune('i') {
					goto l174
				}
				position++
				if buffer[position] != rune('t') {
					goto l174
				}
				position++
				if buffer[position] != rune('e') {
					goto l174
				}
				position++
				if buffer[position] != rune('m') {
					goto l174
				}
				position++
				if !_rules[rule_]() {
					goto l174
				}
				add(ruleITEM, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 29 ITEM_EXISTS <- <('i' 't' 'e' 'm' '?' _)> */
		func() bool {
			position176, tokenIndex176 := position, tokenIndex
			{
				position177 := position
				if buffer[position] != rune('i') {
					goto l176
				}
				position++
				if buffer[position] != rune('t') {
					goto l176
				}
				position++
				if buffer[position] != rune('e') {
					goto l176
				}
				position++
				if buffer[position] != rune('m') {
					goto l176
				}
				position++
				if buffer[position] != rune('?') {
					goto l176
				}
				position++
				if !_rules[rule_]() {
					goto l176
				}
				add(ruleITEM_EXISTS, position177)
			}
			return true
		l176:
			position, tokenIndex = position176, tokenIndex176
			return false
		},
		/* 30 REL <- <('r' 'e' 'l' _)> */
		func() bool {
			position178, tokenIndex178 := position, tokenIndex
			{
				position179 := position
				if buffer[position] != rune('r') {
					goto l178
				}
				position++
				if buffer[position] != rune('e') {
					goto l178
				}
				position++
				if buffer[position] != rune('l') {
					goto l178
				}
				position++
				if !_rules[rule_]() {
					goto l178
				}
				add(ruleREL, position179)
			}
			return true
		l178:
			position, tokenIndex = position178, tokenIndex178
			return false
		},
		/* 31 REL_EXISTS <- <('r' 'e' 'l' '?' _)> */
		func() bool {
			position180, tokenIndex180 := position, tokenIndex
			{
				position181 := position
				if buffer[position] != rune('r') {
					goto l180
				}
				position++
				if buffer[position] != rune('e') {
					goto l180
				}
				position++
				if buffer[position] != rune('l') {
					goto l180
				}
				position++
				if buffer[position] != rune('?') {
					goto l180
				}
				position++
				if !_rules[rule_]() {
					goto l180
				}
				add(ruleREL_EXISTS, position181)
			}
			return true
		l180:
			position, tokenIndex = position180, tokenIndex180
			return false
		},
		/* 32 IN <- <('i' 'n' _)> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				if buffer[position] != rune('i') {
					goto l182
				}
				position++
				if buffer[position] != rune('n') {
					goto l182
				}
				position++
				if !_rules[rule_]() {
					goto l182
				}
				add(ruleIN, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 33 IN_QUERY <- <('i' 'n' '?' _)> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				if buffer[position] != rune('i') {
					goto l184
				}
				position++
				if buffer[position] != rune('n') {
					goto l184
				}
				position++
				if buffer[position] != rune('?') {
					goto l184
				}
				position++
				if !_rules[rule_]() {
					goto l184
				}
				add(ruleIN_QUERY, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 34 CREATE <- <('c' 'r' 'e' 'a' 't' 'e' _)> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				if buffer[position] != rune('c') {
					goto l186
				}
				position++
				if buffer[position] != rune('r') {
					goto l186
				}
				position++
				if buffer[position] != rune('e') {
					goto l186
				}
				position++
				if buffer[position] != rune('a') {
					goto l186
				}
				position++
				if buffer[position] != rune('t') {
					goto l186
				}
				position++
				if buffer[position] != rune('e') {
					goto l186
				}
				position++
				if !_rules[rule_]() {
					goto l186
				}
				add(ruleCREATE, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 35 DELETE <- <('d' 'e' 'l' 'e' 't' 'e' _)> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				if buffer[position] != rune('d') {
					goto l188
				}
				position++
				if buffer[position] != rune('e') {
					goto l188
				}
				position++
				if buffer[position] != rune('l') {
					goto l188
				}
				position++
				if buffer[position] != rune('e') {
					goto l188
				}
				position++
				if buffer[position] != rune('t') {
					goto l188
				}
				position++
				if buffer[position] != rune('e') {
					goto l188
				}
				position++
				if !_rules[rule_]() {
					goto l188
				}
				add(ruleDELETE, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 36 SET <- <('s' 'e' 't' _)> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if buffer[position] != rune('s') {
					goto l190
				}
				position++
				if buffer[position] != rune('e') {
					goto l190
				}
				position++
				if buffer[position] != rune('t') {
					goto l190
				}
				position++
				if !_rules[rule_]() {
					goto l190
				}
				add(ruleSET, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 37 CLEAR <- <('c' 'l' 'e' 'a' 'r' _)> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				if buffer[position] != rune('c') {
					goto l192
				}
				position++
				if buffer[position] != rune('l') {
					goto l192
				}
				position++
				if buffer[position] != rune('e') {
					goto l192
				}
				position++
				if buffer[position] != rune('a') {
					goto l192
				}
				position++
				if buffer[position] != rune('r') {
					goto l192
				}
				position++
				if !_rules[rule_]() {
					goto l192
				}
				add(ruleCLEAR, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 38 FETCH <- <('f' 'e' 't' 'c' 'h' _)> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				if buffer[position] != rune('f') {
					goto l194
				}
				position++
				if buffer[position] != rune('e') {
					goto l194
				}
				position++
				if buffer[position] != rune('t') {
					goto l194
				}
				position++
				if buffer[position] != rune('c') {
					goto l194
				}
				position++
				if buffer[position] != rune('h') {
					goto l194
				}
				position++
				if !_rules[rule_]() {
					goto l194
				}
				add(ruleFETCH, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 39 EXISTS <- <('e' 'x' 'i' 's' 't' 's' _)> */
		func() bool {
			position196, tokenIndex196 := position, tokenIndex
			{
				position197 := position
				if buffer[position] != rune('e') {
					goto l196
				}
				position++
				if buffer[position] != rune('x') {
					goto l196
				}
				position++
				if buffer[position] != rune('i') {
					goto l196
				}
				position++
				if buffer[position] != rune('s') {
					goto l196
				}
				position++
				if buffer[position] != rune('t') {
					goto l196
				}
				position++
				if buffer[position] != rune('s') {
					goto l196
				}
				position++
				if !_rules[rule_]() {
					goto l196
				}
				add(ruleEXISTS, position197)
			}
			return true
		l196:
			position, tokenIndex = position196, tokenIndex196
			return false
		},
		/* 40 FREE <- <('f' 'r' 'e' 'e' _)> */
		func() bool {
			position198, tokenIndex198 := position, tokenIndex
			{
				position199 := position
				if buffer[position] != rune('f') {
					goto l198
				}
				position++
				if buffer[position] != rune('r') {
					goto l198
				}
				position++
				if buffer[position] != rune('e') {
					goto l198
				}
				position++
				if buffer[position] != rune('e') {
					goto l198
				}
				position++
				if !_rules[rule_]() {
					goto l198
				}
				add(ruleFREE, position199)
			}
			return true
		l198:
			position, tokenIndex = position198, tokenIndex198
			return false
		},
		/* 41 NEST <- <('n' 'e' 's' 't' _)> */
		func() bool {
			position200, tokenIndex200 := position, tokenIndex
			{
				position201 := position
				if buffer[position] != rune('n') {
					goto l200
				}
				position++
				if buffer[position] != rune('e') {
					goto l200
				}
				position++
				if buffer[position] != rune('s') {
					goto l200
				}
				position++
				if buffer[position] != rune('t') {
					goto l200
				}
				position++
				if !_rules[rule_]() {
					goto l200
				}
				add(ruleNEST, position201)
			}
			return true
		l200:
			position, tokenIndex = position200, tokenIndex200
			return false
		},
		/* 42 TRUE <- <('t' 'r' 'u' 'e' _)> */
		nil,
		/* 43 FALSE <- <('f' 'a' 'l' 's' 'e' _)> */
		nil,
		/* 44 EXTERNAL <- <('e' 'x' 't' 'e' 'r' 'n' 'a' 'l')> */
		func() bool {
			position204, tokenIndex204 := position, tokenIndex
			{
				position205 := position
				if buffer[position] != rune('e') {
					goto l204
				}
				position++
				if buffer[position] != rune('x') {
					goto l204
				}
				position++
				if buffer[position] != rune('t') {
					goto l204
				}
				position++
				if buffer[position] != rune('e') {
					goto l204
				}
				position++
				if buffer[position] != rune('r') {
					goto l204
				}
				position++
				if buffer[position] != rune('n') {
					goto l204
				}
				position++
				if buffer[position] != rune('a') {
					goto l204
				}
				position++
				if buffer[position] != rune('l') {
					goto l204
				}
				position++
				add(ruleEXTERNAL, position205)
			}
			return true
		l204:
			position, tokenIndex = position204, tokenIndex204
			return false
		},
		/* 45 NAME <- <('n' 'a' 'm' 'e')> */
		func() bool {
			position206, tokenIndex206 := position, tokenIndex
			{
				position207 := position
				if buffer[position] != rune('n') {
					goto l206
				}
				position++
				if buffer[position] != rune('a') {
					goto l206
				}
				position++
				if buffer[position] != rune('m') {
					goto l206
				}
				position++
				if buffer[position] != rune('e') {
					goto l206
				}
				position++
				add(ruleNAME, position207)
			}
			return true
		l206:
			position, tokenIndex = position206, tokenIndex206
			return false
		},
		/* 46 TYPE <- <('t' 'y' 'p' 'e')> */
		func() bool {
			position208, tokenIndex208 := position, tokenIndex
			{
				position209 := position
				if buffer[position] != rune('t') {
					goto l208
				}
				position++
				if buffer[position] != rune('y') {
					goto l208
				}
				position++
				if buffer[position] != rune('p') {
					goto l208
				}
				position++
				if buffer[position] != rune('e') {
					goto l208
				}
				position++
				add(ruleTYPE, position209)
			}
			return true
		l208:
			position, tokenIndex = position208, tokenIndex208
			return false
		},
		/* 47 VERB <- <('v' 'e' 'r' 'b')> */
		func() bool {
			position210, tokenIndex210 := position, tokenIndex
			{
				position211 := position
				if buffer[position] != rune('v') {
					goto l210
				}
				position++
				if buffer[position] != rune('e') {
					goto l210
				}
				position++
				if buffer[position] != rune('r') {
					goto l210
				}
				position++
				if buffer[position] != rune('b') {
					goto l210
				}
				position++
				add(ruleVERB, position211)
			}
			return true
		l210:
			position, tokenIndex = position210, tokenIndex210
			return false
		},
		/* 48 MECHANISM <- <('m' 'e' 'c' 'h' 'a' 'n' 'i' 's' 'm')> */
		func() bool {
			position212, tokenIndex212 := position, tokenIndex
			{
				position213 := position
				if buffer[position] != rune('m') {
					goto l212
				}
				position++
				if buffer[position] != rune('e') {
					goto l212
				}
				position++
				if buffer[position] != rune('c') {
					goto l212
				}
				position++
				if buffer[position] != rune('h') {
					goto l212
				}
				position++
				if buffer[position] != rune('a') {
					goto l212
				}
				position++
				if buffer[position] != rune('n') {
					goto l212
				}
				position++
				if buffer[position] != rune('i') {
					goto l212
				}
				position++
				if buffer[position] != rune('s') {
					goto l212
				}
				position++
				if buffer[position] != rune('m') {
					goto l212
				}
				position++
				add(ruleMECHANISM, position213)
			}
			return true
		l212:
			position, tokenIndex = position212, tokenIndex212
			return false
		},
		/* 49 ASYNC <- <('a' 's' 'y' 'n' 'c')> */
		func() bool {
			position214, tokenIndex214 := position, tokenIndex
			{
				position215 := position
				if buffer[position] != rune('a') {
					goto l214
				}
				position++
				if buffer[position] != rune('s') {
					goto l214
				}
				position++
				if buffer[position] != rune('y') {
					goto l214
				}
				position++
				if buffer[position] != rune('n') {
					goto l214
				}
				position++
				if buffer[position] != rune('c') {
					goto l214
				}
				position++
				add(ruleASYNC, position215)
			}
			return true
		l214:
			position, tokenIndex = position214, tokenIndex214
			return false
		},
		/* 50 EXPANDED <- <('e' 'x' 'p' 'a' 'n' 'd' 'e' 'd')> */
		func() bool {
			position216, tokenIndex216 := position, tokenIndex
			{
				position217 := position
				if buffer[position] != rune('e') {
					goto l216
				}
				position++
				if buffer[position] != rune('x') {
					goto l216
				}
				position++
				if buffer[position] != rune('p') {
					goto l216
				}
				position++
				if buffer[position] != rune('a') {
					goto l216
				}
				position++
				if buffer[position] != rune('n') {
					goto l216
				}
				position++
				if buffer[position] != rune('d') {
					goto l216
				}
				position++
				if buffer[position] != rune('e') {
					goto l216
				}
				position++
				if buffer[position] != rune('d') {
					goto l216
				}
				position++
				add(ruleEXPANDED, position217)
			}
			return true
		l216:
			position, tokenIndex = position216, tokenIndex216
			return false
		},
		/* 51 PERSON <- <('p' 'e' 'r' 's' 'o' 'n' _)> */
		nil,
		/* 52 DATABASE <- <('d' 'a' 't' 'a' 'b' 'a' 's' 'e' _)> */
		nil,
		/* 53 QUEUE <- <('q' 'u' 'e' 'u' 'e' _)> */
		nil,
		/* 54 BLOBSTORE <- <('b' 'l' 'o' 'b' 's' 't' 'o' 'r' 'e' _)> */
		nil,
		/* 55 BROWSER <- <('b' 'r' 'o' 'w' 's' 'e' 'r' _)> */
		nil,
		/* 56 MOBILE <- <('m' 'o' 'b' 'i' 'l' 'e' _)> */
		nil,
		/* 57 SERVER <- <('s' 'e' 'r' 'v' 'e' 'r' _)> */
		nil,
		/* 58 DEVICE <- <('d' 'e' 'v' 'i' 'c' 'e' _)> */
		nil,
		/* 59 CODE <- <('c' 'o' 'd' 'e' _)> */
		nil,
		/* 60 QUOTE <- <'"'> */
		func() bool {
			position227, tokenIndex227 := position, tokenIndex
			{
				position228 := position
				if buffer[position] != rune('"') {
					goto l227
				}
				position++
				add(ruleQUOTE, position228)
			}
			return true
		l227:
			position, tokenIndex = position227, tokenIndex227
			return false
		},
		/* 61 EQUALS <- <'='> */
		func() bool {
			position229, tokenIndex229 := position, tokenIndex
			{
				position230 := position
				if buffer[position] != rune('=') {
					goto l229
				}
				position++
				add(ruleEQUALS, position230)
			}
			return true
		l229:
			position, tokenIndex = position229, tokenIndex229
			return false
		},
		/* 62 _ <- <Whitespace*> */
		func() bool {
			{
				position232 := position
			l233:
				{
					position234, tokenIndex234 := position, tokenIndex
					{
						position235 := position
						{
							switch buffer[position] {
							case '\t':
								if buffer[position] != rune('\t') {
									goto l234
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l234
								}
								position++
							default:
								{
									position237 := position
									{
										position238, tokenIndex238 := position, tokenIndex
										if buffer[position] != rune('\r') {
											goto l239
										}
										position++
										if buffer[position] != rune('\n') {
											goto l239
										}
										position++
										goto l238
									l239:
										position, tokenIndex = position238, tokenIndex238
										if buffer[position] != rune('\n') {
											goto l240
										}
										position++
										goto l238
									l240:
										position, tokenIndex = position238, tokenIndex238
										if buffer[position] != rune('\r') {
											goto l234
										}
										position++
									}
								l238:
									add(ruleEOL, position237)
								}
							}
						}

						add(ruleWhitespace, position235)
					}
					goto l233
				l234:
					position, tokenIndex = position234, tokenIndex234
				}
				add(rule_, position232)
			}
			return true
		},
		/* 63 Whitespace <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') EOL))> */
		nil,
		/* 64 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		nil,
		/* 65 END <- <!.> */
		nil,
	}
	p.rules = _rules
	return nil
}
