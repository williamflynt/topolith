package grammar

// Code generated by peg -inline -switch -strict -output grammar.peg.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleValid
	ruleResponse
	ruleCommand
	ruleMutation
	ruleQuery
	ruleFetchQuery
	ruleExistsQuery
	ruleStateBound
	ruleCreateOrFetch
	ruleCreateOrSet
	ruleObject
	ruleWorldObject
	ruleItemObject
	ruleRelObject
	ruleIdsList
	ruleDualIdentifier
	ruleIdentifier
	ruleItemParams
	ruleRelParams
	ruleItemParam
	ruleRelParam
	ruleItemKeys
	ruleRelKeys
	ruleItemKey
	ruleRelKey
	ruleError
	ruleStringLike
	ruleBoolean
	ruleText
	ruleQuotedText
	ruleItemsList
	ruleRelsList
	ruleNumber
	ruleItemType
	ruleItemExists
	ruleRelExists
	ruleItem
	ruleRel
	ruleFlag
	ruleStrictFlag
	ruleVerboseFlag
	ruleIdsFlag
	ruleKeyword
	ruleWORLD
	ruleENDWORLD
	ruleERROR
	ruleITEM
	ruleITEM_EXISTS
	ruleREL
	ruleREL_EXISTS
	ruleFROM_QUERY
	ruleTO_QUERY
	ruleIN
	ruleIN_QUERY
	ruleCREATE
	ruleDELETE
	ruleSET
	ruleCLEAR
	ruleFETCH
	ruleLIST
	ruleEXISTS
	ruleFREE
	ruleNEST
	ruleTRUE
	ruleFALSE
	ruleEXTERNAL
	ruleNAME
	ruleTYPE
	ruleVERB
	ruleMECHANISM
	ruleASYNC
	ruleEXPANDED
	rulePERSON
	ruleDATABASE
	ruleQUEUE
	ruleBLOBSTORE
	ruleBROWSER
	ruleMOBILE
	ruleSERVER
	ruleDEVICE
	ruleCODE
	ruleQUOTE
	ruleEQUALS
	ruleFLAG
	ruleSTRICT
	ruleVERBOSE
	ruleIDS
	rule_
	ruleWhitespace
	ruleEOL
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"Valid",
	"Response",
	"Command",
	"Mutation",
	"Query",
	"FetchQuery",
	"ExistsQuery",
	"StateBound",
	"CreateOrFetch",
	"CreateOrSet",
	"Object",
	"WorldObject",
	"ItemObject",
	"RelObject",
	"IdsList",
	"DualIdentifier",
	"Identifier",
	"ItemParams",
	"RelParams",
	"ItemParam",
	"RelParam",
	"ItemKeys",
	"RelKeys",
	"ItemKey",
	"RelKey",
	"Error",
	"StringLike",
	"Boolean",
	"Text",
	"QuotedText",
	"ItemsList",
	"RelsList",
	"Number",
	"ItemType",
	"ItemExists",
	"RelExists",
	"Item",
	"Rel",
	"Flag",
	"StrictFlag",
	"VerboseFlag",
	"IdsFlag",
	"Keyword",
	"WORLD",
	"ENDWORLD",
	"ERROR",
	"ITEM",
	"ITEM_EXISTS",
	"REL",
	"REL_EXISTS",
	"FROM_QUERY",
	"TO_QUERY",
	"IN",
	"IN_QUERY",
	"CREATE",
	"DELETE",
	"SET",
	"CLEAR",
	"FETCH",
	"LIST",
	"EXISTS",
	"FREE",
	"NEST",
	"TRUE",
	"FALSE",
	"EXTERNAL",
	"NAME",
	"TYPE",
	"VERB",
	"MECHANISM",
	"ASYNC",
	"EXPANDED",
	"PERSON",
	"DATABASE",
	"QUEUE",
	"BLOBSTORE",
	"BROWSER",
	"MOBILE",
	"SERVER",
	"DEVICE",
	"CODE",
	"QUOTE",
	"EQUALS",
	"FLAG",
	"STRICT",
	"VERBOSE",
	"IDS",
	"_",
	"Whitespace",
	"EOL",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	InputAttributes

	Buffer string
	buffer []rune
	rules  [92]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Valid <- <(Command / Response)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						if !_rules[rule_]() {
							goto l3
						}
						{
							position5, tokenIndex5 := position, tokenIndex
							{
								position7 := position
								{
									position8, tokenIndex8 := position, tokenIndex
									if !_rules[ruleItem]() {
										goto l9
									}
									{
										position10, tokenIndex10 := position, tokenIndex
										if !_rules[ruleCREATE]() {
											goto l11
										}
										goto l10
									l11:
										position, tokenIndex = position10, tokenIndex10
										if !_rules[ruleSET]() {
											goto l9
										}
									}
								l10:
									if !_rules[ruleIdentifier]() {
										goto l9
									}
									{
										position12, tokenIndex12 := position, tokenIndex
										if !_rules[ruleItemParams]() {
											goto l12
										}
										goto l13
									l12:
										position, tokenIndex = position12, tokenIndex12
									}
								l13:
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleItem]() {
										goto l14
									}
									if !_rules[ruleCLEAR]() {
										goto l14
									}
									if !_rules[ruleIdentifier]() {
										goto l14
									}
									{
										position15 := position
										{
											position18 := position
											{
												position19, tokenIndex19 := position, tokenIndex
												if !_rules[ruleEXTERNAL]() {
													goto l20
												}
												goto l19
											l20:
												position, tokenIndex = position19, tokenIndex19
												{
													switch buffer[position] {
													case 'e':
														if !_rules[ruleEXPANDED]() {
															goto l14
														}
													case 'm':
														if !_rules[ruleMECHANISM]() {
															goto l14
														}
													case 't':
														if !_rules[ruleTYPE]() {
															goto l14
														}
													default:
														if !_rules[ruleNAME]() {
															goto l14
														}
													}
												}

											}
										l19:
											if !_rules[rule_]() {
												goto l14
											}
											add(ruleItemKey, position18)
										}
									l16:
										{
											position17, tokenIndex17 := position, tokenIndex
											{
												position22 := position
												{
													position23, tokenIndex23 := position, tokenIndex
													if !_rules[ruleEXTERNAL]() {
														goto l24
													}
													goto l23
												l24:
													position, tokenIndex = position23, tokenIndex23
													{
														switch buffer[position] {
														case 'e':
															if !_rules[ruleEXPANDED]() {
																goto l17
															}
														case 'm':
															if !_rules[ruleMECHANISM]() {
																goto l17
															}
														case 't':
															if !_rules[ruleTYPE]() {
																goto l17
															}
														default:
															if !_rules[ruleNAME]() {
																goto l17
															}
														}
													}

												}
											l23:
												if !_rules[rule_]() {
													goto l17
												}
												add(ruleItemKey, position22)
											}
											goto l16
										l17:
											position, tokenIndex = position17, tokenIndex17
										}
										add(ruleItemKeys, position15)
									}
									goto l8
								l14:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleRel]() {
										goto l26
									}
									{
										position27, tokenIndex27 := position, tokenIndex
										if !_rules[ruleCREATE]() {
											goto l28
										}
										goto l27
									l28:
										position, tokenIndex = position27, tokenIndex27
										if !_rules[ruleSET]() {
											goto l26
										}
									}
								l27:
									if !_rules[ruleDualIdentifier]() {
										goto l26
									}
									{
										position29, tokenIndex29 := position, tokenIndex
										if !_rules[ruleRelParams]() {
											goto l29
										}
										goto l30
									l29:
										position, tokenIndex = position29, tokenIndex29
									}
								l30:
									goto l8
								l26:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleRel]() {
										goto l31
									}
									if !_rules[ruleCLEAR]() {
										goto l31
									}
									if !_rules[ruleDualIdentifier]() {
										goto l31
									}
									{
										position32 := position
										{
											position35 := position
											{
												switch buffer[position] {
												case 'e':
													if !_rules[ruleEXPANDED]() {
														goto l31
													}
												case 'a':
													if !_rules[ruleASYNC]() {
														goto l31
													}
												case 'm':
													if !_rules[ruleMECHANISM]() {
														goto l31
													}
												default:
													if !_rules[ruleVERB]() {
														goto l31
													}
												}
											}

											if !_rules[rule_]() {
												goto l31
											}
											add(ruleRelKey, position35)
										}
									l33:
										{
											position34, tokenIndex34 := position, tokenIndex
											{
												position37 := position
												{
													switch buffer[position] {
													case 'e':
														if !_rules[ruleEXPANDED]() {
															goto l34
														}
													case 'a':
														if !_rules[ruleASYNC]() {
															goto l34
														}
													case 'm':
														if !_rules[ruleMECHANISM]() {
															goto l34
														}
													default:
														if !_rules[ruleVERB]() {
															goto l34
														}
													}
												}

												if !_rules[rule_]() {
													goto l34
												}
												add(ruleRelKey, position37)
											}
											goto l33
										l34:
											position, tokenIndex = position34, tokenIndex34
										}
										add(ruleRelKeys, position32)
									}
									goto l8
								l31:
									position, tokenIndex = position8, tokenIndex8
									{
										switch buffer[position] {
										case 'f':
											if !_rules[ruleFREE]() {
												goto l6
											}
											if !_rules[ruleIdentifier]() {
												goto l6
											}
										l40:
											{
												position41, tokenIndex41 := position, tokenIndex
												if !_rules[ruleIdentifier]() {
													goto l41
												}
												goto l40
											l41:
												position, tokenIndex = position41, tokenIndex41
											}
										case 'n':
											if !_rules[ruleNEST]() {
												goto l6
											}
											if !_rules[ruleIdentifier]() {
												goto l6
											}
										l42:
											{
												position43, tokenIndex43 := position, tokenIndex
												if !_rules[ruleIdentifier]() {
													goto l43
												}
												goto l42
											l43:
												position, tokenIndex = position43, tokenIndex43
											}
											if !_rules[ruleIN]() {
												goto l6
											}
											if !_rules[ruleIdentifier]() {
												goto l6
											}
										case 'r':
											if !_rules[ruleRel]() {
												goto l6
											}
											if !_rules[ruleDELETE]() {
												goto l6
											}
											if !_rules[ruleDualIdentifier]() {
												goto l6
											}
										default:
											if !_rules[ruleItem]() {
												goto l6
											}
											if !_rules[ruleDELETE]() {
												goto l6
											}
											if !_rules[ruleIdentifier]() {
												goto l6
											}
										}
									}

								}
							l8:
								add(ruleMutation, position7)
							}
							goto l5
						l6:
							position, tokenIndex = position5, tokenIndex5
							{
								position45 := position
								{
									position46, tokenIndex46 := position, tokenIndex
									{
										position48 := position
										{
											position49, tokenIndex49 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l50
											}
											if !_rules[ruleFETCH]() {
												goto l50
											}
											if !_rules[ruleIdentifier]() {
												goto l50
											}
											goto l49
										l50:
											position, tokenIndex = position49, tokenIndex49
											{
												position52 := position
												if !_rules[ruleItem]() {
													goto l51
												}
												if !_rules[ruleLIST]() {
													goto l51
												}
												{
													position53, tokenIndex53 := position, tokenIndex
													if !_rules[ruleNumber]() {
														goto l53
													}
													goto l54
												l53:
													position, tokenIndex = position53, tokenIndex53
												}
											l54:
												add(ruleItemsList, position52)
											}
											goto l49
										l51:
											position, tokenIndex = position49, tokenIndex49
											if !_rules[ruleRel]() {
												goto l55
											}
											if !_rules[ruleFETCH]() {
												goto l55
											}
											if !_rules[ruleDualIdentifier]() {
												goto l55
											}
											goto l49
										l55:
											position, tokenIndex = position49, tokenIndex49
											if !_rules[ruleRel]() {
												goto l56
											}
											if !_rules[ruleIdentifier]() {
												goto l56
											}
											{
												position57, tokenIndex57 := position, tokenIndex
												if !_rules[ruleIdentifier]() {
													goto l57
												}
												goto l56
											l57:
												position, tokenIndex = position57, tokenIndex57
											}
											goto l49
										l56:
											position, tokenIndex = position49, tokenIndex49
											if !_rules[ruleIN_QUERY]() {
												goto l58
											}
											if !_rules[ruleIdentifier]() {
												goto l58
											}
											goto l49
										l58:
											position, tokenIndex = position49, tokenIndex49
											{
												switch buffer[position] {
												case 'w':
													if !_rules[ruleWORLD]() {
														goto l47
													}
												case 'i':
													if !_rules[ruleItem]() {
														goto l47
													}
													if !_rules[ruleIN]() {
														goto l47
													}
													if !_rules[ruleIdentifier]() {
														goto l47
													}
												default:
													{
														position60 := position
														if !_rules[ruleRel]() {
															goto l47
														}
														if !_rules[ruleLIST]() {
															goto l47
														}
														{
															position61, tokenIndex61 := position, tokenIndex
															if !_rules[ruleNumber]() {
																goto l61
															}
															goto l62
														l61:
															position, tokenIndex = position61, tokenIndex61
														}
													l62:
														add(ruleRelsList, position60)
													}
												}
											}

										}
									l49:
										add(ruleFetchQuery, position48)
									}
									goto l46
								l47:
									position, tokenIndex = position46, tokenIndex46
									{
										position63 := position
										{
											position64, tokenIndex64 := position, tokenIndex
											{
												position66 := position
												{
													position67, tokenIndex67 := position, tokenIndex
													if !_rules[ruleITEM_EXISTS]() {
														goto l68
													}
													goto l67
												l68:
													position, tokenIndex = position67, tokenIndex67
													if !_rules[ruleItem]() {
														goto l65
													}
													if !_rules[ruleEXISTS]() {
														goto l65
													}
												}
											l67:
												add(ruleItemExists, position66)
											}
											if !_rules[ruleIdentifier]() {
												goto l65
											}
											goto l64
										l65:
											position, tokenIndex = position64, tokenIndex64
											{
												position69 := position
												{
													position70, tokenIndex70 := position, tokenIndex
													if !_rules[ruleREL_EXISTS]() {
														goto l71
													}
													goto l70
												l71:
													position, tokenIndex = position70, tokenIndex70
													if !_rules[ruleRel]() {
														goto l44
													}
													if !_rules[ruleEXISTS]() {
														goto l44
													}
												}
											l70:
												add(ruleRelExists, position69)
											}
											if !_rules[ruleDualIdentifier]() {
												goto l44
											}
										}
									l64:
										add(ruleExistsQuery, position63)
									}
								}
							l46:
								add(ruleQuery, position45)
							}
							goto l5
						l44:
							position, tokenIndex = position5, tokenIndex5
							{
								position72 := position
								{
									position73, tokenIndex73 := position, tokenIndex
									{
										position75 := position
										{
											position76, tokenIndex76 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l77
											}
											if !_rules[ruleIdentifier]() {
												goto l77
											}
											{
												position78, tokenIndex78 := position, tokenIndex
												if !_rules[ruleItemParams]() {
													goto l78
												}
												goto l77
											l78:
												position, tokenIndex = position78, tokenIndex78
											}
											goto l76
										l77:
											position, tokenIndex = position76, tokenIndex76
											if !_rules[ruleRel]() {
												goto l74
											}
											if !_rules[ruleDualIdentifier]() {
												goto l74
											}
											{
												position79, tokenIndex79 := position, tokenIndex
												if !_rules[ruleRelParams]() {
													goto l79
												}
												goto l74
											l79:
												position, tokenIndex = position79, tokenIndex79
											}
										}
									l76:
										add(ruleCreateOrFetch, position75)
									}
									goto l73
								l74:
									position, tokenIndex = position73, tokenIndex73
									{
										position80 := position
										{
											position81, tokenIndex81 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l82
											}
											if !_rules[ruleIdentifier]() {
												goto l82
											}
											if !_rules[ruleItemParams]() {
												goto l82
											}
											goto l81
										l82:
											position, tokenIndex = position81, tokenIndex81
											if !_rules[ruleRel]() {
												goto l3
											}
											if !_rules[ruleDualIdentifier]() {
												goto l3
											}
											if !_rules[ruleRelParams]() {
												goto l3
											}
										}
									l81:
										add(ruleCreateOrSet, position80)
									}
								}
							l73:
								add(ruleStateBound, position72)
							}
						}
					l5:
					l83:
						{
							position84, tokenIndex84 := position, tokenIndex
							{
								position85 := position
								{
									position86, tokenIndex86 := position, tokenIndex
									{
										position88 := position
										if !_rules[ruleFLAG]() {
											goto l87
										}
										{
											position89 := position
											if buffer[position] != rune('s') {
												goto l87
											}
											position++
											if buffer[position] != rune('t') {
												goto l87
											}
											position++
											if buffer[position] != rune('r') {
												goto l87
											}
											position++
											if buffer[position] != rune('i') {
												goto l87
											}
											position++
											if buffer[position] != rune('c') {
												goto l87
											}
											position++
											if buffer[position] != rune('t') {
												goto l87
											}
											position++
											if !_rules[rule_]() {
												goto l87
											}
											add(ruleSTRICT, position89)
										}
										add(ruleStrictFlag, position88)
									}
									goto l86
								l87:
									position, tokenIndex = position86, tokenIndex86
									{
										position91 := position
										if !_rules[ruleFLAG]() {
											goto l90
										}
										{
											position92 := position
											if buffer[position] != rune('v') {
												goto l90
											}
											position++
											if buffer[position] != rune('e') {
												goto l90
											}
											position++
											if buffer[position] != rune('r') {
												goto l90
											}
											position++
											if buffer[position] != rune('b') {
												goto l90
											}
											position++
											if buffer[position] != rune('o') {
												goto l90
											}
											position++
											if buffer[position] != rune('s') {
												goto l90
											}
											position++
											if buffer[position] != rune('e') {
												goto l90
											}
											position++
											if !_rules[rule_]() {
												goto l90
											}
											add(ruleVERBOSE, position92)
										}
										add(ruleVerboseFlag, position91)
									}
									goto l86
								l90:
									position, tokenIndex = position86, tokenIndex86
									{
										position93 := position
										if !_rules[ruleFLAG]() {
											goto l84
										}
										if !_rules[ruleIDS]() {
											goto l84
										}
										add(ruleIdsFlag, position93)
									}
								}
							l86:
								add(ruleFlag, position85)
							}
							goto l83
						l84:
							position, tokenIndex = position84, tokenIndex84
						}
						if !_rules[ruleEND]() {
							goto l3
						}
						add(ruleCommand, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position94 := position
						{
							position95, tokenIndex95 := position, tokenIndex
							{
								position97 := position
								{
									position98, tokenIndex98 := position, tokenIndex
									{
										position100 := position
										if !_rules[ruleItem]() {
											goto l99
										}
										if !_rules[ruleIdentifier]() {
											goto l99
										}
										{
											position101, tokenIndex101 := position, tokenIndex
											if !_rules[ruleItemParams]() {
												goto l101
											}
											goto l102
										l101:
											position, tokenIndex = position101, tokenIndex101
										}
									l102:
										add(ruleItemObject, position100)
									}
									goto l98
								l99:
									position, tokenIndex = position98, tokenIndex98
									{
										switch buffer[position] {
										case 'i':
											{
												position104 := position
												if !_rules[ruleIDS]() {
													goto l95
												}
											l105:
												{
													position106, tokenIndex106 := position, tokenIndex
													if !_rules[ruleStringLike]() {
														goto l106
													}
													goto l105
												l106:
													position, tokenIndex = position106, tokenIndex106
												}
												if !_rules[rule_]() {
													goto l95
												}
												add(ruleIdsList, position104)
											}
										case 'r':
											{
												position107 := position
												if !_rules[ruleRel]() {
													goto l95
												}
												if !_rules[ruleDualIdentifier]() {
													goto l95
												}
												{
													position108, tokenIndex108 := position, tokenIndex
													if !_rules[ruleRelParams]() {
														goto l108
													}
													goto l109
												l108:
													position, tokenIndex = position108, tokenIndex108
												}
											l109:
												add(ruleRelObject, position107)
											}
										default:
											{
												position110 := position
												if buffer[position] != rune('$') {
													goto l95
												}
												position++
												if buffer[position] != rune('$') {
													goto l95
												}
												position++
												if !_rules[ruleWORLD]() {
													goto l95
												}
											l111:
												{
													position112, tokenIndex112 := position, tokenIndex
													if !matchDot() {
														goto l112
													}
													goto l111
												l112:
													position, tokenIndex = position112, tokenIndex112
												}
												{
													position113 := position
													if buffer[position] != rune('e') {
														goto l95
													}
													position++
													if buffer[position] != rune('n') {
														goto l95
													}
													position++
													if buffer[position] != rune('d') {
														goto l95
													}
													position++
													if buffer[position] != rune('w') {
														goto l95
													}
													position++
													if buffer[position] != rune('o') {
														goto l95
													}
													position++
													if buffer[position] != rune('r') {
														goto l95
													}
													position++
													if buffer[position] != rune('l') {
														goto l95
													}
													position++
													if buffer[position] != rune('d') {
														goto l95
													}
													position++
													if !_rules[rule_]() {
														goto l95
													}
													add(ruleENDWORLD, position113)
												}
												if buffer[position] != rune('$') {
													goto l95
												}
												position++
												if buffer[position] != rune('$') {
													goto l95
												}
												position++
												add(ruleWorldObject, position110)
											}
										}
									}

								}
							l98:
								add(ruleObject, position97)
							}
							goto l96
						l95:
							position, tokenIndex = position95, tokenIndex95
						}
					l96:
						if !_rules[rule_]() {
							goto l0
						}
						if !_rules[ruleEOL]() {
							goto l0
						}
						{
							position114, tokenIndex114 := position, tokenIndex
							{
								position116 := position
								{
									position117 := position
									if buffer[position] != rune('e') {
										goto l114
									}
									position++
									if buffer[position] != rune('r') {
										goto l114
									}
									position++
									if buffer[position] != rune('r') {
										goto l114
									}
									position++
									if buffer[position] != rune('o') {
										goto l114
									}
									position++
									if buffer[position] != rune('r') {
										goto l114
									}
									position++
									if !_rules[rule_]() {
										goto l114
									}
									add(ruleERROR, position117)
								}
							l118:
								{
									position119, tokenIndex119 := position, tokenIndex
									if !_rules[ruleStringLike]() {
										goto l119
									}
									goto l118
								l119:
									position, tokenIndex = position119, tokenIndex119
								}
								add(ruleError, position116)
							}
							goto l115
						l114:
							position, tokenIndex = position114, tokenIndex114
						}
					l115:
						if !_rules[ruleEND]() {
							goto l0
						}
						add(ruleResponse, position94)
					}
				}
			l2:
				add(ruleValid, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Response <- <(Object? _ EOL Error? END)> */
		nil,
		/* 2 Command <- <(_ (Mutation / Query / StateBound) Flag* END)> */
		nil,
		/* 3 Mutation <- <((Item (CREATE / SET) Identifier ItemParams?) / (Item CLEAR Identifier ItemKeys) / (Rel (CREATE / SET) DualIdentifier RelParams?) / (Rel CLEAR DualIdentifier RelKeys) / ((&('f') (FREE Identifier+)) | (&('n') (NEST Identifier+ IN Identifier)) | (&('r') (Rel DELETE DualIdentifier)) | (&('i') (Item DELETE Identifier))))> */
		nil,
		/* 4 Query <- <(FetchQuery / ExistsQuery)> */
		nil,
		/* 5 FetchQuery <- <((Item FETCH Identifier) / ItemsList / (Rel FETCH DualIdentifier) / (Rel Identifier !Identifier) / (IN_QUERY Identifier) / ((&('w') WORLD) | (&('i') (Item IN Identifier)) | (&('r') RelsList)))> */
		nil,
		/* 6 ExistsQuery <- <((ItemExists Identifier) / (RelExists DualIdentifier))> */
		nil,
		/* 7 StateBound <- <(CreateOrFetch / CreateOrSet)> */
		nil,
		/* 8 CreateOrFetch <- <((Item Identifier !ItemParams) / (Rel DualIdentifier !RelParams))> */
		nil,
		/* 9 CreateOrSet <- <((Item Identifier ItemParams) / (Rel DualIdentifier RelParams))> */
		nil,
		/* 10 Object <- <(ItemObject / ((&('i') IdsList) | (&('r') RelObject) | (&('$') WorldObject)))> */
		nil,
		/* 11 WorldObject <- <('$' '$' WORLD .* ENDWORLD ('$' '$'))> */
		nil,
		/* 12 ItemObject <- <(Item Identifier ItemParams?)> */
		nil,
		/* 13 RelObject <- <(Rel DualIdentifier RelParams?)> */
		nil,
		/* 14 IdsList <- <(IDS StringLike* _)> */
		nil,
		/* 15 DualIdentifier <- <(Identifier Identifier)> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				if !_rules[ruleIdentifier]() {
					goto l134
				}
				if !_rules[ruleIdentifier]() {
					goto l134
				}
				add(ruleDualIdentifier, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
		/* 16 Identifier <- <(!Keyword StringLike)> */
		func() bool {
			position136, tokenIndex136 := position, tokenIndex
			{
				position137 := position
				{
					position138, tokenIndex138 := position, tokenIndex
					{
						position139 := position
						{
							position140, tokenIndex140 := position, tokenIndex
							if !_rules[ruleITEM]() {
								goto l141
							}
							goto l140
						l141:
							position, tokenIndex = position140, tokenIndex140
							if !_rules[ruleITEM_EXISTS]() {
								goto l142
							}
							goto l140
						l142:
							position, tokenIndex = position140, tokenIndex140
							if !_rules[ruleREL]() {
								goto l143
							}
							goto l140
						l143:
							position, tokenIndex = position140, tokenIndex140
							{
								position145 := position
								if buffer[position] != rune('f') {
									goto l144
								}
								position++
								if buffer[position] != rune('r') {
									goto l144
								}
								position++
								if buffer[position] != rune('o') {
									goto l144
								}
								position++
								if buffer[position] != rune('m') {
									goto l144
								}
								position++
								if buffer[position] != rune('?') {
									goto l144
								}
								position++
								if !_rules[rule_]() {
									goto l144
								}
								add(ruleFROM_QUERY, position145)
							}
							goto l140
						l144:
							position, tokenIndex = position140, tokenIndex140
							if !_rules[ruleIN]() {
								goto l146
							}
							goto l140
						l146:
							position, tokenIndex = position140, tokenIndex140
							if !_rules[ruleCREATE]() {
								goto l147
							}
							goto l140
						l147:
							position, tokenIndex = position140, tokenIndex140
							if !_rules[ruleFETCH]() {
								goto l148
							}
							goto l140
						l148:
							position, tokenIndex = position140, tokenIndex140
							{
								switch buffer[position] {
								case '-':
									if !_rules[ruleFLAG]() {
										goto l138
									}
								case 'n':
									if !_rules[ruleNEST]() {
										goto l138
									}
								case 'f':
									if !_rules[ruleFREE]() {
										goto l138
									}
								case 'e':
									if !_rules[ruleEXISTS]() {
										goto l138
									}
								case 'c':
									if !_rules[ruleCLEAR]() {
										goto l138
									}
								case 's':
									if !_rules[ruleSET]() {
										goto l138
									}
								case 'd':
									if !_rules[ruleDELETE]() {
										goto l138
									}
								case 'i':
									if !_rules[ruleIN_QUERY]() {
										goto l138
									}
								case 't':
									{
										position150 := position
										if buffer[position] != rune('t') {
											goto l138
										}
										position++
										if buffer[position] != rune('o') {
											goto l138
										}
										position++
										if buffer[position] != rune('?') {
											goto l138
										}
										position++
										if !_rules[rule_]() {
											goto l138
										}
										add(ruleTO_QUERY, position150)
									}
								default:
									if !_rules[ruleREL_EXISTS]() {
										goto l138
									}
								}
							}

						}
					l140:
						add(ruleKeyword, position139)
					}
					goto l136
				l138:
					position, tokenIndex = position138, tokenIndex138
				}
				if !_rules[ruleStringLike]() {
					goto l136
				}
				add(ruleIdentifier, position137)
			}
			return true
		l136:
			position, tokenIndex = position136, tokenIndex136
			return false
		},
		/* 17 ItemParams <- <ItemParam+> */
		func() bool {
			position151, tokenIndex151 := position, tokenIndex
			{
				position152 := position
				{
					position155 := position
					{
						position156, tokenIndex156 := position, tokenIndex
						if !_rules[ruleEXTERNAL]() {
							goto l157
						}
						if !_rules[ruleEQUALS]() {
							goto l157
						}
						if !_rules[ruleBoolean]() {
							goto l157
						}
						goto l156
					l157:
						position, tokenIndex = position156, tokenIndex156
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l151
								}
								if !_rules[ruleEQUALS]() {
									goto l151
								}
								if !_rules[ruleStringLike]() {
									goto l151
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l151
								}
								if !_rules[ruleEQUALS]() {
									goto l151
								}
								if !_rules[ruleStringLike]() {
									goto l151
								}
							case 'n':
								if !_rules[ruleNAME]() {
									goto l151
								}
								if !_rules[ruleEQUALS]() {
									goto l151
								}
								if !_rules[ruleStringLike]() {
									goto l151
								}
							default:
								if !_rules[ruleTYPE]() {
									goto l151
								}
								if !_rules[ruleEQUALS]() {
									goto l151
								}
								{
									position159 := position
									{
										position160, tokenIndex160 := position, tokenIndex
										{
											position162 := position
											if buffer[position] != rune('d') {
												goto l161
											}
											position++
											if buffer[position] != rune('a') {
												goto l161
											}
											position++
											if buffer[position] != rune('t') {
												goto l161
											}
											position++
											if buffer[position] != rune('a') {
												goto l161
											}
											position++
											if buffer[position] != rune('b') {
												goto l161
											}
											position++
											if buffer[position] != rune('a') {
												goto l161
											}
											position++
											if buffer[position] != rune('s') {
												goto l161
											}
											position++
											if buffer[position] != rune('e') {
												goto l161
											}
											position++
											if !_rules[rule_]() {
												goto l161
											}
											add(ruleDATABASE, position162)
										}
										goto l160
									l161:
										position, tokenIndex = position160, tokenIndex160
										{
											position164 := position
											if buffer[position] != rune('b') {
												goto l163
											}
											position++
											if buffer[position] != rune('l') {
												goto l163
											}
											position++
											if buffer[position] != rune('o') {
												goto l163
											}
											position++
											if buffer[position] != rune('b') {
												goto l163
											}
											position++
											if buffer[position] != rune('s') {
												goto l163
											}
											position++
											if buffer[position] != rune('t') {
												goto l163
											}
											position++
											if buffer[position] != rune('o') {
												goto l163
											}
											position++
											if buffer[position] != rune('r') {
												goto l163
											}
											position++
											if buffer[position] != rune('e') {
												goto l163
											}
											position++
											if !_rules[rule_]() {
												goto l163
											}
											add(ruleBLOBSTORE, position164)
										}
										goto l160
									l163:
										position, tokenIndex = position160, tokenIndex160
										{
											switch buffer[position] {
											case 'c':
												{
													position166 := position
													if buffer[position] != rune('c') {
														goto l151
													}
													position++
													if buffer[position] != rune('o') {
														goto l151
													}
													position++
													if buffer[position] != rune('d') {
														goto l151
													}
													position++
													if buffer[position] != rune('e') {
														goto l151
													}
													position++
													if !_rules[rule_]() {
														goto l151
													}
													add(ruleCODE, position166)
												}
											case 'd':
												{
													position167 := position
													if buffer[position] != rune('d') {
														goto l151
													}
													position++
													if buffer[position] != rune('e') {
														goto l151
													}
													position++
													if buffer[position] != rune('v') {
														goto l151
													}
													position++
													if buffer[position] != rune('i') {
														goto l151
													}
													position++
													if buffer[position] != rune('c') {
														goto l151
													}
													position++
													if buffer[position] != rune('e') {
														goto l151
													}
													position++
													if !_rules[rule_]() {
														goto l151
													}
													add(ruleDEVICE, position167)
												}
											case 's':
												{
													position168 := position
													if buffer[position] != rune('s') {
														goto l151
													}
													position++
													if buffer[position] != rune('e') {
														goto l151
													}
													position++
													if buffer[position] != rune('r') {
														goto l151
													}
													position++
													if buffer[position] != rune('v') {
														goto l151
													}
													position++
													if buffer[position] != rune('e') {
														goto l151
													}
													position++
													if buffer[position] != rune('r') {
														goto l151
													}
													position++
													if !_rules[rule_]() {
														goto l151
													}
													add(ruleSERVER, position168)
												}
											case 'm':
												{
													position169 := position
													if buffer[position] != rune('m') {
														goto l151
													}
													position++
													if buffer[position] != rune('o') {
														goto l151
													}
													position++
													if buffer[position] != rune('b') {
														goto l151
													}
													position++
													if buffer[position] != rune('i') {
														goto l151
													}
													position++
													if buffer[position] != rune('l') {
														goto l151
													}
													position++
													if buffer[position] != rune('e') {
														goto l151
													}
													position++
													if !_rules[rule_]() {
														goto l151
													}
													add(ruleMOBILE, position169)
												}
											case 'b':
												{
													position170 := position
													if buffer[position] != rune('b') {
														goto l151
													}
													position++
													if buffer[position] != rune('r') {
														goto l151
													}
													position++
													if buffer[position] != rune('o') {
														goto l151
													}
													position++
													if buffer[position] != rune('w') {
														goto l151
													}
													position++
													if buffer[position] != rune('s') {
														goto l151
													}
													position++
													if buffer[position] != rune('e') {
														goto l151
													}
													position++
													if buffer[position] != rune('r') {
														goto l151
													}
													position++
													if !_rules[rule_]() {
														goto l151
													}
													add(ruleBROWSER, position170)
												}
											case 'q':
												{
													position171 := position
													if buffer[position] != rune('q') {
														goto l151
													}
													position++
													if buffer[position] != rune('u') {
														goto l151
													}
													position++
													if buffer[position] != rune('e') {
														goto l151
													}
													position++
													if buffer[position] != rune('u') {
														goto l151
													}
													position++
													if buffer[position] != rune('e') {
														goto l151
													}
													position++
													if !_rules[rule_]() {
														goto l151
													}
													add(ruleQUEUE, position171)
												}
											default:
												{
													position172 := position
													if buffer[position] != rune('p') {
														goto l151
													}
													position++
													if buffer[position] != rune('e') {
														goto l151
													}
													position++
													if buffer[position] != rune('r') {
														goto l151
													}
													position++
													if buffer[position] != rune('s') {
														goto l151
													}
													position++
													if buffer[position] != rune('o') {
														goto l151
													}
													position++
													if buffer[position] != rune('n') {
														goto l151
													}
													position++
													if !_rules[rule_]() {
														goto l151
													}
													add(rulePERSON, position172)
												}
											}
										}

									}
								l160:
									add(ruleItemType, position159)
								}
							}
						}

					}
				l156:
					add(ruleItemParam, position155)
				}
			l153:
				{
					position154, tokenIndex154 := position, tokenIndex
					{
						position173 := position
						{
							position174, tokenIndex174 := position, tokenIndex
							if !_rules[ruleEXTERNAL]() {
								goto l175
							}
							if !_rules[ruleEQUALS]() {
								goto l175
							}
							if !_rules[ruleBoolean]() {
								goto l175
							}
							goto l174
						l175:
							position, tokenIndex = position174, tokenIndex174
							{
								switch buffer[position] {
								case 'e':
									if !_rules[ruleEXPANDED]() {
										goto l154
									}
									if !_rules[ruleEQUALS]() {
										goto l154
									}
									if !_rules[ruleStringLike]() {
										goto l154
									}
								case 'm':
									if !_rules[ruleMECHANISM]() {
										goto l154
									}
									if !_rules[ruleEQUALS]() {
										goto l154
									}
									if !_rules[ruleStringLike]() {
										goto l154
									}
								case 'n':
									if !_rules[ruleNAME]() {
										goto l154
									}
									if !_rules[ruleEQUALS]() {
										goto l154
									}
									if !_rules[ruleStringLike]() {
										goto l154
									}
								default:
									if !_rules[ruleTYPE]() {
										goto l154
									}
									if !_rules[ruleEQUALS]() {
										goto l154
									}
									{
										position177 := position
										{
											position178, tokenIndex178 := position, tokenIndex
											{
												position180 := position
												if buffer[position] != rune('d') {
													goto l179
												}
												position++
												if buffer[position] != rune('a') {
													goto l179
												}
												position++
												if buffer[position] != rune('t') {
													goto l179
												}
												position++
												if buffer[position] != rune('a') {
													goto l179
												}
												position++
												if buffer[position] != rune('b') {
													goto l179
												}
												position++
												if buffer[position] != rune('a') {
													goto l179
												}
												position++
												if buffer[position] != rune('s') {
													goto l179
												}
												position++
												if buffer[position] != rune('e') {
													goto l179
												}
												position++
												if !_rules[rule_]() {
													goto l179
												}
												add(ruleDATABASE, position180)
											}
											goto l178
										l179:
											position, tokenIndex = position178, tokenIndex178
											{
												position182 := position
												if buffer[position] != rune('b') {
													goto l181
												}
												position++
												if buffer[position] != rune('l') {
													goto l181
												}
												position++
												if buffer[position] != rune('o') {
													goto l181
												}
												position++
												if buffer[position] != rune('b') {
													goto l181
												}
												position++
												if buffer[position] != rune('s') {
													goto l181
												}
												position++
												if buffer[position] != rune('t') {
													goto l181
												}
												position++
												if buffer[position] != rune('o') {
													goto l181
												}
												position++
												if buffer[position] != rune('r') {
													goto l181
												}
												position++
												if buffer[position] != rune('e') {
													goto l181
												}
												position++
												if !_rules[rule_]() {
													goto l181
												}
												add(ruleBLOBSTORE, position182)
											}
											goto l178
										l181:
											position, tokenIndex = position178, tokenIndex178
											{
												switch buffer[position] {
												case 'c':
													{
														position184 := position
														if buffer[position] != rune('c') {
															goto l154
														}
														position++
														if buffer[position] != rune('o') {
															goto l154
														}
														position++
														if buffer[position] != rune('d') {
															goto l154
														}
														position++
														if buffer[position] != rune('e') {
															goto l154
														}
														position++
														if !_rules[rule_]() {
															goto l154
														}
														add(ruleCODE, position184)
													}
												case 'd':
													{
														position185 := position
														if buffer[position] != rune('d') {
															goto l154
														}
														position++
														if buffer[position] != rune('e') {
															goto l154
														}
														position++
														if buffer[position] != rune('v') {
															goto l154
														}
														position++
														if buffer[position] != rune('i') {
															goto l154
														}
														position++
														if buffer[position] != rune('c') {
															goto l154
														}
														position++
														if buffer[position] != rune('e') {
															goto l154
														}
														position++
														if !_rules[rule_]() {
															goto l154
														}
														add(ruleDEVICE, position185)
													}
												case 's':
													{
														position186 := position
														if buffer[position] != rune('s') {
															goto l154
														}
														position++
														if buffer[position] != rune('e') {
															goto l154
														}
														position++
														if buffer[position] != rune('r') {
															goto l154
														}
														position++
														if buffer[position] != rune('v') {
															goto l154
														}
														position++
														if buffer[position] != rune('e') {
															goto l154
														}
														position++
														if buffer[position] != rune('r') {
															goto l154
														}
														position++
														if !_rules[rule_]() {
															goto l154
														}
														add(ruleSERVER, position186)
													}
												case 'm':
													{
														position187 := position
														if buffer[position] != rune('m') {
															goto l154
														}
														position++
														if buffer[position] != rune('o') {
															goto l154
														}
														position++
														if buffer[position] != rune('b') {
															goto l154
														}
														position++
														if buffer[position] != rune('i') {
															goto l154
														}
														position++
														if buffer[position] != rune('l') {
															goto l154
														}
														position++
														if buffer[position] != rune('e') {
															goto l154
														}
														position++
														if !_rules[rule_]() {
															goto l154
														}
														add(ruleMOBILE, position187)
													}
												case 'b':
													{
														position188 := position
														if buffer[position] != rune('b') {
															goto l154
														}
														position++
														if buffer[position] != rune('r') {
															goto l154
														}
														position++
														if buffer[position] != rune('o') {
															goto l154
														}
														position++
														if buffer[position] != rune('w') {
															goto l154
														}
														position++
														if buffer[position] != rune('s') {
															goto l154
														}
														position++
														if buffer[position] != rune('e') {
															goto l154
														}
														position++
														if buffer[position] != rune('r') {
															goto l154
														}
														position++
														if !_rules[rule_]() {
															goto l154
														}
														add(ruleBROWSER, position188)
													}
												case 'q':
													{
														position189 := position
														if buffer[position] != rune('q') {
															goto l154
														}
														position++
														if buffer[position] != rune('u') {
															goto l154
														}
														position++
														if buffer[position] != rune('e') {
															goto l154
														}
														position++
														if buffer[position] != rune('u') {
															goto l154
														}
														position++
														if buffer[position] != rune('e') {
															goto l154
														}
														position++
														if !_rules[rule_]() {
															goto l154
														}
														add(ruleQUEUE, position189)
													}
												default:
													{
														position190 := position
														if buffer[position] != rune('p') {
															goto l154
														}
														position++
														if buffer[position] != rune('e') {
															goto l154
														}
														position++
														if buffer[position] != rune('r') {
															goto l154
														}
														position++
														if buffer[position] != rune('s') {
															goto l154
														}
														position++
														if buffer[position] != rune('o') {
															goto l154
														}
														position++
														if buffer[position] != rune('n') {
															goto l154
														}
														position++
														if !_rules[rule_]() {
															goto l154
														}
														add(rulePERSON, position190)
													}
												}
											}

										}
									l178:
										add(ruleItemType, position177)
									}
								}
							}

						}
					l174:
						add(ruleItemParam, position173)
					}
					goto l153
				l154:
					position, tokenIndex = position154, tokenIndex154
				}
				add(ruleItemParams, position152)
			}
			return true
		l151:
			position, tokenIndex = position151, tokenIndex151
			return false
		},
		/* 18 RelParams <- <RelParam+> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				{
					position195 := position
					{
						switch buffer[position] {
						case 'e':
							if !_rules[ruleEXPANDED]() {
								goto l191
							}
							if !_rules[ruleEQUALS]() {
								goto l191
							}
							if !_rules[ruleStringLike]() {
								goto l191
							}
						case 'a':
							if !_rules[ruleASYNC]() {
								goto l191
							}
							if !_rules[ruleEQUALS]() {
								goto l191
							}
							if !_rules[ruleBoolean]() {
								goto l191
							}
						case 'm':
							if !_rules[ruleMECHANISM]() {
								goto l191
							}
							if !_rules[ruleEQUALS]() {
								goto l191
							}
							if !_rules[ruleStringLike]() {
								goto l191
							}
						default:
							if !_rules[ruleVERB]() {
								goto l191
							}
							if !_rules[ruleEQUALS]() {
								goto l191
							}
							if !_rules[ruleStringLike]() {
								goto l191
							}
						}
					}

					add(ruleRelParam, position195)
				}
			l193:
				{
					position194, tokenIndex194 := position, tokenIndex
					{
						position197 := position
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l194
								}
								if !_rules[ruleEQUALS]() {
									goto l194
								}
								if !_rules[ruleStringLike]() {
									goto l194
								}
							case 'a':
								if !_rules[ruleASYNC]() {
									goto l194
								}
								if !_rules[ruleEQUALS]() {
									goto l194
								}
								if !_rules[ruleBoolean]() {
									goto l194
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l194
								}
								if !_rules[ruleEQUALS]() {
									goto l194
								}
								if !_rules[ruleStringLike]() {
									goto l194
								}
							default:
								if !_rules[ruleVERB]() {
									goto l194
								}
								if !_rules[ruleEQUALS]() {
									goto l194
								}
								if !_rules[ruleStringLike]() {
									goto l194
								}
							}
						}

						add(ruleRelParam, position197)
					}
					goto l193
				l194:
					position, tokenIndex = position194, tokenIndex194
				}
				add(ruleRelParams, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 19 ItemParam <- <((EXTERNAL EQUALS Boolean) / ((&('e') (EXPANDED EQUALS StringLike)) | (&('m') (MECHANISM EQUALS StringLike)) | (&('n') (NAME EQUALS StringLike)) | (&('t') (TYPE EQUALS ItemType))))> */
		nil,
		/* 20 RelParam <- <((&('e') (EXPANDED EQUALS StringLike)) | (&('a') (ASYNC EQUALS Boolean)) | (&('m') (MECHANISM EQUALS StringLike)) | (&('v') (VERB EQUALS StringLike)))> */
		nil,
		/* 21 ItemKeys <- <ItemKey+> */
		nil,
		/* 22 RelKeys <- <RelKey+> */
		nil,
		/* 23 ItemKey <- <((EXTERNAL / ((&('e') EXPANDED) | (&('m') MECHANISM) | (&('t') TYPE) | (&('n') NAME))) _)> */
		nil,
		/* 24 RelKey <- <(((&('e') EXPANDED) | (&('a') ASYNC) | (&('m') MECHANISM) | (&('v') VERB)) _)> */
		nil,
		/* 25 Error <- <(ERROR StringLike*)> */
		nil,
		/* 26 StringLike <- <((Text / QuotedText) _)> */
		func() bool {
			position206, tokenIndex206 := position, tokenIndex
			{
				position207 := position
				{
					position208, tokenIndex208 := position, tokenIndex
					{
						position210 := position
						{
							switch buffer[position] {
							case '_':
								if buffer[position] != rune('_') {
									goto l209
								}
								position++
							case '-':
								if buffer[position] != rune('-') {
									goto l209
								}
								position++
							case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l209
								}
								position++
							case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l209
								}
								position++
							default:
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l209
								}
								position++
							}
						}

					l211:
						{
							position212, tokenIndex212 := position, tokenIndex
							{
								switch buffer[position] {
								case '_':
									if buffer[position] != rune('_') {
										goto l212
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l212
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l212
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l212
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l212
									}
									position++
								}
							}

							goto l211
						l212:
							position, tokenIndex = position212, tokenIndex212
						}
						add(ruleText, position210)
					}
					goto l208
				l209:
					position, tokenIndex = position208, tokenIndex208
					{
						position215 := position
						if !_rules[ruleQUOTE]() {
							goto l206
						}
					l216:
						{
							position217, tokenIndex217 := position, tokenIndex
							{
								switch buffer[position] {
								case ' ':
									if buffer[position] != rune(' ') {
										goto l217
									}
									position++
								case ':':
									if buffer[position] != rune(':') {
										goto l217
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l217
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l217
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l217
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l217
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l217
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l217
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l217
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l217
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l217
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l217
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l217
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l217
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l217
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l217
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l217
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l217
									}
									position++
								case ',':
									if buffer[position] != rune(',') {
										goto l217
									}
									position++
								case '.':
									if buffer[position] != rune('.') {
										goto l217
									}
									position++
								case '_':
									if buffer[position] != rune('_') {
										goto l217
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l217
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l217
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l217
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l217
									}
									position++
								}
							}

							goto l216
						l217:
							position, tokenIndex = position217, tokenIndex217
						}
						if !_rules[ruleQUOTE]() {
							goto l206
						}
						add(ruleQuotedText, position215)
					}
				}
			l208:
				if !_rules[rule_]() {
					goto l206
				}
				add(ruleStringLike, position207)
			}
			return true
		l206:
			position, tokenIndex = position206, tokenIndex206
			return false
		},
		/* 27 Boolean <- <(TRUE / FALSE)> */
		func() bool {
			position219, tokenIndex219 := position, tokenIndex
			{
				position220 := position
				{
					position221, tokenIndex221 := position, tokenIndex
					{
						position223 := position
						if buffer[position] != rune('t') {
							goto l222
						}
						position++
						if buffer[position] != rune('r') {
							goto l222
						}
						position++
						if buffer[position] != rune('u') {
							goto l222
						}
						position++
						if buffer[position] != rune('e') {
							goto l222
						}
						position++
						if !_rules[rule_]() {
							goto l222
						}
						add(ruleTRUE, position223)
					}
					goto l221
				l222:
					position, tokenIndex = position221, tokenIndex221
					{
						position224 := position
						if buffer[position] != rune('f') {
							goto l219
						}
						position++
						if buffer[position] != rune('a') {
							goto l219
						}
						position++
						if buffer[position] != rune('l') {
							goto l219
						}
						position++
						if buffer[position] != rune('s') {
							goto l219
						}
						position++
						if buffer[position] != rune('e') {
							goto l219
						}
						position++
						if !_rules[rule_]() {
							goto l219
						}
						add(ruleFALSE, position224)
					}
				}
			l221:
				add(ruleBoolean, position220)
			}
			return true
		l219:
			position, tokenIndex = position219, tokenIndex219
			return false
		},
		/* 28 Text <- <((&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))+> */
		nil,
		/* 29 QuotedText <- <(QUOTE ((&(' ') ' ') | (&(':') ':') | (&(';') ';') | (&('~') '~') | (&('=') '=') | (&('+') '+') | (&(']') ']') | (&('[') '[') | (&(')') ')') | (&('(') '(') | (&('*') '*') | (&('&') '&') | (&('^') '^') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('@') '@') | (&('!') '!') | (&(',') ',') | (&('.') '.') | (&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))* QUOTE)> */
		nil,
		/* 30 ItemsList <- <(Item LIST Number?)> */
		nil,
		/* 31 RelsList <- <(Rel LIST Number?)> */
		nil,
		/* 32 Number <- <([0-9]+ _)> */
		func() bool {
			position229, tokenIndex229 := position, tokenIndex
			{
				position230 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l229
				}
				position++
			l231:
				{
					position232, tokenIndex232 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l232
					}
					position++
					goto l231
				l232:
					position, tokenIndex = position232, tokenIndex232
				}
				if !_rules[rule_]() {
					goto l229
				}
				add(ruleNumber, position230)
			}
			return true
		l229:
			position, tokenIndex = position229, tokenIndex229
			return false
		},
		/* 33 ItemType <- <(DATABASE / BLOBSTORE / ((&('c') CODE) | (&('d') DEVICE) | (&('s') SERVER) | (&('m') MOBILE) | (&('b') BROWSER) | (&('q') QUEUE) | (&('p') PERSON)))> */
		nil,
		/* 34 ItemExists <- <(ITEM_EXISTS / (Item EXISTS))> */
		nil,
		/* 35 RelExists <- <(REL_EXISTS / (Rel EXISTS))> */
		nil,
		/* 36 Item <- <ITEM> */
		func() bool {
			position236, tokenIndex236 := position, tokenIndex
			{
				position237 := position
				if !_rules[ruleITEM]() {
					goto l236
				}
				add(ruleItem, position237)
			}
			return true
		l236:
			position, tokenIndex = position236, tokenIndex236
			return false
		},
		/* 37 Rel <- <REL> */
		func() bool {
			position238, tokenIndex238 := position, tokenIndex
			{
				position239 := position
				if !_rules[ruleREL]() {
					goto l238
				}
				add(ruleRel, position239)
			}
			return true
		l238:
			position, tokenIndex = position238, tokenIndex238
			return false
		},
		/* 38 Flag <- <(StrictFlag / VerboseFlag / IdsFlag)> */
		nil,
		/* 39 StrictFlag <- <(FLAG STRICT)> */
		nil,
		/* 40 VerboseFlag <- <(FLAG VERBOSE)> */
		nil,
		/* 41 IdsFlag <- <(FLAG IDS)> */
		nil,
		/* 42 Keyword <- <(ITEM / ITEM_EXISTS / REL / FROM_QUERY / IN / CREATE / FETCH / ((&('-') FLAG) | (&('n') NEST) | (&('f') FREE) | (&('e') EXISTS) | (&('c') CLEAR) | (&('s') SET) | (&('d') DELETE) | (&('i') IN_QUERY) | (&('t') TO_QUERY) | (&('r') REL_EXISTS)))> */
		nil,
		/* 43 WORLD <- <('w' 'o' 'r' 'l' 'd' _)> */
		func() bool {
			position245, tokenIndex245 := position, tokenIndex
			{
				position246 := position
				if buffer[position] != rune('w') {
					goto l245
				}
				position++
				if buffer[position] != rune('o') {
					goto l245
				}
				position++
				if buffer[position] != rune('r') {
					goto l245
				}
				position++
				if buffer[position] != rune('l') {
					goto l245
				}
				position++
				if buffer[position] != rune('d') {
					goto l245
				}
				position++
				if !_rules[rule_]() {
					goto l245
				}
				add(ruleWORLD, position246)
			}
			return true
		l245:
			position, tokenIndex = position245, tokenIndex245
			return false
		},
		/* 44 ENDWORLD <- <('e' 'n' 'd' 'w' 'o' 'r' 'l' 'd' _)> */
		nil,
		/* 45 ERROR <- <('e' 'r' 'r' 'o' 'r' _)> */
		nil,
		/* 46 ITEM <- <('i' 't' 'e' 'm' 's'? _)> */
		func() bool {
			position249, tokenIndex249 := position, tokenIndex
			{
				position250 := position
				if buffer[position] != rune('i') {
					goto l249
				}
				position++
				if buffer[position] != rune('t') {
					goto l249
				}
				position++
				if buffer[position] != rune('e') {
					goto l249
				}
				position++
				if buffer[position] != rune('m') {
					goto l249
				}
				position++
				{
					position251, tokenIndex251 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l251
					}
					position++
					goto l252
				l251:
					position, tokenIndex = position251, tokenIndex251
				}
			l252:
				if !_rules[rule_]() {
					goto l249
				}
				add(ruleITEM, position250)
			}
			return true
		l249:
			position, tokenIndex = position249, tokenIndex249
			return false
		},
		/* 47 ITEM_EXISTS <- <('i' 't' 'e' 'm' '?' _)> */
		func() bool {
			position253, tokenIndex253 := position, tokenIndex
			{
				position254 := position
				if buffer[position] != rune('i') {
					goto l253
				}
				position++
				if buffer[position] != rune('t') {
					goto l253
				}
				position++
				if buffer[position] != rune('e') {
					goto l253
				}
				position++
				if buffer[position] != rune('m') {
					goto l253
				}
				position++
				if buffer[position] != rune('?') {
					goto l253
				}
				position++
				if !_rules[rule_]() {
					goto l253
				}
				add(ruleITEM_EXISTS, position254)
			}
			return true
		l253:
			position, tokenIndex = position253, tokenIndex253
			return false
		},
		/* 48 REL <- <('r' 'e' 'l' 's'? _)> */
		func() bool {
			position255, tokenIndex255 := position, tokenIndex
			{
				position256 := position
				if buffer[position] != rune('r') {
					goto l255
				}
				position++
				if buffer[position] != rune('e') {
					goto l255
				}
				position++
				if buffer[position] != rune('l') {
					goto l255
				}
				position++
				{
					position257, tokenIndex257 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l257
					}
					position++
					goto l258
				l257:
					position, tokenIndex = position257, tokenIndex257
				}
			l258:
				if !_rules[rule_]() {
					goto l255
				}
				add(ruleREL, position256)
			}
			return true
		l255:
			position, tokenIndex = position255, tokenIndex255
			return false
		},
		/* 49 REL_EXISTS <- <('r' 'e' 'l' '?' _)> */
		func() bool {
			position259, tokenIndex259 := position, tokenIndex
			{
				position260 := position
				if buffer[position] != rune('r') {
					goto l259
				}
				position++
				if buffer[position] != rune('e') {
					goto l259
				}
				position++
				if buffer[position] != rune('l') {
					goto l259
				}
				position++
				if buffer[position] != rune('?') {
					goto l259
				}
				position++
				if !_rules[rule_]() {
					goto l259
				}
				add(ruleREL_EXISTS, position260)
			}
			return true
		l259:
			position, tokenIndex = position259, tokenIndex259
			return false
		},
		/* 50 FROM_QUERY <- <('f' 'r' 'o' 'm' '?' _)> */
		nil,
		/* 51 TO_QUERY <- <('t' 'o' '?' _)> */
		nil,
		/* 52 IN <- <('i' 'n' _)> */
		func() bool {
			position263, tokenIndex263 := position, tokenIndex
			{
				position264 := position
				if buffer[position] != rune('i') {
					goto l263
				}
				position++
				if buffer[position] != rune('n') {
					goto l263
				}
				position++
				if !_rules[rule_]() {
					goto l263
				}
				add(ruleIN, position264)
			}
			return true
		l263:
			position, tokenIndex = position263, tokenIndex263
			return false
		},
		/* 53 IN_QUERY <- <('i' 'n' '?' _)> */
		func() bool {
			position265, tokenIndex265 := position, tokenIndex
			{
				position266 := position
				if buffer[position] != rune('i') {
					goto l265
				}
				position++
				if buffer[position] != rune('n') {
					goto l265
				}
				position++
				if buffer[position] != rune('?') {
					goto l265
				}
				position++
				if !_rules[rule_]() {
					goto l265
				}
				add(ruleIN_QUERY, position266)
			}
			return true
		l265:
			position, tokenIndex = position265, tokenIndex265
			return false
		},
		/* 54 CREATE <- <('c' 'r' 'e' 'a' 't' 'e' _)> */
		func() bool {
			position267, tokenIndex267 := position, tokenIndex
			{
				position268 := position
				if buffer[position] != rune('c') {
					goto l267
				}
				position++
				if buffer[position] != rune('r') {
					goto l267
				}
				position++
				if buffer[position] != rune('e') {
					goto l267
				}
				position++
				if buffer[position] != rune('a') {
					goto l267
				}
				position++
				if buffer[position] != rune('t') {
					goto l267
				}
				position++
				if buffer[position] != rune('e') {
					goto l267
				}
				position++
				if !_rules[rule_]() {
					goto l267
				}
				add(ruleCREATE, position268)
			}
			return true
		l267:
			position, tokenIndex = position267, tokenIndex267
			return false
		},
		/* 55 DELETE <- <('d' 'e' 'l' 'e' 't' 'e' _)> */
		func() bool {
			position269, tokenIndex269 := position, tokenIndex
			{
				position270 := position
				if buffer[position] != rune('d') {
					goto l269
				}
				position++
				if buffer[position] != rune('e') {
					goto l269
				}
				position++
				if buffer[position] != rune('l') {
					goto l269
				}
				position++
				if buffer[position] != rune('e') {
					goto l269
				}
				position++
				if buffer[position] != rune('t') {
					goto l269
				}
				position++
				if buffer[position] != rune('e') {
					goto l269
				}
				position++
				if !_rules[rule_]() {
					goto l269
				}
				add(ruleDELETE, position270)
			}
			return true
		l269:
			position, tokenIndex = position269, tokenIndex269
			return false
		},
		/* 56 SET <- <('s' 'e' 't' _)> */
		func() bool {
			position271, tokenIndex271 := position, tokenIndex
			{
				position272 := position
				if buffer[position] != rune('s') {
					goto l271
				}
				position++
				if buffer[position] != rune('e') {
					goto l271
				}
				position++
				if buffer[position] != rune('t') {
					goto l271
				}
				position++
				if !_rules[rule_]() {
					goto l271
				}
				add(ruleSET, position272)
			}
			return true
		l271:
			position, tokenIndex = position271, tokenIndex271
			return false
		},
		/* 57 CLEAR <- <('c' 'l' 'e' 'a' 'r' _)> */
		func() bool {
			position273, tokenIndex273 := position, tokenIndex
			{
				position274 := position
				if buffer[position] != rune('c') {
					goto l273
				}
				position++
				if buffer[position] != rune('l') {
					goto l273
				}
				position++
				if buffer[position] != rune('e') {
					goto l273
				}
				position++
				if buffer[position] != rune('a') {
					goto l273
				}
				position++
				if buffer[position] != rune('r') {
					goto l273
				}
				position++
				if !_rules[rule_]() {
					goto l273
				}
				add(ruleCLEAR, position274)
			}
			return true
		l273:
			position, tokenIndex = position273, tokenIndex273
			return false
		},
		/* 58 FETCH <- <('f' 'e' 't' 'c' 'h' _)> */
		func() bool {
			position275, tokenIndex275 := position, tokenIndex
			{
				position276 := position
				if buffer[position] != rune('f') {
					goto l275
				}
				position++
				if buffer[position] != rune('e') {
					goto l275
				}
				position++
				if buffer[position] != rune('t') {
					goto l275
				}
				position++
				if buffer[position] != rune('c') {
					goto l275
				}
				position++
				if buffer[position] != rune('h') {
					goto l275
				}
				position++
				if !_rules[rule_]() {
					goto l275
				}
				add(ruleFETCH, position276)
			}
			return true
		l275:
			position, tokenIndex = position275, tokenIndex275
			return false
		},
		/* 59 LIST <- <('l' 'i' 's' 't' _)> */
		func() bool {
			position277, tokenIndex277 := position, tokenIndex
			{
				position278 := position
				if buffer[position] != rune('l') {
					goto l277
				}
				position++
				if buffer[position] != rune('i') {
					goto l277
				}
				position++
				if buffer[position] != rune('s') {
					goto l277
				}
				position++
				if buffer[position] != rune('t') {
					goto l277
				}
				position++
				if !_rules[rule_]() {
					goto l277
				}
				add(ruleLIST, position278)
			}
			return true
		l277:
			position, tokenIndex = position277, tokenIndex277
			return false
		},
		/* 60 EXISTS <- <('e' 'x' 'i' 's' 't' 's' _)> */
		func() bool {
			position279, tokenIndex279 := position, tokenIndex
			{
				position280 := position
				if buffer[position] != rune('e') {
					goto l279
				}
				position++
				if buffer[position] != rune('x') {
					goto l279
				}
				position++
				if buffer[position] != rune('i') {
					goto l279
				}
				position++
				if buffer[position] != rune('s') {
					goto l279
				}
				position++
				if buffer[position] != rune('t') {
					goto l279
				}
				position++
				if buffer[position] != rune('s') {
					goto l279
				}
				position++
				if !_rules[rule_]() {
					goto l279
				}
				add(ruleEXISTS, position280)
			}
			return true
		l279:
			position, tokenIndex = position279, tokenIndex279
			return false
		},
		/* 61 FREE <- <('f' 'r' 'e' 'e' _)> */
		func() bool {
			position281, tokenIndex281 := position, tokenIndex
			{
				position282 := position
				if buffer[position] != rune('f') {
					goto l281
				}
				position++
				if buffer[position] != rune('r') {
					goto l281
				}
				position++
				if buffer[position] != rune('e') {
					goto l281
				}
				position++
				if buffer[position] != rune('e') {
					goto l281
				}
				position++
				if !_rules[rule_]() {
					goto l281
				}
				add(ruleFREE, position282)
			}
			return true
		l281:
			position, tokenIndex = position281, tokenIndex281
			return false
		},
		/* 62 NEST <- <('n' 'e' 's' 't' _)> */
		func() bool {
			position283, tokenIndex283 := position, tokenIndex
			{
				position284 := position
				if buffer[position] != rune('n') {
					goto l283
				}
				position++
				if buffer[position] != rune('e') {
					goto l283
				}
				position++
				if buffer[position] != rune('s') {
					goto l283
				}
				position++
				if buffer[position] != rune('t') {
					goto l283
				}
				position++
				if !_rules[rule_]() {
					goto l283
				}
				add(ruleNEST, position284)
			}
			return true
		l283:
			position, tokenIndex = position283, tokenIndex283
			return false
		},
		/* 63 TRUE <- <('t' 'r' 'u' 'e' _)> */
		nil,
		/* 64 FALSE <- <('f' 'a' 'l' 's' 'e' _)> */
		nil,
		/* 65 EXTERNAL <- <('e' 'x' 't' 'e' 'r' 'n' 'a' 'l')> */
		func() bool {
			position287, tokenIndex287 := position, tokenIndex
			{
				position288 := position
				if buffer[position] != rune('e') {
					goto l287
				}
				position++
				if buffer[position] != rune('x') {
					goto l287
				}
				position++
				if buffer[position] != rune('t') {
					goto l287
				}
				position++
				if buffer[position] != rune('e') {
					goto l287
				}
				position++
				if buffer[position] != rune('r') {
					goto l287
				}
				position++
				if buffer[position] != rune('n') {
					goto l287
				}
				position++
				if buffer[position] != rune('a') {
					goto l287
				}
				position++
				if buffer[position] != rune('l') {
					goto l287
				}
				position++
				add(ruleEXTERNAL, position288)
			}
			return true
		l287:
			position, tokenIndex = position287, tokenIndex287
			return false
		},
		/* 66 NAME <- <('n' 'a' 'm' 'e')> */
		func() bool {
			position289, tokenIndex289 := position, tokenIndex
			{
				position290 := position
				if buffer[position] != rune('n') {
					goto l289
				}
				position++
				if buffer[position] != rune('a') {
					goto l289
				}
				position++
				if buffer[position] != rune('m') {
					goto l289
				}
				position++
				if buffer[position] != rune('e') {
					goto l289
				}
				position++
				add(ruleNAME, position290)
			}
			return true
		l289:
			position, tokenIndex = position289, tokenIndex289
			return false
		},
		/* 67 TYPE <- <('t' 'y' 'p' 'e')> */
		func() bool {
			position291, tokenIndex291 := position, tokenIndex
			{
				position292 := position
				if buffer[position] != rune('t') {
					goto l291
				}
				position++
				if buffer[position] != rune('y') {
					goto l291
				}
				position++
				if buffer[position] != rune('p') {
					goto l291
				}
				position++
				if buffer[position] != rune('e') {
					goto l291
				}
				position++
				add(ruleTYPE, position292)
			}
			return true
		l291:
			position, tokenIndex = position291, tokenIndex291
			return false
		},
		/* 68 VERB <- <('v' 'e' 'r' 'b')> */
		func() bool {
			position293, tokenIndex293 := position, tokenIndex
			{
				position294 := position
				if buffer[position] != rune('v') {
					goto l293
				}
				position++
				if buffer[position] != rune('e') {
					goto l293
				}
				position++
				if buffer[position] != rune('r') {
					goto l293
				}
				position++
				if buffer[position] != rune('b') {
					goto l293
				}
				position++
				add(ruleVERB, position294)
			}
			return true
		l293:
			position, tokenIndex = position293, tokenIndex293
			return false
		},
		/* 69 MECHANISM <- <('m' 'e' 'c' 'h' 'a' 'n' 'i' 's' 'm')> */
		func() bool {
			position295, tokenIndex295 := position, tokenIndex
			{
				position296 := position
				if buffer[position] != rune('m') {
					goto l295
				}
				position++
				if buffer[position] != rune('e') {
					goto l295
				}
				position++
				if buffer[position] != rune('c') {
					goto l295
				}
				position++
				if buffer[position] != rune('h') {
					goto l295
				}
				position++
				if buffer[position] != rune('a') {
					goto l295
				}
				position++
				if buffer[position] != rune('n') {
					goto l295
				}
				position++
				if buffer[position] != rune('i') {
					goto l295
				}
				position++
				if buffer[position] != rune('s') {
					goto l295
				}
				position++
				if buffer[position] != rune('m') {
					goto l295
				}
				position++
				add(ruleMECHANISM, position296)
			}
			return true
		l295:
			position, tokenIndex = position295, tokenIndex295
			return false
		},
		/* 70 ASYNC <- <('a' 's' 'y' 'n' 'c')> */
		func() bool {
			position297, tokenIndex297 := position, tokenIndex
			{
				position298 := position
				if buffer[position] != rune('a') {
					goto l297
				}
				position++
				if buffer[position] != rune('s') {
					goto l297
				}
				position++
				if buffer[position] != rune('y') {
					goto l297
				}
				position++
				if buffer[position] != rune('n') {
					goto l297
				}
				position++
				if buffer[position] != rune('c') {
					goto l297
				}
				position++
				add(ruleASYNC, position298)
			}
			return true
		l297:
			position, tokenIndex = position297, tokenIndex297
			return false
		},
		/* 71 EXPANDED <- <('e' 'x' 'p' 'a' 'n' 'd' 'e' 'd')> */
		func() bool {
			position299, tokenIndex299 := position, tokenIndex
			{
				position300 := position
				if buffer[position] != rune('e') {
					goto l299
				}
				position++
				if buffer[position] != rune('x') {
					goto l299
				}
				position++
				if buffer[position] != rune('p') {
					goto l299
				}
				position++
				if buffer[position] != rune('a') {
					goto l299
				}
				position++
				if buffer[position] != rune('n') {
					goto l299
				}
				position++
				if buffer[position] != rune('d') {
					goto l299
				}
				position++
				if buffer[position] != rune('e') {
					goto l299
				}
				position++
				if buffer[position] != rune('d') {
					goto l299
				}
				position++
				add(ruleEXPANDED, position300)
			}
			return true
		l299:
			position, tokenIndex = position299, tokenIndex299
			return false
		},
		/* 72 PERSON <- <('p' 'e' 'r' 's' 'o' 'n' _)> */
		nil,
		/* 73 DATABASE <- <('d' 'a' 't' 'a' 'b' 'a' 's' 'e' _)> */
		nil,
		/* 74 QUEUE <- <('q' 'u' 'e' 'u' 'e' _)> */
		nil,
		/* 75 BLOBSTORE <- <('b' 'l' 'o' 'b' 's' 't' 'o' 'r' 'e' _)> */
		nil,
		/* 76 BROWSER <- <('b' 'r' 'o' 'w' 's' 'e' 'r' _)> */
		nil,
		/* 77 MOBILE <- <('m' 'o' 'b' 'i' 'l' 'e' _)> */
		nil,
		/* 78 SERVER <- <('s' 'e' 'r' 'v' 'e' 'r' _)> */
		nil,
		/* 79 DEVICE <- <('d' 'e' 'v' 'i' 'c' 'e' _)> */
		nil,
		/* 80 CODE <- <('c' 'o' 'd' 'e' _)> */
		nil,
		/* 81 QUOTE <- <'"'> */
		func() bool {
			position310, tokenIndex310 := position, tokenIndex
			{
				position311 := position
				if buffer[position] != rune('"') {
					goto l310
				}
				position++
				add(ruleQUOTE, position311)
			}
			return true
		l310:
			position, tokenIndex = position310, tokenIndex310
			return false
		},
		/* 82 EQUALS <- <'='> */
		func() bool {
			position312, tokenIndex312 := position, tokenIndex
			{
				position313 := position
				if buffer[position] != rune('=') {
					goto l312
				}
				position++
				add(ruleEQUALS, position313)
			}
			return true
		l312:
			position, tokenIndex = position312, tokenIndex312
			return false
		},
		/* 83 FLAG <- <('-' / ('-' '-'))> */
		func() bool {
			position314, tokenIndex314 := position, tokenIndex
			{
				position315 := position
				{
					position316, tokenIndex316 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l317
					}
					position++
					goto l316
				l317:
					position, tokenIndex = position316, tokenIndex316
					if buffer[position] != rune('-') {
						goto l314
					}
					position++
					if buffer[position] != rune('-') {
						goto l314
					}
					position++
				}
			l316:
				add(ruleFLAG, position315)
			}
			return true
		l314:
			position, tokenIndex = position314, tokenIndex314
			return false
		},
		/* 84 STRICT <- <('s' 't' 'r' 'i' 'c' 't' _)> */
		nil,
		/* 85 VERBOSE <- <('v' 'e' 'r' 'b' 'o' 's' 'e' _)> */
		nil,
		/* 86 IDS <- <('i' 'd' 's' _)> */
		func() bool {
			position320, tokenIndex320 := position, tokenIndex
			{
				position321 := position
				if buffer[position] != rune('i') {
					goto l320
				}
				position++
				if buffer[position] != rune('d') {
					goto l320
				}
				position++
				if buffer[position] != rune('s') {
					goto l320
				}
				position++
				if !_rules[rule_]() {
					goto l320
				}
				add(ruleIDS, position321)
			}
			return true
		l320:
			position, tokenIndex = position320, tokenIndex320
			return false
		},
		/* 87 _ <- <Whitespace*> */
		func() bool {
			{
				position323 := position
			l324:
				{
					position325, tokenIndex325 := position, tokenIndex
					{
						position326 := position
						{
							switch buffer[position] {
							case '\t':
								if buffer[position] != rune('\t') {
									goto l325
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l325
								}
								position++
							default:
								if !_rules[ruleEOL]() {
									goto l325
								}
							}
						}

						add(ruleWhitespace, position326)
					}
					goto l324
				l325:
					position, tokenIndex = position325, tokenIndex325
				}
				add(rule_, position323)
			}
			return true
		},
		/* 88 Whitespace <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') EOL))> */
		nil,
		/* 89 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position329, tokenIndex329 := position, tokenIndex
			{
				position330 := position
				{
					position331, tokenIndex331 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l332
					}
					position++
					if buffer[position] != rune('\n') {
						goto l332
					}
					position++
					goto l331
				l332:
					position, tokenIndex = position331, tokenIndex331
					if buffer[position] != rune('\n') {
						goto l333
					}
					position++
					goto l331
				l333:
					position, tokenIndex = position331, tokenIndex331
					if buffer[position] != rune('\r') {
						goto l329
					}
					position++
				}
			l331:
				add(ruleEOL, position330)
			}
			return true
		l329:
			position, tokenIndex = position329, tokenIndex329
			return false
		},
		/* 90 END <- <!.> */
		func() bool {
			position334, tokenIndex334 := position, tokenIndex
			{
				position335 := position
				{
					position336, tokenIndex336 := position, tokenIndex
					if !matchDot() {
						goto l336
					}
					goto l334
				l336:
					position, tokenIndex = position336, tokenIndex336
				}
				add(ruleEND, position335)
			}
			return true
		l334:
			position, tokenIndex = position334, tokenIndex334
			return false
		},
	}
	p.rules = _rules
	return nil
}
