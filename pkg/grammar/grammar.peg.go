package grammar

// Code generated by peg -inline -switch -strict -output grammar.peg.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleValid
	ruleResponse
	ruleCommand
	ruleMutation
	ruleQuery
	ruleFetchQuery
	ruleExistsQuery
	ruleStateBound
	ruleCreateOrFetch
	ruleCreateOrSet
	ruleObject
	ruleWorldObject
	ruleItemObject
	ruleRelObject
	ruleIdsList
	ruleDualIdentifier
	ruleIdentifier
	ruleItemParams
	ruleRelParams
	ruleItemParam
	ruleRelParam
	ruleItemKeys
	ruleRelKeys
	ruleItemKey
	ruleRelKey
	ruleError
	ruleStringLike
	ruleBoolean
	ruleText
	ruleQuotedText
	ruleItemsList
	ruleRelsList
	ruleNumber
	ruleItemType
	ruleItemExists
	ruleRelExists
	ruleItem
	ruleRel
	ruleFlag
	ruleStrictFlag
	ruleVerboseFlag
	ruleIdsFlag
	ruleKeyword
	ruleWORLD
	ruleITEM
	ruleITEM_EXISTS
	ruleREL
	ruleREL_EXISTS
	ruleFROM_QUERY
	ruleTO_QUERY
	ruleIN
	ruleIN_QUERY
	ruleCREATE
	ruleDELETE
	ruleSET
	ruleCLEAR
	ruleFETCH
	ruleLIST
	ruleEXISTS
	ruleFREE
	ruleNEST
	ruleTRUE
	ruleFALSE
	ruleEXTERNAL
	ruleNAME
	ruleTYPE
	ruleVERB
	ruleMECHANISM
	ruleASYNC
	ruleEXPANDED
	rulePERSON
	ruleDATABASE
	ruleQUEUE
	ruleBLOBSTORE
	ruleBROWSER
	ruleMOBILE
	ruleSERVER
	ruleDEVICE
	ruleCODE
	ruleQUOTE
	ruleEQUALS
	ruleFLAG
	ruleSTRICT
	ruleVERBOSE
	ruleIDS
	ruleERROR
	rule_
	ruleWhitespace
	ruleEOL
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"Valid",
	"Response",
	"Command",
	"Mutation",
	"Query",
	"FetchQuery",
	"ExistsQuery",
	"StateBound",
	"CreateOrFetch",
	"CreateOrSet",
	"Object",
	"WorldObject",
	"ItemObject",
	"RelObject",
	"IdsList",
	"DualIdentifier",
	"Identifier",
	"ItemParams",
	"RelParams",
	"ItemParam",
	"RelParam",
	"ItemKeys",
	"RelKeys",
	"ItemKey",
	"RelKey",
	"Error",
	"StringLike",
	"Boolean",
	"Text",
	"QuotedText",
	"ItemsList",
	"RelsList",
	"Number",
	"ItemType",
	"ItemExists",
	"RelExists",
	"Item",
	"Rel",
	"Flag",
	"StrictFlag",
	"VerboseFlag",
	"IdsFlag",
	"Keyword",
	"WORLD",
	"ITEM",
	"ITEM_EXISTS",
	"REL",
	"REL_EXISTS",
	"FROM_QUERY",
	"TO_QUERY",
	"IN",
	"IN_QUERY",
	"CREATE",
	"DELETE",
	"SET",
	"CLEAR",
	"FETCH",
	"LIST",
	"EXISTS",
	"FREE",
	"NEST",
	"TRUE",
	"FALSE",
	"EXTERNAL",
	"NAME",
	"TYPE",
	"VERB",
	"MECHANISM",
	"ASYNC",
	"EXPANDED",
	"PERSON",
	"DATABASE",
	"QUEUE",
	"BLOBSTORE",
	"BROWSER",
	"MOBILE",
	"SERVER",
	"DEVICE",
	"CODE",
	"QUOTE",
	"EQUALS",
	"FLAG",
	"STRICT",
	"VERBOSE",
	"IDS",
	"ERROR",
	"_",
	"Whitespace",
	"EOL",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	InputAttributes

	Buffer string
	buffer []rune
	rules  [91]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Valid <- <(Response / Command)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						{
							position5, tokenIndex5 := position, tokenIndex
							{
								position7 := position
								{
									position8, tokenIndex8 := position, tokenIndex
									{
										position10 := position
										if !_rules[ruleItem]() {
											goto l9
										}
										if !_rules[ruleIdentifier]() {
											goto l9
										}
										{
											position11, tokenIndex11 := position, tokenIndex
											if !_rules[ruleItemParams]() {
												goto l11
											}
											goto l12
										l11:
											position, tokenIndex = position11, tokenIndex11
										}
									l12:
										add(ruleItemObject, position10)
									}
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									{
										switch buffer[position] {
										case 'i':
											{
												position14 := position
												if !_rules[ruleIDS]() {
													goto l5
												}
											l15:
												{
													position16, tokenIndex16 := position, tokenIndex
													if !_rules[ruleStringLike]() {
														goto l16
													}
													goto l15
												l16:
													position, tokenIndex = position16, tokenIndex16
												}
												if !_rules[rule_]() {
													goto l5
												}
												add(ruleIdsList, position14)
											}
										case 'r':
											{
												position17 := position
												if !_rules[ruleRel]() {
													goto l5
												}
												if !_rules[ruleDualIdentifier]() {
													goto l5
												}
												{
													position18, tokenIndex18 := position, tokenIndex
													if !_rules[ruleRelParams]() {
														goto l18
													}
													goto l19
												l18:
													position, tokenIndex = position18, tokenIndex18
												}
											l19:
												add(ruleRelObject, position17)
											}
										default:
											{
												position20 := position
												if !_rules[ruleWORLD]() {
													goto l5
												}
											l21:
												{
													position22, tokenIndex22 := position, tokenIndex
													if !matchDot() {
														goto l22
													}
													goto l21
												l22:
													position, tokenIndex = position22, tokenIndex22
												}
												if !_rules[rule_]() {
													goto l5
												}
												add(ruleWorldObject, position20)
											}
										}
									}

								}
							l8:
								add(ruleObject, position7)
							}
							goto l6
						l5:
							position, tokenIndex = position5, tokenIndex5
						}
					l6:
						if !_rules[rule_]() {
							goto l3
						}
						if !_rules[ruleEOL]() {
							goto l3
						}
						{
							position23, tokenIndex23 := position, tokenIndex
							{
								position25 := position
								{
									position26 := position
									if buffer[position] != rune('e') {
										goto l23
									}
									position++
									if buffer[position] != rune('r') {
										goto l23
									}
									position++
									if buffer[position] != rune('r') {
										goto l23
									}
									position++
									if buffer[position] != rune('o') {
										goto l23
									}
									position++
									if buffer[position] != rune('r') {
										goto l23
									}
									position++
									if !_rules[rule_]() {
										goto l23
									}
									add(ruleERROR, position26)
								}
							l27:
								{
									position28, tokenIndex28 := position, tokenIndex
									if !_rules[ruleStringLike]() {
										goto l28
									}
									goto l27
								l28:
									position, tokenIndex = position28, tokenIndex28
								}
								add(ruleError, position25)
							}
							goto l24
						l23:
							position, tokenIndex = position23, tokenIndex23
						}
					l24:
						if !_rules[ruleEND]() {
							goto l3
						}
						add(ruleResponse, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position29 := position
						if !_rules[rule_]() {
							goto l0
						}
						{
							position30, tokenIndex30 := position, tokenIndex
							{
								position32 := position
								{
									position33, tokenIndex33 := position, tokenIndex
									if !_rules[ruleItem]() {
										goto l34
									}
									{
										position35, tokenIndex35 := position, tokenIndex
										if !_rules[ruleCREATE]() {
											goto l36
										}
										goto l35
									l36:
										position, tokenIndex = position35, tokenIndex35
										if !_rules[ruleSET]() {
											goto l34
										}
									}
								l35:
									if !_rules[ruleIdentifier]() {
										goto l34
									}
									{
										position37, tokenIndex37 := position, tokenIndex
										if !_rules[ruleItemParams]() {
											goto l37
										}
										goto l38
									l37:
										position, tokenIndex = position37, tokenIndex37
									}
								l38:
									goto l33
								l34:
									position, tokenIndex = position33, tokenIndex33
									if !_rules[ruleItem]() {
										goto l39
									}
									if !_rules[ruleCLEAR]() {
										goto l39
									}
									if !_rules[ruleIdentifier]() {
										goto l39
									}
									{
										position40 := position
										{
											position43 := position
											{
												position44, tokenIndex44 := position, tokenIndex
												if !_rules[ruleEXTERNAL]() {
													goto l45
												}
												goto l44
											l45:
												position, tokenIndex = position44, tokenIndex44
												{
													switch buffer[position] {
													case 'e':
														if !_rules[ruleEXPANDED]() {
															goto l39
														}
													case 'm':
														if !_rules[ruleMECHANISM]() {
															goto l39
														}
													case 't':
														if !_rules[ruleTYPE]() {
															goto l39
														}
													default:
														if !_rules[ruleNAME]() {
															goto l39
														}
													}
												}

											}
										l44:
											if !_rules[rule_]() {
												goto l39
											}
											add(ruleItemKey, position43)
										}
									l41:
										{
											position42, tokenIndex42 := position, tokenIndex
											{
												position47 := position
												{
													position48, tokenIndex48 := position, tokenIndex
													if !_rules[ruleEXTERNAL]() {
														goto l49
													}
													goto l48
												l49:
													position, tokenIndex = position48, tokenIndex48
													{
														switch buffer[position] {
														case 'e':
															if !_rules[ruleEXPANDED]() {
																goto l42
															}
														case 'm':
															if !_rules[ruleMECHANISM]() {
																goto l42
															}
														case 't':
															if !_rules[ruleTYPE]() {
																goto l42
															}
														default:
															if !_rules[ruleNAME]() {
																goto l42
															}
														}
													}

												}
											l48:
												if !_rules[rule_]() {
													goto l42
												}
												add(ruleItemKey, position47)
											}
											goto l41
										l42:
											position, tokenIndex = position42, tokenIndex42
										}
										add(ruleItemKeys, position40)
									}
									goto l33
								l39:
									position, tokenIndex = position33, tokenIndex33
									if !_rules[ruleRel]() {
										goto l51
									}
									{
										position52, tokenIndex52 := position, tokenIndex
										if !_rules[ruleCREATE]() {
											goto l53
										}
										goto l52
									l53:
										position, tokenIndex = position52, tokenIndex52
										if !_rules[ruleSET]() {
											goto l51
										}
									}
								l52:
									if !_rules[ruleDualIdentifier]() {
										goto l51
									}
									{
										position54, tokenIndex54 := position, tokenIndex
										if !_rules[ruleRelParams]() {
											goto l54
										}
										goto l55
									l54:
										position, tokenIndex = position54, tokenIndex54
									}
								l55:
									goto l33
								l51:
									position, tokenIndex = position33, tokenIndex33
									if !_rules[ruleRel]() {
										goto l56
									}
									if !_rules[ruleCLEAR]() {
										goto l56
									}
									if !_rules[ruleDualIdentifier]() {
										goto l56
									}
									{
										position57 := position
										{
											position60 := position
											{
												switch buffer[position] {
												case 'e':
													if !_rules[ruleEXPANDED]() {
														goto l56
													}
												case 'a':
													if !_rules[ruleASYNC]() {
														goto l56
													}
												case 'm':
													if !_rules[ruleMECHANISM]() {
														goto l56
													}
												default:
													if !_rules[ruleVERB]() {
														goto l56
													}
												}
											}

											if !_rules[rule_]() {
												goto l56
											}
											add(ruleRelKey, position60)
										}
									l58:
										{
											position59, tokenIndex59 := position, tokenIndex
											{
												position62 := position
												{
													switch buffer[position] {
													case 'e':
														if !_rules[ruleEXPANDED]() {
															goto l59
														}
													case 'a':
														if !_rules[ruleASYNC]() {
															goto l59
														}
													case 'm':
														if !_rules[ruleMECHANISM]() {
															goto l59
														}
													default:
														if !_rules[ruleVERB]() {
															goto l59
														}
													}
												}

												if !_rules[rule_]() {
													goto l59
												}
												add(ruleRelKey, position62)
											}
											goto l58
										l59:
											position, tokenIndex = position59, tokenIndex59
										}
										add(ruleRelKeys, position57)
									}
									goto l33
								l56:
									position, tokenIndex = position33, tokenIndex33
									{
										switch buffer[position] {
										case 'f':
											if !_rules[ruleFREE]() {
												goto l31
											}
											if !_rules[ruleIdentifier]() {
												goto l31
											}
										l65:
											{
												position66, tokenIndex66 := position, tokenIndex
												if !_rules[ruleIdentifier]() {
													goto l66
												}
												goto l65
											l66:
												position, tokenIndex = position66, tokenIndex66
											}
										case 'n':
											if !_rules[ruleNEST]() {
												goto l31
											}
											if !_rules[ruleIdentifier]() {
												goto l31
											}
										l67:
											{
												position68, tokenIndex68 := position, tokenIndex
												if !_rules[ruleIdentifier]() {
													goto l68
												}
												goto l67
											l68:
												position, tokenIndex = position68, tokenIndex68
											}
											if !_rules[ruleIN]() {
												goto l31
											}
											if !_rules[ruleIdentifier]() {
												goto l31
											}
										case 'r':
											if !_rules[ruleRel]() {
												goto l31
											}
											if !_rules[ruleDELETE]() {
												goto l31
											}
											if !_rules[ruleDualIdentifier]() {
												goto l31
											}
										default:
											if !_rules[ruleItem]() {
												goto l31
											}
											if !_rules[ruleDELETE]() {
												goto l31
											}
											if !_rules[ruleIdentifier]() {
												goto l31
											}
										}
									}

								}
							l33:
								add(ruleMutation, position32)
							}
							goto l30
						l31:
							position, tokenIndex = position30, tokenIndex30
							{
								position70 := position
								{
									position71, tokenIndex71 := position, tokenIndex
									{
										position73 := position
										{
											position74, tokenIndex74 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l75
											}
											if !_rules[ruleFETCH]() {
												goto l75
											}
											if !_rules[ruleIdentifier]() {
												goto l75
											}
											goto l74
										l75:
											position, tokenIndex = position74, tokenIndex74
											{
												position77 := position
												if !_rules[ruleItem]() {
													goto l76
												}
												if !_rules[ruleLIST]() {
													goto l76
												}
												{
													position78, tokenIndex78 := position, tokenIndex
													if !_rules[ruleNumber]() {
														goto l78
													}
													goto l79
												l78:
													position, tokenIndex = position78, tokenIndex78
												}
											l79:
												add(ruleItemsList, position77)
											}
											goto l74
										l76:
											position, tokenIndex = position74, tokenIndex74
											if !_rules[ruleRel]() {
												goto l80
											}
											if !_rules[ruleFETCH]() {
												goto l80
											}
											if !_rules[ruleDualIdentifier]() {
												goto l80
											}
											goto l74
										l80:
											position, tokenIndex = position74, tokenIndex74
											if !_rules[ruleRel]() {
												goto l81
											}
											if !_rules[ruleIdentifier]() {
												goto l81
											}
											{
												position82, tokenIndex82 := position, tokenIndex
												if !_rules[ruleIdentifier]() {
													goto l82
												}
												goto l81
											l82:
												position, tokenIndex = position82, tokenIndex82
											}
											goto l74
										l81:
											position, tokenIndex = position74, tokenIndex74
											if !_rules[ruleIN_QUERY]() {
												goto l83
											}
											if !_rules[ruleIdentifier]() {
												goto l83
											}
											goto l74
										l83:
											position, tokenIndex = position74, tokenIndex74
											{
												switch buffer[position] {
												case 'w':
													if !_rules[ruleWORLD]() {
														goto l72
													}
												case 'i':
													if !_rules[ruleItem]() {
														goto l72
													}
													if !_rules[ruleIN]() {
														goto l72
													}
													if !_rules[ruleIdentifier]() {
														goto l72
													}
												default:
													{
														position85 := position
														if !_rules[ruleRel]() {
															goto l72
														}
														if !_rules[ruleLIST]() {
															goto l72
														}
														{
															position86, tokenIndex86 := position, tokenIndex
															if !_rules[ruleNumber]() {
																goto l86
															}
															goto l87
														l86:
															position, tokenIndex = position86, tokenIndex86
														}
													l87:
														add(ruleRelsList, position85)
													}
												}
											}

										}
									l74:
										add(ruleFetchQuery, position73)
									}
									goto l71
								l72:
									position, tokenIndex = position71, tokenIndex71
									{
										position88 := position
										{
											position89, tokenIndex89 := position, tokenIndex
											{
												position91 := position
												{
													position92, tokenIndex92 := position, tokenIndex
													if !_rules[ruleITEM_EXISTS]() {
														goto l93
													}
													goto l92
												l93:
													position, tokenIndex = position92, tokenIndex92
													if !_rules[ruleItem]() {
														goto l90
													}
													if !_rules[ruleEXISTS]() {
														goto l90
													}
												}
											l92:
												add(ruleItemExists, position91)
											}
											if !_rules[ruleIdentifier]() {
												goto l90
											}
											goto l89
										l90:
											position, tokenIndex = position89, tokenIndex89
											{
												position94 := position
												{
													position95, tokenIndex95 := position, tokenIndex
													if !_rules[ruleREL_EXISTS]() {
														goto l96
													}
													goto l95
												l96:
													position, tokenIndex = position95, tokenIndex95
													if !_rules[ruleRel]() {
														goto l69
													}
													if !_rules[ruleEXISTS]() {
														goto l69
													}
												}
											l95:
												add(ruleRelExists, position94)
											}
											if !_rules[ruleDualIdentifier]() {
												goto l69
											}
										}
									l89:
										add(ruleExistsQuery, position88)
									}
								}
							l71:
								add(ruleQuery, position70)
							}
							goto l30
						l69:
							position, tokenIndex = position30, tokenIndex30
							{
								position97 := position
								{
									position98, tokenIndex98 := position, tokenIndex
									{
										position100 := position
										{
											position101, tokenIndex101 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l102
											}
											if !_rules[ruleIdentifier]() {
												goto l102
											}
											{
												position103, tokenIndex103 := position, tokenIndex
												if !_rules[ruleItemParams]() {
													goto l103
												}
												goto l102
											l103:
												position, tokenIndex = position103, tokenIndex103
											}
											goto l101
										l102:
											position, tokenIndex = position101, tokenIndex101
											if !_rules[ruleRel]() {
												goto l99
											}
											if !_rules[ruleDualIdentifier]() {
												goto l99
											}
											{
												position104, tokenIndex104 := position, tokenIndex
												if !_rules[ruleRelParams]() {
													goto l104
												}
												goto l99
											l104:
												position, tokenIndex = position104, tokenIndex104
											}
										}
									l101:
										add(ruleCreateOrFetch, position100)
									}
									goto l98
								l99:
									position, tokenIndex = position98, tokenIndex98
									{
										position105 := position
										{
											position106, tokenIndex106 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l107
											}
											if !_rules[ruleIdentifier]() {
												goto l107
											}
											if !_rules[ruleItemParams]() {
												goto l107
											}
											goto l106
										l107:
											position, tokenIndex = position106, tokenIndex106
											if !_rules[ruleRel]() {
												goto l0
											}
											if !_rules[ruleDualIdentifier]() {
												goto l0
											}
											if !_rules[ruleRelParams]() {
												goto l0
											}
										}
									l106:
										add(ruleCreateOrSet, position105)
									}
								}
							l98:
								add(ruleStateBound, position97)
							}
						}
					l30:
					l108:
						{
							position109, tokenIndex109 := position, tokenIndex
							{
								position110 := position
								{
									position111, tokenIndex111 := position, tokenIndex
									{
										position113 := position
										if !_rules[ruleFLAG]() {
											goto l112
										}
										{
											position114 := position
											if buffer[position] != rune('s') {
												goto l112
											}
											position++
											if buffer[position] != rune('t') {
												goto l112
											}
											position++
											if buffer[position] != rune('r') {
												goto l112
											}
											position++
											if buffer[position] != rune('i') {
												goto l112
											}
											position++
											if buffer[position] != rune('c') {
												goto l112
											}
											position++
											if buffer[position] != rune('t') {
												goto l112
											}
											position++
											if !_rules[rule_]() {
												goto l112
											}
											add(ruleSTRICT, position114)
										}
										add(ruleStrictFlag, position113)
									}
									goto l111
								l112:
									position, tokenIndex = position111, tokenIndex111
									{
										position116 := position
										if !_rules[ruleFLAG]() {
											goto l115
										}
										{
											position117 := position
											if buffer[position] != rune('v') {
												goto l115
											}
											position++
											if buffer[position] != rune('e') {
												goto l115
											}
											position++
											if buffer[position] != rune('r') {
												goto l115
											}
											position++
											if buffer[position] != rune('b') {
												goto l115
											}
											position++
											if buffer[position] != rune('o') {
												goto l115
											}
											position++
											if buffer[position] != rune('s') {
												goto l115
											}
											position++
											if buffer[position] != rune('e') {
												goto l115
											}
											position++
											if !_rules[rule_]() {
												goto l115
											}
											add(ruleVERBOSE, position117)
										}
										add(ruleVerboseFlag, position116)
									}
									goto l111
								l115:
									position, tokenIndex = position111, tokenIndex111
									{
										position118 := position
										if !_rules[ruleFLAG]() {
											goto l109
										}
										if !_rules[ruleIDS]() {
											goto l109
										}
										add(ruleIdsFlag, position118)
									}
								}
							l111:
								add(ruleFlag, position110)
							}
							goto l108
						l109:
							position, tokenIndex = position109, tokenIndex109
						}
						if !_rules[ruleEND]() {
							goto l0
						}
						add(ruleCommand, position29)
					}
				}
			l2:
				add(ruleValid, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Response <- <(Object? _ EOL Error? END)> */
		nil,
		/* 2 Command <- <(_ (Mutation / Query / StateBound) Flag* END)> */
		nil,
		/* 3 Mutation <- <((Item (CREATE / SET) Identifier ItemParams?) / (Item CLEAR Identifier ItemKeys) / (Rel (CREATE / SET) DualIdentifier RelParams?) / (Rel CLEAR DualIdentifier RelKeys) / ((&('f') (FREE Identifier+)) | (&('n') (NEST Identifier+ IN Identifier)) | (&('r') (Rel DELETE DualIdentifier)) | (&('i') (Item DELETE Identifier))))> */
		nil,
		/* 4 Query <- <(FetchQuery / ExistsQuery)> */
		nil,
		/* 5 FetchQuery <- <((Item FETCH Identifier) / ItemsList / (Rel FETCH DualIdentifier) / (Rel Identifier !Identifier) / (IN_QUERY Identifier) / ((&('w') WORLD) | (&('i') (Item IN Identifier)) | (&('r') RelsList)))> */
		nil,
		/* 6 ExistsQuery <- <((ItemExists Identifier) / (RelExists DualIdentifier))> */
		nil,
		/* 7 StateBound <- <(CreateOrFetch / CreateOrSet)> */
		nil,
		/* 8 CreateOrFetch <- <((Item Identifier !ItemParams) / (Rel DualIdentifier !RelParams))> */
		nil,
		/* 9 CreateOrSet <- <((Item Identifier ItemParams) / (Rel DualIdentifier RelParams))> */
		nil,
		/* 10 Object <- <(ItemObject / ((&('i') IdsList) | (&('r') RelObject) | (&('w') WorldObject)))> */
		nil,
		/* 11 WorldObject <- <(WORLD .* _)> */
		nil,
		/* 12 ItemObject <- <(Item Identifier ItemParams?)> */
		nil,
		/* 13 RelObject <- <(Rel DualIdentifier RelParams?)> */
		nil,
		/* 14 IdsList <- <(IDS StringLike* _)> */
		nil,
		/* 15 DualIdentifier <- <(Identifier Identifier)> */
		func() bool {
			position133, tokenIndex133 := position, tokenIndex
			{
				position134 := position
				if !_rules[ruleIdentifier]() {
					goto l133
				}
				if !_rules[ruleIdentifier]() {
					goto l133
				}
				add(ruleDualIdentifier, position134)
			}
			return true
		l133:
			position, tokenIndex = position133, tokenIndex133
			return false
		},
		/* 16 Identifier <- <(!Keyword StringLike)> */
		func() bool {
			position135, tokenIndex135 := position, tokenIndex
			{
				position136 := position
				{
					position137, tokenIndex137 := position, tokenIndex
					{
						position138 := position
						{
							position139, tokenIndex139 := position, tokenIndex
							if !_rules[ruleITEM]() {
								goto l140
							}
							goto l139
						l140:
							position, tokenIndex = position139, tokenIndex139
							if !_rules[ruleITEM_EXISTS]() {
								goto l141
							}
							goto l139
						l141:
							position, tokenIndex = position139, tokenIndex139
							if !_rules[ruleREL]() {
								goto l142
							}
							goto l139
						l142:
							position, tokenIndex = position139, tokenIndex139
							{
								position144 := position
								if buffer[position] != rune('f') {
									goto l143
								}
								position++
								if buffer[position] != rune('r') {
									goto l143
								}
								position++
								if buffer[position] != rune('o') {
									goto l143
								}
								position++
								if buffer[position] != rune('m') {
									goto l143
								}
								position++
								if buffer[position] != rune('?') {
									goto l143
								}
								position++
								if !_rules[rule_]() {
									goto l143
								}
								add(ruleFROM_QUERY, position144)
							}
							goto l139
						l143:
							position, tokenIndex = position139, tokenIndex139
							if !_rules[ruleIN]() {
								goto l145
							}
							goto l139
						l145:
							position, tokenIndex = position139, tokenIndex139
							if !_rules[ruleCREATE]() {
								goto l146
							}
							goto l139
						l146:
							position, tokenIndex = position139, tokenIndex139
							if !_rules[ruleFETCH]() {
								goto l147
							}
							goto l139
						l147:
							position, tokenIndex = position139, tokenIndex139
							{
								switch buffer[position] {
								case '-':
									if !_rules[ruleFLAG]() {
										goto l137
									}
								case 'n':
									if !_rules[ruleNEST]() {
										goto l137
									}
								case 'f':
									if !_rules[ruleFREE]() {
										goto l137
									}
								case 'e':
									if !_rules[ruleEXISTS]() {
										goto l137
									}
								case 'c':
									if !_rules[ruleCLEAR]() {
										goto l137
									}
								case 's':
									if !_rules[ruleSET]() {
										goto l137
									}
								case 'd':
									if !_rules[ruleDELETE]() {
										goto l137
									}
								case 'i':
									if !_rules[ruleIN_QUERY]() {
										goto l137
									}
								case 't':
									{
										position149 := position
										if buffer[position] != rune('t') {
											goto l137
										}
										position++
										if buffer[position] != rune('o') {
											goto l137
										}
										position++
										if buffer[position] != rune('?') {
											goto l137
										}
										position++
										if !_rules[rule_]() {
											goto l137
										}
										add(ruleTO_QUERY, position149)
									}
								default:
									if !_rules[ruleREL_EXISTS]() {
										goto l137
									}
								}
							}

						}
					l139:
						add(ruleKeyword, position138)
					}
					goto l135
				l137:
					position, tokenIndex = position137, tokenIndex137
				}
				if !_rules[ruleStringLike]() {
					goto l135
				}
				add(ruleIdentifier, position136)
			}
			return true
		l135:
			position, tokenIndex = position135, tokenIndex135
			return false
		},
		/* 17 ItemParams <- <ItemParam+> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				{
					position154 := position
					{
						position155, tokenIndex155 := position, tokenIndex
						if !_rules[ruleEXTERNAL]() {
							goto l156
						}
						if !_rules[ruleEQUALS]() {
							goto l156
						}
						if !_rules[ruleBoolean]() {
							goto l156
						}
						goto l155
					l156:
						position, tokenIndex = position155, tokenIndex155
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l150
								}
								if !_rules[ruleEQUALS]() {
									goto l150
								}
								if !_rules[ruleStringLike]() {
									goto l150
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l150
								}
								if !_rules[ruleEQUALS]() {
									goto l150
								}
								if !_rules[ruleStringLike]() {
									goto l150
								}
							case 'n':
								if !_rules[ruleNAME]() {
									goto l150
								}
								if !_rules[ruleEQUALS]() {
									goto l150
								}
								if !_rules[ruleStringLike]() {
									goto l150
								}
							default:
								if !_rules[ruleTYPE]() {
									goto l150
								}
								if !_rules[ruleEQUALS]() {
									goto l150
								}
								{
									position158 := position
									{
										position159, tokenIndex159 := position, tokenIndex
										{
											position161 := position
											if buffer[position] != rune('d') {
												goto l160
											}
											position++
											if buffer[position] != rune('a') {
												goto l160
											}
											position++
											if buffer[position] != rune('t') {
												goto l160
											}
											position++
											if buffer[position] != rune('a') {
												goto l160
											}
											position++
											if buffer[position] != rune('b') {
												goto l160
											}
											position++
											if buffer[position] != rune('a') {
												goto l160
											}
											position++
											if buffer[position] != rune('s') {
												goto l160
											}
											position++
											if buffer[position] != rune('e') {
												goto l160
											}
											position++
											if !_rules[rule_]() {
												goto l160
											}
											add(ruleDATABASE, position161)
										}
										goto l159
									l160:
										position, tokenIndex = position159, tokenIndex159
										{
											position163 := position
											if buffer[position] != rune('b') {
												goto l162
											}
											position++
											if buffer[position] != rune('l') {
												goto l162
											}
											position++
											if buffer[position] != rune('o') {
												goto l162
											}
											position++
											if buffer[position] != rune('b') {
												goto l162
											}
											position++
											if buffer[position] != rune('s') {
												goto l162
											}
											position++
											if buffer[position] != rune('t') {
												goto l162
											}
											position++
											if buffer[position] != rune('o') {
												goto l162
											}
											position++
											if buffer[position] != rune('r') {
												goto l162
											}
											position++
											if buffer[position] != rune('e') {
												goto l162
											}
											position++
											if !_rules[rule_]() {
												goto l162
											}
											add(ruleBLOBSTORE, position163)
										}
										goto l159
									l162:
										position, tokenIndex = position159, tokenIndex159
										{
											switch buffer[position] {
											case 'c':
												{
													position165 := position
													if buffer[position] != rune('c') {
														goto l150
													}
													position++
													if buffer[position] != rune('o') {
														goto l150
													}
													position++
													if buffer[position] != rune('d') {
														goto l150
													}
													position++
													if buffer[position] != rune('e') {
														goto l150
													}
													position++
													if !_rules[rule_]() {
														goto l150
													}
													add(ruleCODE, position165)
												}
											case 'd':
												{
													position166 := position
													if buffer[position] != rune('d') {
														goto l150
													}
													position++
													if buffer[position] != rune('e') {
														goto l150
													}
													position++
													if buffer[position] != rune('v') {
														goto l150
													}
													position++
													if buffer[position] != rune('i') {
														goto l150
													}
													position++
													if buffer[position] != rune('c') {
														goto l150
													}
													position++
													if buffer[position] != rune('e') {
														goto l150
													}
													position++
													if !_rules[rule_]() {
														goto l150
													}
													add(ruleDEVICE, position166)
												}
											case 's':
												{
													position167 := position
													if buffer[position] != rune('s') {
														goto l150
													}
													position++
													if buffer[position] != rune('e') {
														goto l150
													}
													position++
													if buffer[position] != rune('r') {
														goto l150
													}
													position++
													if buffer[position] != rune('v') {
														goto l150
													}
													position++
													if buffer[position] != rune('e') {
														goto l150
													}
													position++
													if buffer[position] != rune('r') {
														goto l150
													}
													position++
													if !_rules[rule_]() {
														goto l150
													}
													add(ruleSERVER, position167)
												}
											case 'm':
												{
													position168 := position
													if buffer[position] != rune('m') {
														goto l150
													}
													position++
													if buffer[position] != rune('o') {
														goto l150
													}
													position++
													if buffer[position] != rune('b') {
														goto l150
													}
													position++
													if buffer[position] != rune('i') {
														goto l150
													}
													position++
													if buffer[position] != rune('l') {
														goto l150
													}
													position++
													if buffer[position] != rune('e') {
														goto l150
													}
													position++
													if !_rules[rule_]() {
														goto l150
													}
													add(ruleMOBILE, position168)
												}
											case 'b':
												{
													position169 := position
													if buffer[position] != rune('b') {
														goto l150
													}
													position++
													if buffer[position] != rune('r') {
														goto l150
													}
													position++
													if buffer[position] != rune('o') {
														goto l150
													}
													position++
													if buffer[position] != rune('w') {
														goto l150
													}
													position++
													if buffer[position] != rune('s') {
														goto l150
													}
													position++
													if buffer[position] != rune('e') {
														goto l150
													}
													position++
													if buffer[position] != rune('r') {
														goto l150
													}
													position++
													if !_rules[rule_]() {
														goto l150
													}
													add(ruleBROWSER, position169)
												}
											case 'q':
												{
													position170 := position
													if buffer[position] != rune('q') {
														goto l150
													}
													position++
													if buffer[position] != rune('u') {
														goto l150
													}
													position++
													if buffer[position] != rune('e') {
														goto l150
													}
													position++
													if buffer[position] != rune('u') {
														goto l150
													}
													position++
													if buffer[position] != rune('e') {
														goto l150
													}
													position++
													if !_rules[rule_]() {
														goto l150
													}
													add(ruleQUEUE, position170)
												}
											default:
												{
													position171 := position
													if buffer[position] != rune('p') {
														goto l150
													}
													position++
													if buffer[position] != rune('e') {
														goto l150
													}
													position++
													if buffer[position] != rune('r') {
														goto l150
													}
													position++
													if buffer[position] != rune('s') {
														goto l150
													}
													position++
													if buffer[position] != rune('o') {
														goto l150
													}
													position++
													if buffer[position] != rune('n') {
														goto l150
													}
													position++
													if !_rules[rule_]() {
														goto l150
													}
													add(rulePERSON, position171)
												}
											}
										}

									}
								l159:
									add(ruleItemType, position158)
								}
							}
						}

					}
				l155:
					add(ruleItemParam, position154)
				}
			l152:
				{
					position153, tokenIndex153 := position, tokenIndex
					{
						position172 := position
						{
							position173, tokenIndex173 := position, tokenIndex
							if !_rules[ruleEXTERNAL]() {
								goto l174
							}
							if !_rules[ruleEQUALS]() {
								goto l174
							}
							if !_rules[ruleBoolean]() {
								goto l174
							}
							goto l173
						l174:
							position, tokenIndex = position173, tokenIndex173
							{
								switch buffer[position] {
								case 'e':
									if !_rules[ruleEXPANDED]() {
										goto l153
									}
									if !_rules[ruleEQUALS]() {
										goto l153
									}
									if !_rules[ruleStringLike]() {
										goto l153
									}
								case 'm':
									if !_rules[ruleMECHANISM]() {
										goto l153
									}
									if !_rules[ruleEQUALS]() {
										goto l153
									}
									if !_rules[ruleStringLike]() {
										goto l153
									}
								case 'n':
									if !_rules[ruleNAME]() {
										goto l153
									}
									if !_rules[ruleEQUALS]() {
										goto l153
									}
									if !_rules[ruleStringLike]() {
										goto l153
									}
								default:
									if !_rules[ruleTYPE]() {
										goto l153
									}
									if !_rules[ruleEQUALS]() {
										goto l153
									}
									{
										position176 := position
										{
											position177, tokenIndex177 := position, tokenIndex
											{
												position179 := position
												if buffer[position] != rune('d') {
													goto l178
												}
												position++
												if buffer[position] != rune('a') {
													goto l178
												}
												position++
												if buffer[position] != rune('t') {
													goto l178
												}
												position++
												if buffer[position] != rune('a') {
													goto l178
												}
												position++
												if buffer[position] != rune('b') {
													goto l178
												}
												position++
												if buffer[position] != rune('a') {
													goto l178
												}
												position++
												if buffer[position] != rune('s') {
													goto l178
												}
												position++
												if buffer[position] != rune('e') {
													goto l178
												}
												position++
												if !_rules[rule_]() {
													goto l178
												}
												add(ruleDATABASE, position179)
											}
											goto l177
										l178:
											position, tokenIndex = position177, tokenIndex177
											{
												position181 := position
												if buffer[position] != rune('b') {
													goto l180
												}
												position++
												if buffer[position] != rune('l') {
													goto l180
												}
												position++
												if buffer[position] != rune('o') {
													goto l180
												}
												position++
												if buffer[position] != rune('b') {
													goto l180
												}
												position++
												if buffer[position] != rune('s') {
													goto l180
												}
												position++
												if buffer[position] != rune('t') {
													goto l180
												}
												position++
												if buffer[position] != rune('o') {
													goto l180
												}
												position++
												if buffer[position] != rune('r') {
													goto l180
												}
												position++
												if buffer[position] != rune('e') {
													goto l180
												}
												position++
												if !_rules[rule_]() {
													goto l180
												}
												add(ruleBLOBSTORE, position181)
											}
											goto l177
										l180:
											position, tokenIndex = position177, tokenIndex177
											{
												switch buffer[position] {
												case 'c':
													{
														position183 := position
														if buffer[position] != rune('c') {
															goto l153
														}
														position++
														if buffer[position] != rune('o') {
															goto l153
														}
														position++
														if buffer[position] != rune('d') {
															goto l153
														}
														position++
														if buffer[position] != rune('e') {
															goto l153
														}
														position++
														if !_rules[rule_]() {
															goto l153
														}
														add(ruleCODE, position183)
													}
												case 'd':
													{
														position184 := position
														if buffer[position] != rune('d') {
															goto l153
														}
														position++
														if buffer[position] != rune('e') {
															goto l153
														}
														position++
														if buffer[position] != rune('v') {
															goto l153
														}
														position++
														if buffer[position] != rune('i') {
															goto l153
														}
														position++
														if buffer[position] != rune('c') {
															goto l153
														}
														position++
														if buffer[position] != rune('e') {
															goto l153
														}
														position++
														if !_rules[rule_]() {
															goto l153
														}
														add(ruleDEVICE, position184)
													}
												case 's':
													{
														position185 := position
														if buffer[position] != rune('s') {
															goto l153
														}
														position++
														if buffer[position] != rune('e') {
															goto l153
														}
														position++
														if buffer[position] != rune('r') {
															goto l153
														}
														position++
														if buffer[position] != rune('v') {
															goto l153
														}
														position++
														if buffer[position] != rune('e') {
															goto l153
														}
														position++
														if buffer[position] != rune('r') {
															goto l153
														}
														position++
														if !_rules[rule_]() {
															goto l153
														}
														add(ruleSERVER, position185)
													}
												case 'm':
													{
														position186 := position
														if buffer[position] != rune('m') {
															goto l153
														}
														position++
														if buffer[position] != rune('o') {
															goto l153
														}
														position++
														if buffer[position] != rune('b') {
															goto l153
														}
														position++
														if buffer[position] != rune('i') {
															goto l153
														}
														position++
														if buffer[position] != rune('l') {
															goto l153
														}
														position++
														if buffer[position] != rune('e') {
															goto l153
														}
														position++
														if !_rules[rule_]() {
															goto l153
														}
														add(ruleMOBILE, position186)
													}
												case 'b':
													{
														position187 := position
														if buffer[position] != rune('b') {
															goto l153
														}
														position++
														if buffer[position] != rune('r') {
															goto l153
														}
														position++
														if buffer[position] != rune('o') {
															goto l153
														}
														position++
														if buffer[position] != rune('w') {
															goto l153
														}
														position++
														if buffer[position] != rune('s') {
															goto l153
														}
														position++
														if buffer[position] != rune('e') {
															goto l153
														}
														position++
														if buffer[position] != rune('r') {
															goto l153
														}
														position++
														if !_rules[rule_]() {
															goto l153
														}
														add(ruleBROWSER, position187)
													}
												case 'q':
													{
														position188 := position
														if buffer[position] != rune('q') {
															goto l153
														}
														position++
														if buffer[position] != rune('u') {
															goto l153
														}
														position++
														if buffer[position] != rune('e') {
															goto l153
														}
														position++
														if buffer[position] != rune('u') {
															goto l153
														}
														position++
														if buffer[position] != rune('e') {
															goto l153
														}
														position++
														if !_rules[rule_]() {
															goto l153
														}
														add(ruleQUEUE, position188)
													}
												default:
													{
														position189 := position
														if buffer[position] != rune('p') {
															goto l153
														}
														position++
														if buffer[position] != rune('e') {
															goto l153
														}
														position++
														if buffer[position] != rune('r') {
															goto l153
														}
														position++
														if buffer[position] != rune('s') {
															goto l153
														}
														position++
														if buffer[position] != rune('o') {
															goto l153
														}
														position++
														if buffer[position] != rune('n') {
															goto l153
														}
														position++
														if !_rules[rule_]() {
															goto l153
														}
														add(rulePERSON, position189)
													}
												}
											}

										}
									l177:
										add(ruleItemType, position176)
									}
								}
							}

						}
					l173:
						add(ruleItemParam, position172)
					}
					goto l152
				l153:
					position, tokenIndex = position153, tokenIndex153
				}
				add(ruleItemParams, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 18 RelParams <- <RelParam+> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				{
					position194 := position
					{
						switch buffer[position] {
						case 'e':
							if !_rules[ruleEXPANDED]() {
								goto l190
							}
							if !_rules[ruleEQUALS]() {
								goto l190
							}
							if !_rules[ruleStringLike]() {
								goto l190
							}
						case 'a':
							if !_rules[ruleASYNC]() {
								goto l190
							}
							if !_rules[ruleEQUALS]() {
								goto l190
							}
							if !_rules[ruleBoolean]() {
								goto l190
							}
						case 'm':
							if !_rules[ruleMECHANISM]() {
								goto l190
							}
							if !_rules[ruleEQUALS]() {
								goto l190
							}
							if !_rules[ruleStringLike]() {
								goto l190
							}
						default:
							if !_rules[ruleVERB]() {
								goto l190
							}
							if !_rules[ruleEQUALS]() {
								goto l190
							}
							if !_rules[ruleStringLike]() {
								goto l190
							}
						}
					}

					add(ruleRelParam, position194)
				}
			l192:
				{
					position193, tokenIndex193 := position, tokenIndex
					{
						position196 := position
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l193
								}
								if !_rules[ruleEQUALS]() {
									goto l193
								}
								if !_rules[ruleStringLike]() {
									goto l193
								}
							case 'a':
								if !_rules[ruleASYNC]() {
									goto l193
								}
								if !_rules[ruleEQUALS]() {
									goto l193
								}
								if !_rules[ruleBoolean]() {
									goto l193
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l193
								}
								if !_rules[ruleEQUALS]() {
									goto l193
								}
								if !_rules[ruleStringLike]() {
									goto l193
								}
							default:
								if !_rules[ruleVERB]() {
									goto l193
								}
								if !_rules[ruleEQUALS]() {
									goto l193
								}
								if !_rules[ruleStringLike]() {
									goto l193
								}
							}
						}

						add(ruleRelParam, position196)
					}
					goto l192
				l193:
					position, tokenIndex = position193, tokenIndex193
				}
				add(ruleRelParams, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 19 ItemParam <- <((EXTERNAL EQUALS Boolean) / ((&('e') (EXPANDED EQUALS StringLike)) | (&('m') (MECHANISM EQUALS StringLike)) | (&('n') (NAME EQUALS StringLike)) | (&('t') (TYPE EQUALS ItemType))))> */
		nil,
		/* 20 RelParam <- <((&('e') (EXPANDED EQUALS StringLike)) | (&('a') (ASYNC EQUALS Boolean)) | (&('m') (MECHANISM EQUALS StringLike)) | (&('v') (VERB EQUALS StringLike)))> */
		nil,
		/* 21 ItemKeys <- <ItemKey+> */
		nil,
		/* 22 RelKeys <- <RelKey+> */
		nil,
		/* 23 ItemKey <- <((EXTERNAL / ((&('e') EXPANDED) | (&('m') MECHANISM) | (&('t') TYPE) | (&('n') NAME))) _)> */
		nil,
		/* 24 RelKey <- <(((&('e') EXPANDED) | (&('a') ASYNC) | (&('m') MECHANISM) | (&('v') VERB)) _)> */
		nil,
		/* 25 Error <- <(ERROR StringLike*)> */
		nil,
		/* 26 StringLike <- <((Text / QuotedText) _)> */
		func() bool {
			position205, tokenIndex205 := position, tokenIndex
			{
				position206 := position
				{
					position207, tokenIndex207 := position, tokenIndex
					{
						position209 := position
						{
							switch buffer[position] {
							case '_':
								if buffer[position] != rune('_') {
									goto l208
								}
								position++
							case '-':
								if buffer[position] != rune('-') {
									goto l208
								}
								position++
							case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l208
								}
								position++
							case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l208
								}
								position++
							default:
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l208
								}
								position++
							}
						}

					l210:
						{
							position211, tokenIndex211 := position, tokenIndex
							{
								switch buffer[position] {
								case '_':
									if buffer[position] != rune('_') {
										goto l211
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l211
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l211
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l211
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l211
									}
									position++
								}
							}

							goto l210
						l211:
							position, tokenIndex = position211, tokenIndex211
						}
						add(ruleText, position209)
					}
					goto l207
				l208:
					position, tokenIndex = position207, tokenIndex207
					{
						position214 := position
						if !_rules[ruleQUOTE]() {
							goto l205
						}
					l215:
						{
							position216, tokenIndex216 := position, tokenIndex
							{
								switch buffer[position] {
								case ' ':
									if buffer[position] != rune(' ') {
										goto l216
									}
									position++
								case ':':
									if buffer[position] != rune(':') {
										goto l216
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l216
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l216
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l216
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l216
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l216
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l216
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l216
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l216
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l216
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l216
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l216
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l216
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l216
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l216
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l216
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l216
									}
									position++
								case ',':
									if buffer[position] != rune(',') {
										goto l216
									}
									position++
								case '.':
									if buffer[position] != rune('.') {
										goto l216
									}
									position++
								case '_':
									if buffer[position] != rune('_') {
										goto l216
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l216
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l216
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l216
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l216
									}
									position++
								}
							}

							goto l215
						l216:
							position, tokenIndex = position216, tokenIndex216
						}
						if !_rules[ruleQUOTE]() {
							goto l205
						}
						add(ruleQuotedText, position214)
					}
				}
			l207:
				if !_rules[rule_]() {
					goto l205
				}
				add(ruleStringLike, position206)
			}
			return true
		l205:
			position, tokenIndex = position205, tokenIndex205
			return false
		},
		/* 27 Boolean <- <(TRUE / FALSE)> */
		func() bool {
			position218, tokenIndex218 := position, tokenIndex
			{
				position219 := position
				{
					position220, tokenIndex220 := position, tokenIndex
					{
						position222 := position
						if buffer[position] != rune('t') {
							goto l221
						}
						position++
						if buffer[position] != rune('r') {
							goto l221
						}
						position++
						if buffer[position] != rune('u') {
							goto l221
						}
						position++
						if buffer[position] != rune('e') {
							goto l221
						}
						position++
						if !_rules[rule_]() {
							goto l221
						}
						add(ruleTRUE, position222)
					}
					goto l220
				l221:
					position, tokenIndex = position220, tokenIndex220
					{
						position223 := position
						if buffer[position] != rune('f') {
							goto l218
						}
						position++
						if buffer[position] != rune('a') {
							goto l218
						}
						position++
						if buffer[position] != rune('l') {
							goto l218
						}
						position++
						if buffer[position] != rune('s') {
							goto l218
						}
						position++
						if buffer[position] != rune('e') {
							goto l218
						}
						position++
						if !_rules[rule_]() {
							goto l218
						}
						add(ruleFALSE, position223)
					}
				}
			l220:
				add(ruleBoolean, position219)
			}
			return true
		l218:
			position, tokenIndex = position218, tokenIndex218
			return false
		},
		/* 28 Text <- <((&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))+> */
		nil,
		/* 29 QuotedText <- <(QUOTE ((&(' ') ' ') | (&(':') ':') | (&(';') ';') | (&('~') '~') | (&('=') '=') | (&('+') '+') | (&(']') ']') | (&('[') '[') | (&(')') ')') | (&('(') '(') | (&('*') '*') | (&('&') '&') | (&('^') '^') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('@') '@') | (&('!') '!') | (&(',') ',') | (&('.') '.') | (&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))* QUOTE)> */
		nil,
		/* 30 ItemsList <- <(Item LIST Number?)> */
		nil,
		/* 31 RelsList <- <(Rel LIST Number?)> */
		nil,
		/* 32 Number <- <([0-9]+ _)> */
		func() bool {
			position228, tokenIndex228 := position, tokenIndex
			{
				position229 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l228
				}
				position++
			l230:
				{
					position231, tokenIndex231 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l231
					}
					position++
					goto l230
				l231:
					position, tokenIndex = position231, tokenIndex231
				}
				if !_rules[rule_]() {
					goto l228
				}
				add(ruleNumber, position229)
			}
			return true
		l228:
			position, tokenIndex = position228, tokenIndex228
			return false
		},
		/* 33 ItemType <- <(DATABASE / BLOBSTORE / ((&('c') CODE) | (&('d') DEVICE) | (&('s') SERVER) | (&('m') MOBILE) | (&('b') BROWSER) | (&('q') QUEUE) | (&('p') PERSON)))> */
		nil,
		/* 34 ItemExists <- <(ITEM_EXISTS / (Item EXISTS))> */
		nil,
		/* 35 RelExists <- <(REL_EXISTS / (Rel EXISTS))> */
		nil,
		/* 36 Item <- <ITEM> */
		func() bool {
			position235, tokenIndex235 := position, tokenIndex
			{
				position236 := position
				if !_rules[ruleITEM]() {
					goto l235
				}
				add(ruleItem, position236)
			}
			return true
		l235:
			position, tokenIndex = position235, tokenIndex235
			return false
		},
		/* 37 Rel <- <REL> */
		func() bool {
			position237, tokenIndex237 := position, tokenIndex
			{
				position238 := position
				if !_rules[ruleREL]() {
					goto l237
				}
				add(ruleRel, position238)
			}
			return true
		l237:
			position, tokenIndex = position237, tokenIndex237
			return false
		},
		/* 38 Flag <- <(StrictFlag / VerboseFlag / IdsFlag)> */
		nil,
		/* 39 StrictFlag <- <(FLAG STRICT)> */
		nil,
		/* 40 VerboseFlag <- <(FLAG VERBOSE)> */
		nil,
		/* 41 IdsFlag <- <(FLAG IDS)> */
		nil,
		/* 42 Keyword <- <(ITEM / ITEM_EXISTS / REL / FROM_QUERY / IN / CREATE / FETCH / ((&('-') FLAG) | (&('n') NEST) | (&('f') FREE) | (&('e') EXISTS) | (&('c') CLEAR) | (&('s') SET) | (&('d') DELETE) | (&('i') IN_QUERY) | (&('t') TO_QUERY) | (&('r') REL_EXISTS)))> */
		nil,
		/* 43 WORLD <- <('w' 'o' 'r' 'l' 'd' _)> */
		func() bool {
			position244, tokenIndex244 := position, tokenIndex
			{
				position245 := position
				if buffer[position] != rune('w') {
					goto l244
				}
				position++
				if buffer[position] != rune('o') {
					goto l244
				}
				position++
				if buffer[position] != rune('r') {
					goto l244
				}
				position++
				if buffer[position] != rune('l') {
					goto l244
				}
				position++
				if buffer[position] != rune('d') {
					goto l244
				}
				position++
				if !_rules[rule_]() {
					goto l244
				}
				add(ruleWORLD, position245)
			}
			return true
		l244:
			position, tokenIndex = position244, tokenIndex244
			return false
		},
		/* 44 ITEM <- <('i' 't' 'e' 'm' 's'? _)> */
		func() bool {
			position246, tokenIndex246 := position, tokenIndex
			{
				position247 := position
				if buffer[position] != rune('i') {
					goto l246
				}
				position++
				if buffer[position] != rune('t') {
					goto l246
				}
				position++
				if buffer[position] != rune('e') {
					goto l246
				}
				position++
				if buffer[position] != rune('m') {
					goto l246
				}
				position++
				{
					position248, tokenIndex248 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l248
					}
					position++
					goto l249
				l248:
					position, tokenIndex = position248, tokenIndex248
				}
			l249:
				if !_rules[rule_]() {
					goto l246
				}
				add(ruleITEM, position247)
			}
			return true
		l246:
			position, tokenIndex = position246, tokenIndex246
			return false
		},
		/* 45 ITEM_EXISTS <- <('i' 't' 'e' 'm' '?' _)> */
		func() bool {
			position250, tokenIndex250 := position, tokenIndex
			{
				position251 := position
				if buffer[position] != rune('i') {
					goto l250
				}
				position++
				if buffer[position] != rune('t') {
					goto l250
				}
				position++
				if buffer[position] != rune('e') {
					goto l250
				}
				position++
				if buffer[position] != rune('m') {
					goto l250
				}
				position++
				if buffer[position] != rune('?') {
					goto l250
				}
				position++
				if !_rules[rule_]() {
					goto l250
				}
				add(ruleITEM_EXISTS, position251)
			}
			return true
		l250:
			position, tokenIndex = position250, tokenIndex250
			return false
		},
		/* 46 REL <- <('r' 'e' 'l' 's'? _)> */
		func() bool {
			position252, tokenIndex252 := position, tokenIndex
			{
				position253 := position
				if buffer[position] != rune('r') {
					goto l252
				}
				position++
				if buffer[position] != rune('e') {
					goto l252
				}
				position++
				if buffer[position] != rune('l') {
					goto l252
				}
				position++
				{
					position254, tokenIndex254 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l254
					}
					position++
					goto l255
				l254:
					position, tokenIndex = position254, tokenIndex254
				}
			l255:
				if !_rules[rule_]() {
					goto l252
				}
				add(ruleREL, position253)
			}
			return true
		l252:
			position, tokenIndex = position252, tokenIndex252
			return false
		},
		/* 47 REL_EXISTS <- <('r' 'e' 'l' '?' _)> */
		func() bool {
			position256, tokenIndex256 := position, tokenIndex
			{
				position257 := position
				if buffer[position] != rune('r') {
					goto l256
				}
				position++
				if buffer[position] != rune('e') {
					goto l256
				}
				position++
				if buffer[position] != rune('l') {
					goto l256
				}
				position++
				if buffer[position] != rune('?') {
					goto l256
				}
				position++
				if !_rules[rule_]() {
					goto l256
				}
				add(ruleREL_EXISTS, position257)
			}
			return true
		l256:
			position, tokenIndex = position256, tokenIndex256
			return false
		},
		/* 48 FROM_QUERY <- <('f' 'r' 'o' 'm' '?' _)> */
		nil,
		/* 49 TO_QUERY <- <('t' 'o' '?' _)> */
		nil,
		/* 50 IN <- <('i' 'n' _)> */
		func() bool {
			position260, tokenIndex260 := position, tokenIndex
			{
				position261 := position
				if buffer[position] != rune('i') {
					goto l260
				}
				position++
				if buffer[position] != rune('n') {
					goto l260
				}
				position++
				if !_rules[rule_]() {
					goto l260
				}
				add(ruleIN, position261)
			}
			return true
		l260:
			position, tokenIndex = position260, tokenIndex260
			return false
		},
		/* 51 IN_QUERY <- <('i' 'n' '?' _)> */
		func() bool {
			position262, tokenIndex262 := position, tokenIndex
			{
				position263 := position
				if buffer[position] != rune('i') {
					goto l262
				}
				position++
				if buffer[position] != rune('n') {
					goto l262
				}
				position++
				if buffer[position] != rune('?') {
					goto l262
				}
				position++
				if !_rules[rule_]() {
					goto l262
				}
				add(ruleIN_QUERY, position263)
			}
			return true
		l262:
			position, tokenIndex = position262, tokenIndex262
			return false
		},
		/* 52 CREATE <- <('c' 'r' 'e' 'a' 't' 'e' _)> */
		func() bool {
			position264, tokenIndex264 := position, tokenIndex
			{
				position265 := position
				if buffer[position] != rune('c') {
					goto l264
				}
				position++
				if buffer[position] != rune('r') {
					goto l264
				}
				position++
				if buffer[position] != rune('e') {
					goto l264
				}
				position++
				if buffer[position] != rune('a') {
					goto l264
				}
				position++
				if buffer[position] != rune('t') {
					goto l264
				}
				position++
				if buffer[position] != rune('e') {
					goto l264
				}
				position++
				if !_rules[rule_]() {
					goto l264
				}
				add(ruleCREATE, position265)
			}
			return true
		l264:
			position, tokenIndex = position264, tokenIndex264
			return false
		},
		/* 53 DELETE <- <('d' 'e' 'l' 'e' 't' 'e' _)> */
		func() bool {
			position266, tokenIndex266 := position, tokenIndex
			{
				position267 := position
				if buffer[position] != rune('d') {
					goto l266
				}
				position++
				if buffer[position] != rune('e') {
					goto l266
				}
				position++
				if buffer[position] != rune('l') {
					goto l266
				}
				position++
				if buffer[position] != rune('e') {
					goto l266
				}
				position++
				if buffer[position] != rune('t') {
					goto l266
				}
				position++
				if buffer[position] != rune('e') {
					goto l266
				}
				position++
				if !_rules[rule_]() {
					goto l266
				}
				add(ruleDELETE, position267)
			}
			return true
		l266:
			position, tokenIndex = position266, tokenIndex266
			return false
		},
		/* 54 SET <- <('s' 'e' 't' _)> */
		func() bool {
			position268, tokenIndex268 := position, tokenIndex
			{
				position269 := position
				if buffer[position] != rune('s') {
					goto l268
				}
				position++
				if buffer[position] != rune('e') {
					goto l268
				}
				position++
				if buffer[position] != rune('t') {
					goto l268
				}
				position++
				if !_rules[rule_]() {
					goto l268
				}
				add(ruleSET, position269)
			}
			return true
		l268:
			position, tokenIndex = position268, tokenIndex268
			return false
		},
		/* 55 CLEAR <- <('c' 'l' 'e' 'a' 'r' _)> */
		func() bool {
			position270, tokenIndex270 := position, tokenIndex
			{
				position271 := position
				if buffer[position] != rune('c') {
					goto l270
				}
				position++
				if buffer[position] != rune('l') {
					goto l270
				}
				position++
				if buffer[position] != rune('e') {
					goto l270
				}
				position++
				if buffer[position] != rune('a') {
					goto l270
				}
				position++
				if buffer[position] != rune('r') {
					goto l270
				}
				position++
				if !_rules[rule_]() {
					goto l270
				}
				add(ruleCLEAR, position271)
			}
			return true
		l270:
			position, tokenIndex = position270, tokenIndex270
			return false
		},
		/* 56 FETCH <- <('f' 'e' 't' 'c' 'h' _)> */
		func() bool {
			position272, tokenIndex272 := position, tokenIndex
			{
				position273 := position
				if buffer[position] != rune('f') {
					goto l272
				}
				position++
				if buffer[position] != rune('e') {
					goto l272
				}
				position++
				if buffer[position] != rune('t') {
					goto l272
				}
				position++
				if buffer[position] != rune('c') {
					goto l272
				}
				position++
				if buffer[position] != rune('h') {
					goto l272
				}
				position++
				if !_rules[rule_]() {
					goto l272
				}
				add(ruleFETCH, position273)
			}
			return true
		l272:
			position, tokenIndex = position272, tokenIndex272
			return false
		},
		/* 57 LIST <- <('l' 'i' 's' 't' _)> */
		func() bool {
			position274, tokenIndex274 := position, tokenIndex
			{
				position275 := position
				if buffer[position] != rune('l') {
					goto l274
				}
				position++
				if buffer[position] != rune('i') {
					goto l274
				}
				position++
				if buffer[position] != rune('s') {
					goto l274
				}
				position++
				if buffer[position] != rune('t') {
					goto l274
				}
				position++
				if !_rules[rule_]() {
					goto l274
				}
				add(ruleLIST, position275)
			}
			return true
		l274:
			position, tokenIndex = position274, tokenIndex274
			return false
		},
		/* 58 EXISTS <- <('e' 'x' 'i' 's' 't' 's' _)> */
		func() bool {
			position276, tokenIndex276 := position, tokenIndex
			{
				position277 := position
				if buffer[position] != rune('e') {
					goto l276
				}
				position++
				if buffer[position] != rune('x') {
					goto l276
				}
				position++
				if buffer[position] != rune('i') {
					goto l276
				}
				position++
				if buffer[position] != rune('s') {
					goto l276
				}
				position++
				if buffer[position] != rune('t') {
					goto l276
				}
				position++
				if buffer[position] != rune('s') {
					goto l276
				}
				position++
				if !_rules[rule_]() {
					goto l276
				}
				add(ruleEXISTS, position277)
			}
			return true
		l276:
			position, tokenIndex = position276, tokenIndex276
			return false
		},
		/* 59 FREE <- <('f' 'r' 'e' 'e' _)> */
		func() bool {
			position278, tokenIndex278 := position, tokenIndex
			{
				position279 := position
				if buffer[position] != rune('f') {
					goto l278
				}
				position++
				if buffer[position] != rune('r') {
					goto l278
				}
				position++
				if buffer[position] != rune('e') {
					goto l278
				}
				position++
				if buffer[position] != rune('e') {
					goto l278
				}
				position++
				if !_rules[rule_]() {
					goto l278
				}
				add(ruleFREE, position279)
			}
			return true
		l278:
			position, tokenIndex = position278, tokenIndex278
			return false
		},
		/* 60 NEST <- <('n' 'e' 's' 't' _)> */
		func() bool {
			position280, tokenIndex280 := position, tokenIndex
			{
				position281 := position
				if buffer[position] != rune('n') {
					goto l280
				}
				position++
				if buffer[position] != rune('e') {
					goto l280
				}
				position++
				if buffer[position] != rune('s') {
					goto l280
				}
				position++
				if buffer[position] != rune('t') {
					goto l280
				}
				position++
				if !_rules[rule_]() {
					goto l280
				}
				add(ruleNEST, position281)
			}
			return true
		l280:
			position, tokenIndex = position280, tokenIndex280
			return false
		},
		/* 61 TRUE <- <('t' 'r' 'u' 'e' _)> */
		nil,
		/* 62 FALSE <- <('f' 'a' 'l' 's' 'e' _)> */
		nil,
		/* 63 EXTERNAL <- <('e' 'x' 't' 'e' 'r' 'n' 'a' 'l')> */
		func() bool {
			position284, tokenIndex284 := position, tokenIndex
			{
				position285 := position
				if buffer[position] != rune('e') {
					goto l284
				}
				position++
				if buffer[position] != rune('x') {
					goto l284
				}
				position++
				if buffer[position] != rune('t') {
					goto l284
				}
				position++
				if buffer[position] != rune('e') {
					goto l284
				}
				position++
				if buffer[position] != rune('r') {
					goto l284
				}
				position++
				if buffer[position] != rune('n') {
					goto l284
				}
				position++
				if buffer[position] != rune('a') {
					goto l284
				}
				position++
				if buffer[position] != rune('l') {
					goto l284
				}
				position++
				add(ruleEXTERNAL, position285)
			}
			return true
		l284:
			position, tokenIndex = position284, tokenIndex284
			return false
		},
		/* 64 NAME <- <('n' 'a' 'm' 'e')> */
		func() bool {
			position286, tokenIndex286 := position, tokenIndex
			{
				position287 := position
				if buffer[position] != rune('n') {
					goto l286
				}
				position++
				if buffer[position] != rune('a') {
					goto l286
				}
				position++
				if buffer[position] != rune('m') {
					goto l286
				}
				position++
				if buffer[position] != rune('e') {
					goto l286
				}
				position++
				add(ruleNAME, position287)
			}
			return true
		l286:
			position, tokenIndex = position286, tokenIndex286
			return false
		},
		/* 65 TYPE <- <('t' 'y' 'p' 'e')> */
		func() bool {
			position288, tokenIndex288 := position, tokenIndex
			{
				position289 := position
				if buffer[position] != rune('t') {
					goto l288
				}
				position++
				if buffer[position] != rune('y') {
					goto l288
				}
				position++
				if buffer[position] != rune('p') {
					goto l288
				}
				position++
				if buffer[position] != rune('e') {
					goto l288
				}
				position++
				add(ruleTYPE, position289)
			}
			return true
		l288:
			position, tokenIndex = position288, tokenIndex288
			return false
		},
		/* 66 VERB <- <('v' 'e' 'r' 'b')> */
		func() bool {
			position290, tokenIndex290 := position, tokenIndex
			{
				position291 := position
				if buffer[position] != rune('v') {
					goto l290
				}
				position++
				if buffer[position] != rune('e') {
					goto l290
				}
				position++
				if buffer[position] != rune('r') {
					goto l290
				}
				position++
				if buffer[position] != rune('b') {
					goto l290
				}
				position++
				add(ruleVERB, position291)
			}
			return true
		l290:
			position, tokenIndex = position290, tokenIndex290
			return false
		},
		/* 67 MECHANISM <- <('m' 'e' 'c' 'h' 'a' 'n' 'i' 's' 'm')> */
		func() bool {
			position292, tokenIndex292 := position, tokenIndex
			{
				position293 := position
				if buffer[position] != rune('m') {
					goto l292
				}
				position++
				if buffer[position] != rune('e') {
					goto l292
				}
				position++
				if buffer[position] != rune('c') {
					goto l292
				}
				position++
				if buffer[position] != rune('h') {
					goto l292
				}
				position++
				if buffer[position] != rune('a') {
					goto l292
				}
				position++
				if buffer[position] != rune('n') {
					goto l292
				}
				position++
				if buffer[position] != rune('i') {
					goto l292
				}
				position++
				if buffer[position] != rune('s') {
					goto l292
				}
				position++
				if buffer[position] != rune('m') {
					goto l292
				}
				position++
				add(ruleMECHANISM, position293)
			}
			return true
		l292:
			position, tokenIndex = position292, tokenIndex292
			return false
		},
		/* 68 ASYNC <- <('a' 's' 'y' 'n' 'c')> */
		func() bool {
			position294, tokenIndex294 := position, tokenIndex
			{
				position295 := position
				if buffer[position] != rune('a') {
					goto l294
				}
				position++
				if buffer[position] != rune('s') {
					goto l294
				}
				position++
				if buffer[position] != rune('y') {
					goto l294
				}
				position++
				if buffer[position] != rune('n') {
					goto l294
				}
				position++
				if buffer[position] != rune('c') {
					goto l294
				}
				position++
				add(ruleASYNC, position295)
			}
			return true
		l294:
			position, tokenIndex = position294, tokenIndex294
			return false
		},
		/* 69 EXPANDED <- <('e' 'x' 'p' 'a' 'n' 'd' 'e' 'd')> */
		func() bool {
			position296, tokenIndex296 := position, tokenIndex
			{
				position297 := position
				if buffer[position] != rune('e') {
					goto l296
				}
				position++
				if buffer[position] != rune('x') {
					goto l296
				}
				position++
				if buffer[position] != rune('p') {
					goto l296
				}
				position++
				if buffer[position] != rune('a') {
					goto l296
				}
				position++
				if buffer[position] != rune('n') {
					goto l296
				}
				position++
				if buffer[position] != rune('d') {
					goto l296
				}
				position++
				if buffer[position] != rune('e') {
					goto l296
				}
				position++
				if buffer[position] != rune('d') {
					goto l296
				}
				position++
				add(ruleEXPANDED, position297)
			}
			return true
		l296:
			position, tokenIndex = position296, tokenIndex296
			return false
		},
		/* 70 PERSON <- <('p' 'e' 'r' 's' 'o' 'n' _)> */
		nil,
		/* 71 DATABASE <- <('d' 'a' 't' 'a' 'b' 'a' 's' 'e' _)> */
		nil,
		/* 72 QUEUE <- <('q' 'u' 'e' 'u' 'e' _)> */
		nil,
		/* 73 BLOBSTORE <- <('b' 'l' 'o' 'b' 's' 't' 'o' 'r' 'e' _)> */
		nil,
		/* 74 BROWSER <- <('b' 'r' 'o' 'w' 's' 'e' 'r' _)> */
		nil,
		/* 75 MOBILE <- <('m' 'o' 'b' 'i' 'l' 'e' _)> */
		nil,
		/* 76 SERVER <- <('s' 'e' 'r' 'v' 'e' 'r' _)> */
		nil,
		/* 77 DEVICE <- <('d' 'e' 'v' 'i' 'c' 'e' _)> */
		nil,
		/* 78 CODE <- <('c' 'o' 'd' 'e' _)> */
		nil,
		/* 79 QUOTE <- <'"'> */
		func() bool {
			position307, tokenIndex307 := position, tokenIndex
			{
				position308 := position
				if buffer[position] != rune('"') {
					goto l307
				}
				position++
				add(ruleQUOTE, position308)
			}
			return true
		l307:
			position, tokenIndex = position307, tokenIndex307
			return false
		},
		/* 80 EQUALS <- <'='> */
		func() bool {
			position309, tokenIndex309 := position, tokenIndex
			{
				position310 := position
				if buffer[position] != rune('=') {
					goto l309
				}
				position++
				add(ruleEQUALS, position310)
			}
			return true
		l309:
			position, tokenIndex = position309, tokenIndex309
			return false
		},
		/* 81 FLAG <- <('-' / ('-' '-'))> */
		func() bool {
			position311, tokenIndex311 := position, tokenIndex
			{
				position312 := position
				{
					position313, tokenIndex313 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l314
					}
					position++
					goto l313
				l314:
					position, tokenIndex = position313, tokenIndex313
					if buffer[position] != rune('-') {
						goto l311
					}
					position++
					if buffer[position] != rune('-') {
						goto l311
					}
					position++
				}
			l313:
				add(ruleFLAG, position312)
			}
			return true
		l311:
			position, tokenIndex = position311, tokenIndex311
			return false
		},
		/* 82 STRICT <- <('s' 't' 'r' 'i' 'c' 't' _)> */
		nil,
		/* 83 VERBOSE <- <('v' 'e' 'r' 'b' 'o' 's' 'e' _)> */
		nil,
		/* 84 IDS <- <('i' 'd' 's' _)> */
		func() bool {
			position317, tokenIndex317 := position, tokenIndex
			{
				position318 := position
				if buffer[position] != rune('i') {
					goto l317
				}
				position++
				if buffer[position] != rune('d') {
					goto l317
				}
				position++
				if buffer[position] != rune('s') {
					goto l317
				}
				position++
				if !_rules[rule_]() {
					goto l317
				}
				add(ruleIDS, position318)
			}
			return true
		l317:
			position, tokenIndex = position317, tokenIndex317
			return false
		},
		/* 85 ERROR <- <('e' 'r' 'r' 'o' 'r' _)> */
		nil,
		/* 86 _ <- <Whitespace*> */
		func() bool {
			{
				position321 := position
			l322:
				{
					position323, tokenIndex323 := position, tokenIndex
					{
						position324 := position
						{
							switch buffer[position] {
							case '\t':
								if buffer[position] != rune('\t') {
									goto l323
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l323
								}
								position++
							default:
								if !_rules[ruleEOL]() {
									goto l323
								}
							}
						}

						add(ruleWhitespace, position324)
					}
					goto l322
				l323:
					position, tokenIndex = position323, tokenIndex323
				}
				add(rule_, position321)
			}
			return true
		},
		/* 87 Whitespace <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') EOL))> */
		nil,
		/* 88 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position327, tokenIndex327 := position, tokenIndex
			{
				position328 := position
				{
					position329, tokenIndex329 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l330
					}
					position++
					if buffer[position] != rune('\n') {
						goto l330
					}
					position++
					goto l329
				l330:
					position, tokenIndex = position329, tokenIndex329
					if buffer[position] != rune('\n') {
						goto l331
					}
					position++
					goto l329
				l331:
					position, tokenIndex = position329, tokenIndex329
					if buffer[position] != rune('\r') {
						goto l327
					}
					position++
				}
			l329:
				add(ruleEOL, position328)
			}
			return true
		l327:
			position, tokenIndex = position327, tokenIndex327
			return false
		},
		/* 89 END <- <!.> */
		func() bool {
			position332, tokenIndex332 := position, tokenIndex
			{
				position333 := position
				{
					position334, tokenIndex334 := position, tokenIndex
					if !matchDot() {
						goto l334
					}
					goto l332
				l334:
					position, tokenIndex = position334, tokenIndex334
				}
				add(ruleEND, position333)
			}
			return true
		l332:
			position, tokenIndex = position332, tokenIndex332
			return false
		},
	}
	p.rules = _rules
	return nil
}
