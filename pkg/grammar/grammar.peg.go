package grammar

// Code generated by peg -inline -switch -strict -output pkg/grammar/grammar.peg.go pkg/grammar/grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleValid
	ruleResponse
	ruleCommand
	ruleMutation
	ruleQuery
	ruleFetchQuery
	ruleExistsQuery
	ruleStateBound
	ruleCreateOrFetch
	ruleCreateOrSet
	ruleObject
	ruleWorldObject
	ruleItemObject
	ruleRelObject
	ruleIdsList
	ruleDualIdentifier
	ruleIdentifier
	ruleItemParams
	ruleRelParams
	ruleItemParam
	ruleRelParam
	ruleItemKeys
	ruleRelKeys
	ruleItemKey
	ruleRelKey
	ruleError
	ruleStringLike
	ruleBoolean
	ruleText
	ruleQuotedText
	ruleItemsList
	ruleRelsList
	ruleNumber
	ruleItemType
	ruleItemExists
	ruleRelExists
	ruleItem
	ruleRel
	ruleFlag
	ruleStrictFlag
	ruleVerboseFlag
	ruleIdsFlag
	ruleKeyword
	ruleWORLD
	ruleENDWORLD
	ruleERROR
	ruleITEM
	ruleITEM_EXISTS
	ruleREL
	ruleREL_EXISTS
	ruleFROM_QUERY
	ruleTO_QUERY
	ruleIN
	ruleIN_QUERY
	ruleCREATE
	ruleDELETE
	ruleSET
	ruleCLEAR
	ruleFETCH
	ruleLIST
	ruleEXISTS
	ruleFREE
	ruleNEST
	ruleTRUE
	ruleFALSE
	ruleEXTERNAL
	ruleNAME
	ruleTYPE
	ruleVERB
	ruleMECHANISM
	ruleASYNC
	ruleEXPANDED
	rulePERSON
	ruleDATABASE
	ruleQUEUE
	ruleBLOBSTORE
	ruleBROWSER
	ruleMOBILE
	ruleSERVER
	ruleDEVICE
	ruleCODE
	ruleQUOTE
	ruleEQUALS
	ruleFLAG
	ruleSTRICT
	ruleVERBOSE
	ruleIDS
	rule_
	ruleWhitespace
	ruleEOL
	ruleEND
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
)

var rul3s = [...]string{
	"Unknown",
	"Valid",
	"Response",
	"Command",
	"Mutation",
	"Query",
	"FetchQuery",
	"ExistsQuery",
	"StateBound",
	"CreateOrFetch",
	"CreateOrSet",
	"Object",
	"WorldObject",
	"ItemObject",
	"RelObject",
	"IdsList",
	"DualIdentifier",
	"Identifier",
	"ItemParams",
	"RelParams",
	"ItemParam",
	"RelParam",
	"ItemKeys",
	"RelKeys",
	"ItemKey",
	"RelKey",
	"Error",
	"StringLike",
	"Boolean",
	"Text",
	"QuotedText",
	"ItemsList",
	"RelsList",
	"Number",
	"ItemType",
	"ItemExists",
	"RelExists",
	"Item",
	"Rel",
	"Flag",
	"StrictFlag",
	"VerboseFlag",
	"IdsFlag",
	"Keyword",
	"WORLD",
	"ENDWORLD",
	"ERROR",
	"ITEM",
	"ITEM_EXISTS",
	"REL",
	"REL_EXISTS",
	"FROM_QUERY",
	"TO_QUERY",
	"IN",
	"IN_QUERY",
	"CREATE",
	"DELETE",
	"SET",
	"CLEAR",
	"FETCH",
	"LIST",
	"EXISTS",
	"FREE",
	"NEST",
	"TRUE",
	"FALSE",
	"EXTERNAL",
	"NAME",
	"TYPE",
	"VERB",
	"MECHANISM",
	"ASYNC",
	"EXPANDED",
	"PERSON",
	"DATABASE",
	"QUEUE",
	"BLOBSTORE",
	"BROWSER",
	"MOBILE",
	"SERVER",
	"DEVICE",
	"CODE",
	"QUOTE",
	"EQUALS",
	"FLAG",
	"STRICT",
	"VERBOSE",
	"IDS",
	"_",
	"Whitespace",
	"EOL",
	"END",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	StmtType string
	InputAttributes
	Response

	Buffer string
	buffer []rune
	rules  [97]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case ruleAction0:

			p.StmtType = "response"

		case ruleAction1:

			p.StmtType = "Mutation"

		case ruleAction2:

			p.StmtType = "FetchQuery"

		case ruleAction3:

			p.StmtType = "ExistsQuery"

		case ruleAction4:

			p.StmtType = "StateBound"

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Valid <- <(Command / Response)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						if !_rules[rule_]() {
							goto l3
						}
						{
							position5, tokenIndex5 := position, tokenIndex
							{
								position7 := position
								{
									position8, tokenIndex8 := position, tokenIndex
									if !_rules[ruleItem]() {
										goto l9
									}
									{
										position10, tokenIndex10 := position, tokenIndex
										if !_rules[ruleCREATE]() {
											goto l11
										}
										goto l10
									l11:
										position, tokenIndex = position10, tokenIndex10
										if !_rules[ruleSET]() {
											goto l9
										}
									}
								l10:
									if !_rules[ruleIdentifier]() {
										goto l9
									}
									{
										position12, tokenIndex12 := position, tokenIndex
										if !_rules[ruleItemParams]() {
											goto l12
										}
										goto l13
									l12:
										position, tokenIndex = position12, tokenIndex12
									}
								l13:
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleItem]() {
										goto l14
									}
									if !_rules[ruleCLEAR]() {
										goto l14
									}
									if !_rules[ruleIdentifier]() {
										goto l14
									}
									{
										position15 := position
										{
											position18 := position
											{
												position19, tokenIndex19 := position, tokenIndex
												if !_rules[ruleEXTERNAL]() {
													goto l20
												}
												goto l19
											l20:
												position, tokenIndex = position19, tokenIndex19
												{
													switch buffer[position] {
													case 'e':
														if !_rules[ruleEXPANDED]() {
															goto l14
														}
													case 'm':
														if !_rules[ruleMECHANISM]() {
															goto l14
														}
													case 't':
														if !_rules[ruleTYPE]() {
															goto l14
														}
													default:
														if !_rules[ruleNAME]() {
															goto l14
														}
													}
												}

											}
										l19:
											if !_rules[rule_]() {
												goto l14
											}
											add(ruleItemKey, position18)
										}
									l16:
										{
											position17, tokenIndex17 := position, tokenIndex
											{
												position22 := position
												{
													position23, tokenIndex23 := position, tokenIndex
													if !_rules[ruleEXTERNAL]() {
														goto l24
													}
													goto l23
												l24:
													position, tokenIndex = position23, tokenIndex23
													{
														switch buffer[position] {
														case 'e':
															if !_rules[ruleEXPANDED]() {
																goto l17
															}
														case 'm':
															if !_rules[ruleMECHANISM]() {
																goto l17
															}
														case 't':
															if !_rules[ruleTYPE]() {
																goto l17
															}
														default:
															if !_rules[ruleNAME]() {
																goto l17
															}
														}
													}

												}
											l23:
												if !_rules[rule_]() {
													goto l17
												}
												add(ruleItemKey, position22)
											}
											goto l16
										l17:
											position, tokenIndex = position17, tokenIndex17
										}
										add(ruleItemKeys, position15)
									}
									goto l8
								l14:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleRel]() {
										goto l26
									}
									{
										position27, tokenIndex27 := position, tokenIndex
										if !_rules[ruleCREATE]() {
											goto l28
										}
										goto l27
									l28:
										position, tokenIndex = position27, tokenIndex27
										if !_rules[ruleSET]() {
											goto l26
										}
									}
								l27:
									if !_rules[ruleDualIdentifier]() {
										goto l26
									}
									{
										position29, tokenIndex29 := position, tokenIndex
										if !_rules[ruleRelParams]() {
											goto l29
										}
										goto l30
									l29:
										position, tokenIndex = position29, tokenIndex29
									}
								l30:
									goto l8
								l26:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleRel]() {
										goto l31
									}
									if !_rules[ruleCLEAR]() {
										goto l31
									}
									if !_rules[ruleDualIdentifier]() {
										goto l31
									}
									{
										position32 := position
										{
											position35 := position
											{
												switch buffer[position] {
												case 'e':
													if !_rules[ruleEXPANDED]() {
														goto l31
													}
												case 'a':
													if !_rules[ruleASYNC]() {
														goto l31
													}
												case 'm':
													if !_rules[ruleMECHANISM]() {
														goto l31
													}
												default:
													if !_rules[ruleVERB]() {
														goto l31
													}
												}
											}

											if !_rules[rule_]() {
												goto l31
											}
											add(ruleRelKey, position35)
										}
									l33:
										{
											position34, tokenIndex34 := position, tokenIndex
											{
												position37 := position
												{
													switch buffer[position] {
													case 'e':
														if !_rules[ruleEXPANDED]() {
															goto l34
														}
													case 'a':
														if !_rules[ruleASYNC]() {
															goto l34
														}
													case 'm':
														if !_rules[ruleMECHANISM]() {
															goto l34
														}
													default:
														if !_rules[ruleVERB]() {
															goto l34
														}
													}
												}

												if !_rules[rule_]() {
													goto l34
												}
												add(ruleRelKey, position37)
											}
											goto l33
										l34:
											position, tokenIndex = position34, tokenIndex34
										}
										add(ruleRelKeys, position32)
									}
									goto l8
								l31:
									position, tokenIndex = position8, tokenIndex8
									{
										switch buffer[position] {
										case 'f':
											if !_rules[ruleFREE]() {
												goto l6
											}
											if !_rules[ruleIdentifier]() {
												goto l6
											}
										l40:
											{
												position41, tokenIndex41 := position, tokenIndex
												if !_rules[ruleIdentifier]() {
													goto l41
												}
												goto l40
											l41:
												position, tokenIndex = position41, tokenIndex41
											}
											{
												add(ruleAction1, position)
											}
										case 'n':
											if !_rules[ruleNEST]() {
												goto l6
											}
											if !_rules[ruleIdentifier]() {
												goto l6
											}
										l43:
											{
												position44, tokenIndex44 := position, tokenIndex
												if !_rules[ruleIdentifier]() {
													goto l44
												}
												goto l43
											l44:
												position, tokenIndex = position44, tokenIndex44
											}
											if !_rules[ruleIN]() {
												goto l6
											}
											if !_rules[ruleIdentifier]() {
												goto l6
											}
										case 'r':
											if !_rules[ruleRel]() {
												goto l6
											}
											if !_rules[ruleDELETE]() {
												goto l6
											}
											if !_rules[ruleDualIdentifier]() {
												goto l6
											}
										default:
											if !_rules[ruleItem]() {
												goto l6
											}
											if !_rules[ruleDELETE]() {
												goto l6
											}
											if !_rules[ruleIdentifier]() {
												goto l6
											}
										}
									}

								}
							l8:
								add(ruleMutation, position7)
							}
							goto l5
						l6:
							position, tokenIndex = position5, tokenIndex5
							{
								position46 := position
								{
									position47, tokenIndex47 := position, tokenIndex
									{
										position49 := position
										{
											position50, tokenIndex50 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l51
											}
											if !_rules[ruleFETCH]() {
												goto l51
											}
											if !_rules[ruleIdentifier]() {
												goto l51
											}
											goto l50
										l51:
											position, tokenIndex = position50, tokenIndex50
											{
												position53 := position
												if !_rules[ruleItem]() {
													goto l52
												}
												if !_rules[ruleLIST]() {
													goto l52
												}
												{
													position54, tokenIndex54 := position, tokenIndex
													if !_rules[ruleNumber]() {
														goto l54
													}
													goto l55
												l54:
													position, tokenIndex = position54, tokenIndex54
												}
											l55:
												add(ruleItemsList, position53)
											}
											goto l50
										l52:
											position, tokenIndex = position50, tokenIndex50
											if !_rules[ruleRel]() {
												goto l56
											}
											if !_rules[ruleFETCH]() {
												goto l56
											}
											if !_rules[ruleDualIdentifier]() {
												goto l56
											}
											goto l50
										l56:
											position, tokenIndex = position50, tokenIndex50
											if !_rules[ruleRel]() {
												goto l57
											}
											if !_rules[ruleIdentifier]() {
												goto l57
											}
											{
												position58, tokenIndex58 := position, tokenIndex
												if !_rules[ruleIdentifier]() {
													goto l58
												}
												goto l57
											l58:
												position, tokenIndex = position58, tokenIndex58
											}
											goto l50
										l57:
											position, tokenIndex = position50, tokenIndex50
											if !_rules[ruleIN_QUERY]() {
												goto l59
											}
											if !_rules[ruleIdentifier]() {
												goto l59
											}
											goto l50
										l59:
											position, tokenIndex = position50, tokenIndex50
											{
												switch buffer[position] {
												case 'w':
													if !_rules[ruleWORLD]() {
														goto l48
													}
													{
														add(ruleAction2, position)
													}
												case 'i':
													if !_rules[ruleItem]() {
														goto l48
													}
													if !_rules[ruleIN]() {
														goto l48
													}
													if !_rules[ruleIdentifier]() {
														goto l48
													}
												default:
													{
														position62 := position
														if !_rules[ruleRel]() {
															goto l48
														}
														if !_rules[ruleLIST]() {
															goto l48
														}
														{
															position63, tokenIndex63 := position, tokenIndex
															if !_rules[ruleNumber]() {
																goto l63
															}
															goto l64
														l63:
															position, tokenIndex = position63, tokenIndex63
														}
													l64:
														add(ruleRelsList, position62)
													}
												}
											}

										}
									l50:
										add(ruleFetchQuery, position49)
									}
									goto l47
								l48:
									position, tokenIndex = position47, tokenIndex47
									{
										position65 := position
										{
											position66, tokenIndex66 := position, tokenIndex
											{
												position68 := position
												{
													position69, tokenIndex69 := position, tokenIndex
													if !_rules[ruleITEM_EXISTS]() {
														goto l70
													}
													goto l69
												l70:
													position, tokenIndex = position69, tokenIndex69
													if !_rules[ruleItem]() {
														goto l67
													}
													if !_rules[ruleEXISTS]() {
														goto l67
													}
												}
											l69:
												add(ruleItemExists, position68)
											}
											if !_rules[ruleIdentifier]() {
												goto l67
											}
											goto l66
										l67:
											position, tokenIndex = position66, tokenIndex66
											{
												position71 := position
												{
													position72, tokenIndex72 := position, tokenIndex
													if !_rules[ruleREL_EXISTS]() {
														goto l73
													}
													goto l72
												l73:
													position, tokenIndex = position72, tokenIndex72
													if !_rules[ruleRel]() {
														goto l45
													}
													if !_rules[ruleEXISTS]() {
														goto l45
													}
												}
											l72:
												add(ruleRelExists, position71)
											}
											if !_rules[ruleDualIdentifier]() {
												goto l45
											}
											{
												add(ruleAction3, position)
											}
										}
									l66:
										add(ruleExistsQuery, position65)
									}
								}
							l47:
								add(ruleQuery, position46)
							}
							goto l5
						l45:
							position, tokenIndex = position5, tokenIndex5
							{
								position75 := position
								{
									position76, tokenIndex76 := position, tokenIndex
									{
										position78 := position
										{
											position79, tokenIndex79 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l80
											}
											if !_rules[ruleIdentifier]() {
												goto l80
											}
											{
												position81, tokenIndex81 := position, tokenIndex
												if !_rules[ruleItemParams]() {
													goto l81
												}
												goto l80
											l81:
												position, tokenIndex = position81, tokenIndex81
											}
											goto l79
										l80:
											position, tokenIndex = position79, tokenIndex79
											if !_rules[ruleRel]() {
												goto l77
											}
											if !_rules[ruleDualIdentifier]() {
												goto l77
											}
											{
												position82, tokenIndex82 := position, tokenIndex
												if !_rules[ruleRelParams]() {
													goto l82
												}
												goto l77
											l82:
												position, tokenIndex = position82, tokenIndex82
											}
										}
									l79:
										add(ruleCreateOrFetch, position78)
									}
									goto l76
								l77:
									position, tokenIndex = position76, tokenIndex76
									{
										position83 := position
										{
											position84, tokenIndex84 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l85
											}
											if !_rules[ruleIdentifier]() {
												goto l85
											}
											if !_rules[ruleItemParams]() {
												goto l85
											}
											goto l84
										l85:
											position, tokenIndex = position84, tokenIndex84
											if !_rules[ruleRel]() {
												goto l3
											}
											if !_rules[ruleDualIdentifier]() {
												goto l3
											}
											if !_rules[ruleRelParams]() {
												goto l3
											}
										}
									l84:
										add(ruleCreateOrSet, position83)
									}
									{
										add(ruleAction4, position)
									}
								}
							l76:
								add(ruleStateBound, position75)
							}
						}
					l5:
					l87:
						{
							position88, tokenIndex88 := position, tokenIndex
							{
								position89 := position
								{
									position90, tokenIndex90 := position, tokenIndex
									{
										position92 := position
										if !_rules[ruleFLAG]() {
											goto l91
										}
										{
											position93 := position
											if buffer[position] != rune('s') {
												goto l91
											}
											position++
											if buffer[position] != rune('t') {
												goto l91
											}
											position++
											if buffer[position] != rune('r') {
												goto l91
											}
											position++
											if buffer[position] != rune('i') {
												goto l91
											}
											position++
											if buffer[position] != rune('c') {
												goto l91
											}
											position++
											if buffer[position] != rune('t') {
												goto l91
											}
											position++
											if !_rules[rule_]() {
												goto l91
											}
											add(ruleSTRICT, position93)
										}
										add(ruleStrictFlag, position92)
									}
									goto l90
								l91:
									position, tokenIndex = position90, tokenIndex90
									{
										position95 := position
										if !_rules[ruleFLAG]() {
											goto l94
										}
										{
											position96 := position
											if buffer[position] != rune('v') {
												goto l94
											}
											position++
											if buffer[position] != rune('e') {
												goto l94
											}
											position++
											if buffer[position] != rune('r') {
												goto l94
											}
											position++
											if buffer[position] != rune('b') {
												goto l94
											}
											position++
											if buffer[position] != rune('o') {
												goto l94
											}
											position++
											if buffer[position] != rune('s') {
												goto l94
											}
											position++
											if buffer[position] != rune('e') {
												goto l94
											}
											position++
											if !_rules[rule_]() {
												goto l94
											}
											add(ruleVERBOSE, position96)
										}
										add(ruleVerboseFlag, position95)
									}
									goto l90
								l94:
									position, tokenIndex = position90, tokenIndex90
									{
										position97 := position
										if !_rules[ruleFLAG]() {
											goto l88
										}
										if !_rules[ruleIDS]() {
											goto l88
										}
										add(ruleIdsFlag, position97)
									}
								}
							l90:
								add(ruleFlag, position89)
							}
							goto l87
						l88:
							position, tokenIndex = position88, tokenIndex88
						}
						if !_rules[ruleEND]() {
							goto l3
						}
						add(ruleCommand, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position98 := position
						{
							position99, tokenIndex99 := position, tokenIndex
							{
								position101 := position
								{
									position102, tokenIndex102 := position, tokenIndex
									{
										position104 := position
										if !_rules[ruleItem]() {
											goto l103
										}
										if !_rules[ruleIdentifier]() {
											goto l103
										}
										{
											position105, tokenIndex105 := position, tokenIndex
											if !_rules[ruleItemParams]() {
												goto l105
											}
											goto l106
										l105:
											position, tokenIndex = position105, tokenIndex105
										}
									l106:
										add(ruleItemObject, position104)
									}
									goto l102
								l103:
									position, tokenIndex = position102, tokenIndex102
									{
										switch buffer[position] {
										case 'i':
											{
												position108 := position
												if !_rules[ruleIDS]() {
													goto l99
												}
											l109:
												{
													position110, tokenIndex110 := position, tokenIndex
													if !_rules[ruleStringLike]() {
														goto l110
													}
													goto l109
												l110:
													position, tokenIndex = position110, tokenIndex110
												}
												if !_rules[rule_]() {
													goto l99
												}
												add(ruleIdsList, position108)
											}
										case 'r':
											{
												position111 := position
												if !_rules[ruleRel]() {
													goto l99
												}
												if !_rules[ruleDualIdentifier]() {
													goto l99
												}
												{
													position112, tokenIndex112 := position, tokenIndex
													if !_rules[ruleRelParams]() {
														goto l112
													}
													goto l113
												l112:
													position, tokenIndex = position112, tokenIndex112
												}
											l113:
												add(ruleRelObject, position111)
											}
										default:
											{
												position114 := position
												if buffer[position] != rune('$') {
													goto l99
												}
												position++
												if buffer[position] != rune('$') {
													goto l99
												}
												position++
												if !_rules[ruleWORLD]() {
													goto l99
												}
											l115:
												{
													position116, tokenIndex116 := position, tokenIndex
													if !matchDot() {
														goto l116
													}
													goto l115
												l116:
													position, tokenIndex = position116, tokenIndex116
												}
												{
													position117 := position
													if buffer[position] != rune('e') {
														goto l99
													}
													position++
													if buffer[position] != rune('n') {
														goto l99
													}
													position++
													if buffer[position] != rune('d') {
														goto l99
													}
													position++
													if buffer[position] != rune('w') {
														goto l99
													}
													position++
													if buffer[position] != rune('o') {
														goto l99
													}
													position++
													if buffer[position] != rune('r') {
														goto l99
													}
													position++
													if buffer[position] != rune('l') {
														goto l99
													}
													position++
													if buffer[position] != rune('d') {
														goto l99
													}
													position++
													if !_rules[rule_]() {
														goto l99
													}
													add(ruleENDWORLD, position117)
												}
												if buffer[position] != rune('$') {
													goto l99
												}
												position++
												if buffer[position] != rune('$') {
													goto l99
												}
												position++
												add(ruleWorldObject, position114)
											}
										}
									}

								}
							l102:
								add(ruleObject, position101)
							}
							goto l100
						l99:
							position, tokenIndex = position99, tokenIndex99
						}
					l100:
						if !_rules[rule_]() {
							goto l0
						}
						if !_rules[ruleEOL]() {
							goto l0
						}
						{
							position118, tokenIndex118 := position, tokenIndex
							{
								position120 := position
								{
									position121 := position
									if buffer[position] != rune('e') {
										goto l118
									}
									position++
									if buffer[position] != rune('r') {
										goto l118
									}
									position++
									if buffer[position] != rune('r') {
										goto l118
									}
									position++
									if buffer[position] != rune('o') {
										goto l118
									}
									position++
									if buffer[position] != rune('r') {
										goto l118
									}
									position++
									if !_rules[rule_]() {
										goto l118
									}
									add(ruleERROR, position121)
								}
								{
									position122, tokenIndex122 := position, tokenIndex
									if !_rules[ruleNumber]() {
										goto l122
									}
									goto l123
								l122:
									position, tokenIndex = position122, tokenIndex122
								}
							l123:
							l124:
								{
									position125, tokenIndex125 := position, tokenIndex
									if !_rules[ruleStringLike]() {
										goto l125
									}
									goto l124
								l125:
									position, tokenIndex = position125, tokenIndex125
								}
								add(ruleError, position120)
							}
							goto l119
						l118:
							position, tokenIndex = position118, tokenIndex118
						}
					l119:
						if !_rules[ruleEND]() {
							goto l0
						}
						{
							add(ruleAction0, position)
						}
						add(ruleResponse, position98)
					}
				}
			l2:
				add(ruleValid, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Response <- <(Object? _ EOL Error? END Action0)> */
		nil,
		/* 2 Command <- <(_ (Mutation / Query / StateBound) Flag* END)> */
		nil,
		/* 3 Mutation <- <((Item (CREATE / SET) Identifier ItemParams?) / (Item CLEAR Identifier ItemKeys) / (Rel (CREATE / SET) DualIdentifier RelParams?) / (Rel CLEAR DualIdentifier RelKeys) / ((&('f') (FREE Identifier+ Action1)) | (&('n') (NEST Identifier+ IN Identifier)) | (&('r') (Rel DELETE DualIdentifier)) | (&('i') (Item DELETE Identifier))))> */
		nil,
		/* 4 Query <- <(FetchQuery / ExistsQuery)> */
		nil,
		/* 5 FetchQuery <- <((Item FETCH Identifier) / ItemsList / (Rel FETCH DualIdentifier) / (Rel Identifier !Identifier) / (IN_QUERY Identifier) / ((&('w') (WORLD Action2)) | (&('i') (Item IN Identifier)) | (&('r') RelsList)))> */
		nil,
		/* 6 ExistsQuery <- <((ItemExists Identifier) / (RelExists DualIdentifier Action3))> */
		nil,
		/* 7 StateBound <- <(CreateOrFetch / (CreateOrSet Action4))> */
		nil,
		/* 8 CreateOrFetch <- <((Item Identifier !ItemParams) / (Rel DualIdentifier !RelParams))> */
		nil,
		/* 9 CreateOrSet <- <((Item Identifier ItemParams) / (Rel DualIdentifier RelParams))> */
		nil,
		/* 10 Object <- <(ItemObject / ((&('i') IdsList) | (&('r') RelObject) | (&('$') WorldObject)))> */
		nil,
		/* 11 WorldObject <- <('$' '$' WORLD .* ENDWORLD ('$' '$'))> */
		nil,
		/* 12 ItemObject <- <(Item Identifier ItemParams?)> */
		nil,
		/* 13 RelObject <- <(Rel DualIdentifier RelParams?)> */
		nil,
		/* 14 IdsList <- <(IDS StringLike* _)> */
		nil,
		/* 15 DualIdentifier <- <(Identifier Identifier)> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				if !_rules[ruleIdentifier]() {
					goto l141
				}
				if !_rules[ruleIdentifier]() {
					goto l141
				}
				add(ruleDualIdentifier, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 16 Identifier <- <(!Keyword StringLike)> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				{
					position145, tokenIndex145 := position, tokenIndex
					{
						position146 := position
						{
							position147, tokenIndex147 := position, tokenIndex
							if !_rules[ruleITEM]() {
								goto l148
							}
							goto l147
						l148:
							position, tokenIndex = position147, tokenIndex147
							if !_rules[ruleITEM_EXISTS]() {
								goto l149
							}
							goto l147
						l149:
							position, tokenIndex = position147, tokenIndex147
							if !_rules[ruleREL]() {
								goto l150
							}
							goto l147
						l150:
							position, tokenIndex = position147, tokenIndex147
							{
								position152 := position
								if buffer[position] != rune('f') {
									goto l151
								}
								position++
								if buffer[position] != rune('r') {
									goto l151
								}
								position++
								if buffer[position] != rune('o') {
									goto l151
								}
								position++
								if buffer[position] != rune('m') {
									goto l151
								}
								position++
								if buffer[position] != rune('?') {
									goto l151
								}
								position++
								if !_rules[rule_]() {
									goto l151
								}
								add(ruleFROM_QUERY, position152)
							}
							goto l147
						l151:
							position, tokenIndex = position147, tokenIndex147
							if !_rules[ruleIN]() {
								goto l153
							}
							goto l147
						l153:
							position, tokenIndex = position147, tokenIndex147
							if !_rules[ruleCREATE]() {
								goto l154
							}
							goto l147
						l154:
							position, tokenIndex = position147, tokenIndex147
							if !_rules[ruleFETCH]() {
								goto l155
							}
							goto l147
						l155:
							position, tokenIndex = position147, tokenIndex147
							{
								switch buffer[position] {
								case '-':
									if !_rules[ruleFLAG]() {
										goto l145
									}
								case 'n':
									if !_rules[ruleNEST]() {
										goto l145
									}
								case 'f':
									if !_rules[ruleFREE]() {
										goto l145
									}
								case 'e':
									if !_rules[ruleEXISTS]() {
										goto l145
									}
								case 'c':
									if !_rules[ruleCLEAR]() {
										goto l145
									}
								case 's':
									if !_rules[ruleSET]() {
										goto l145
									}
								case 'd':
									if !_rules[ruleDELETE]() {
										goto l145
									}
								case 'i':
									if !_rules[ruleIN_QUERY]() {
										goto l145
									}
								case 't':
									{
										position157 := position
										if buffer[position] != rune('t') {
											goto l145
										}
										position++
										if buffer[position] != rune('o') {
											goto l145
										}
										position++
										if buffer[position] != rune('?') {
											goto l145
										}
										position++
										if !_rules[rule_]() {
											goto l145
										}
										add(ruleTO_QUERY, position157)
									}
								default:
									if !_rules[ruleREL_EXISTS]() {
										goto l145
									}
								}
							}

						}
					l147:
						add(ruleKeyword, position146)
					}
					goto l143
				l145:
					position, tokenIndex = position145, tokenIndex145
				}
				if !_rules[ruleStringLike]() {
					goto l143
				}
				add(ruleIdentifier, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 17 ItemParams <- <ItemParam+> */
		func() bool {
			position158, tokenIndex158 := position, tokenIndex
			{
				position159 := position
				{
					position162 := position
					{
						position163, tokenIndex163 := position, tokenIndex
						if !_rules[ruleEXTERNAL]() {
							goto l164
						}
						if !_rules[ruleEQUALS]() {
							goto l164
						}
						if !_rules[ruleBoolean]() {
							goto l164
						}
						goto l163
					l164:
						position, tokenIndex = position163, tokenIndex163
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l158
								}
								if !_rules[ruleEQUALS]() {
									goto l158
								}
								if !_rules[ruleStringLike]() {
									goto l158
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l158
								}
								if !_rules[ruleEQUALS]() {
									goto l158
								}
								if !_rules[ruleStringLike]() {
									goto l158
								}
							case 'n':
								if !_rules[ruleNAME]() {
									goto l158
								}
								if !_rules[ruleEQUALS]() {
									goto l158
								}
								if !_rules[ruleStringLike]() {
									goto l158
								}
							default:
								if !_rules[ruleTYPE]() {
									goto l158
								}
								if !_rules[ruleEQUALS]() {
									goto l158
								}
								{
									position166 := position
									{
										position167, tokenIndex167 := position, tokenIndex
										{
											position169 := position
											if buffer[position] != rune('d') {
												goto l168
											}
											position++
											if buffer[position] != rune('a') {
												goto l168
											}
											position++
											if buffer[position] != rune('t') {
												goto l168
											}
											position++
											if buffer[position] != rune('a') {
												goto l168
											}
											position++
											if buffer[position] != rune('b') {
												goto l168
											}
											position++
											if buffer[position] != rune('a') {
												goto l168
											}
											position++
											if buffer[position] != rune('s') {
												goto l168
											}
											position++
											if buffer[position] != rune('e') {
												goto l168
											}
											position++
											if !_rules[rule_]() {
												goto l168
											}
											add(ruleDATABASE, position169)
										}
										goto l167
									l168:
										position, tokenIndex = position167, tokenIndex167
										{
											position171 := position
											if buffer[position] != rune('b') {
												goto l170
											}
											position++
											if buffer[position] != rune('l') {
												goto l170
											}
											position++
											if buffer[position] != rune('o') {
												goto l170
											}
											position++
											if buffer[position] != rune('b') {
												goto l170
											}
											position++
											if buffer[position] != rune('s') {
												goto l170
											}
											position++
											if buffer[position] != rune('t') {
												goto l170
											}
											position++
											if buffer[position] != rune('o') {
												goto l170
											}
											position++
											if buffer[position] != rune('r') {
												goto l170
											}
											position++
											if buffer[position] != rune('e') {
												goto l170
											}
											position++
											if !_rules[rule_]() {
												goto l170
											}
											add(ruleBLOBSTORE, position171)
										}
										goto l167
									l170:
										position, tokenIndex = position167, tokenIndex167
										{
											switch buffer[position] {
											case 'c':
												{
													position173 := position
													if buffer[position] != rune('c') {
														goto l158
													}
													position++
													if buffer[position] != rune('o') {
														goto l158
													}
													position++
													if buffer[position] != rune('d') {
														goto l158
													}
													position++
													if buffer[position] != rune('e') {
														goto l158
													}
													position++
													if !_rules[rule_]() {
														goto l158
													}
													add(ruleCODE, position173)
												}
											case 'd':
												{
													position174 := position
													if buffer[position] != rune('d') {
														goto l158
													}
													position++
													if buffer[position] != rune('e') {
														goto l158
													}
													position++
													if buffer[position] != rune('v') {
														goto l158
													}
													position++
													if buffer[position] != rune('i') {
														goto l158
													}
													position++
													if buffer[position] != rune('c') {
														goto l158
													}
													position++
													if buffer[position] != rune('e') {
														goto l158
													}
													position++
													if !_rules[rule_]() {
														goto l158
													}
													add(ruleDEVICE, position174)
												}
											case 's':
												{
													position175 := position
													if buffer[position] != rune('s') {
														goto l158
													}
													position++
													if buffer[position] != rune('e') {
														goto l158
													}
													position++
													if buffer[position] != rune('r') {
														goto l158
													}
													position++
													if buffer[position] != rune('v') {
														goto l158
													}
													position++
													if buffer[position] != rune('e') {
														goto l158
													}
													position++
													if buffer[position] != rune('r') {
														goto l158
													}
													position++
													if !_rules[rule_]() {
														goto l158
													}
													add(ruleSERVER, position175)
												}
											case 'm':
												{
													position176 := position
													if buffer[position] != rune('m') {
														goto l158
													}
													position++
													if buffer[position] != rune('o') {
														goto l158
													}
													position++
													if buffer[position] != rune('b') {
														goto l158
													}
													position++
													if buffer[position] != rune('i') {
														goto l158
													}
													position++
													if buffer[position] != rune('l') {
														goto l158
													}
													position++
													if buffer[position] != rune('e') {
														goto l158
													}
													position++
													if !_rules[rule_]() {
														goto l158
													}
													add(ruleMOBILE, position176)
												}
											case 'b':
												{
													position177 := position
													if buffer[position] != rune('b') {
														goto l158
													}
													position++
													if buffer[position] != rune('r') {
														goto l158
													}
													position++
													if buffer[position] != rune('o') {
														goto l158
													}
													position++
													if buffer[position] != rune('w') {
														goto l158
													}
													position++
													if buffer[position] != rune('s') {
														goto l158
													}
													position++
													if buffer[position] != rune('e') {
														goto l158
													}
													position++
													if buffer[position] != rune('r') {
														goto l158
													}
													position++
													if !_rules[rule_]() {
														goto l158
													}
													add(ruleBROWSER, position177)
												}
											case 'q':
												{
													position178 := position
													if buffer[position] != rune('q') {
														goto l158
													}
													position++
													if buffer[position] != rune('u') {
														goto l158
													}
													position++
													if buffer[position] != rune('e') {
														goto l158
													}
													position++
													if buffer[position] != rune('u') {
														goto l158
													}
													position++
													if buffer[position] != rune('e') {
														goto l158
													}
													position++
													if !_rules[rule_]() {
														goto l158
													}
													add(ruleQUEUE, position178)
												}
											default:
												{
													position179 := position
													if buffer[position] != rune('p') {
														goto l158
													}
													position++
													if buffer[position] != rune('e') {
														goto l158
													}
													position++
													if buffer[position] != rune('r') {
														goto l158
													}
													position++
													if buffer[position] != rune('s') {
														goto l158
													}
													position++
													if buffer[position] != rune('o') {
														goto l158
													}
													position++
													if buffer[position] != rune('n') {
														goto l158
													}
													position++
													if !_rules[rule_]() {
														goto l158
													}
													add(rulePERSON, position179)
												}
											}
										}

									}
								l167:
									add(ruleItemType, position166)
								}
							}
						}

					}
				l163:
					add(ruleItemParam, position162)
				}
			l160:
				{
					position161, tokenIndex161 := position, tokenIndex
					{
						position180 := position
						{
							position181, tokenIndex181 := position, tokenIndex
							if !_rules[ruleEXTERNAL]() {
								goto l182
							}
							if !_rules[ruleEQUALS]() {
								goto l182
							}
							if !_rules[ruleBoolean]() {
								goto l182
							}
							goto l181
						l182:
							position, tokenIndex = position181, tokenIndex181
							{
								switch buffer[position] {
								case 'e':
									if !_rules[ruleEXPANDED]() {
										goto l161
									}
									if !_rules[ruleEQUALS]() {
										goto l161
									}
									if !_rules[ruleStringLike]() {
										goto l161
									}
								case 'm':
									if !_rules[ruleMECHANISM]() {
										goto l161
									}
									if !_rules[ruleEQUALS]() {
										goto l161
									}
									if !_rules[ruleStringLike]() {
										goto l161
									}
								case 'n':
									if !_rules[ruleNAME]() {
										goto l161
									}
									if !_rules[ruleEQUALS]() {
										goto l161
									}
									if !_rules[ruleStringLike]() {
										goto l161
									}
								default:
									if !_rules[ruleTYPE]() {
										goto l161
									}
									if !_rules[ruleEQUALS]() {
										goto l161
									}
									{
										position184 := position
										{
											position185, tokenIndex185 := position, tokenIndex
											{
												position187 := position
												if buffer[position] != rune('d') {
													goto l186
												}
												position++
												if buffer[position] != rune('a') {
													goto l186
												}
												position++
												if buffer[position] != rune('t') {
													goto l186
												}
												position++
												if buffer[position] != rune('a') {
													goto l186
												}
												position++
												if buffer[position] != rune('b') {
													goto l186
												}
												position++
												if buffer[position] != rune('a') {
													goto l186
												}
												position++
												if buffer[position] != rune('s') {
													goto l186
												}
												position++
												if buffer[position] != rune('e') {
													goto l186
												}
												position++
												if !_rules[rule_]() {
													goto l186
												}
												add(ruleDATABASE, position187)
											}
											goto l185
										l186:
											position, tokenIndex = position185, tokenIndex185
											{
												position189 := position
												if buffer[position] != rune('b') {
													goto l188
												}
												position++
												if buffer[position] != rune('l') {
													goto l188
												}
												position++
												if buffer[position] != rune('o') {
													goto l188
												}
												position++
												if buffer[position] != rune('b') {
													goto l188
												}
												position++
												if buffer[position] != rune('s') {
													goto l188
												}
												position++
												if buffer[position] != rune('t') {
													goto l188
												}
												position++
												if buffer[position] != rune('o') {
													goto l188
												}
												position++
												if buffer[position] != rune('r') {
													goto l188
												}
												position++
												if buffer[position] != rune('e') {
													goto l188
												}
												position++
												if !_rules[rule_]() {
													goto l188
												}
												add(ruleBLOBSTORE, position189)
											}
											goto l185
										l188:
											position, tokenIndex = position185, tokenIndex185
											{
												switch buffer[position] {
												case 'c':
													{
														position191 := position
														if buffer[position] != rune('c') {
															goto l161
														}
														position++
														if buffer[position] != rune('o') {
															goto l161
														}
														position++
														if buffer[position] != rune('d') {
															goto l161
														}
														position++
														if buffer[position] != rune('e') {
															goto l161
														}
														position++
														if !_rules[rule_]() {
															goto l161
														}
														add(ruleCODE, position191)
													}
												case 'd':
													{
														position192 := position
														if buffer[position] != rune('d') {
															goto l161
														}
														position++
														if buffer[position] != rune('e') {
															goto l161
														}
														position++
														if buffer[position] != rune('v') {
															goto l161
														}
														position++
														if buffer[position] != rune('i') {
															goto l161
														}
														position++
														if buffer[position] != rune('c') {
															goto l161
														}
														position++
														if buffer[position] != rune('e') {
															goto l161
														}
														position++
														if !_rules[rule_]() {
															goto l161
														}
														add(ruleDEVICE, position192)
													}
												case 's':
													{
														position193 := position
														if buffer[position] != rune('s') {
															goto l161
														}
														position++
														if buffer[position] != rune('e') {
															goto l161
														}
														position++
														if buffer[position] != rune('r') {
															goto l161
														}
														position++
														if buffer[position] != rune('v') {
															goto l161
														}
														position++
														if buffer[position] != rune('e') {
															goto l161
														}
														position++
														if buffer[position] != rune('r') {
															goto l161
														}
														position++
														if !_rules[rule_]() {
															goto l161
														}
														add(ruleSERVER, position193)
													}
												case 'm':
													{
														position194 := position
														if buffer[position] != rune('m') {
															goto l161
														}
														position++
														if buffer[position] != rune('o') {
															goto l161
														}
														position++
														if buffer[position] != rune('b') {
															goto l161
														}
														position++
														if buffer[position] != rune('i') {
															goto l161
														}
														position++
														if buffer[position] != rune('l') {
															goto l161
														}
														position++
														if buffer[position] != rune('e') {
															goto l161
														}
														position++
														if !_rules[rule_]() {
															goto l161
														}
														add(ruleMOBILE, position194)
													}
												case 'b':
													{
														position195 := position
														if buffer[position] != rune('b') {
															goto l161
														}
														position++
														if buffer[position] != rune('r') {
															goto l161
														}
														position++
														if buffer[position] != rune('o') {
															goto l161
														}
														position++
														if buffer[position] != rune('w') {
															goto l161
														}
														position++
														if buffer[position] != rune('s') {
															goto l161
														}
														position++
														if buffer[position] != rune('e') {
															goto l161
														}
														position++
														if buffer[position] != rune('r') {
															goto l161
														}
														position++
														if !_rules[rule_]() {
															goto l161
														}
														add(ruleBROWSER, position195)
													}
												case 'q':
													{
														position196 := position
														if buffer[position] != rune('q') {
															goto l161
														}
														position++
														if buffer[position] != rune('u') {
															goto l161
														}
														position++
														if buffer[position] != rune('e') {
															goto l161
														}
														position++
														if buffer[position] != rune('u') {
															goto l161
														}
														position++
														if buffer[position] != rune('e') {
															goto l161
														}
														position++
														if !_rules[rule_]() {
															goto l161
														}
														add(ruleQUEUE, position196)
													}
												default:
													{
														position197 := position
														if buffer[position] != rune('p') {
															goto l161
														}
														position++
														if buffer[position] != rune('e') {
															goto l161
														}
														position++
														if buffer[position] != rune('r') {
															goto l161
														}
														position++
														if buffer[position] != rune('s') {
															goto l161
														}
														position++
														if buffer[position] != rune('o') {
															goto l161
														}
														position++
														if buffer[position] != rune('n') {
															goto l161
														}
														position++
														if !_rules[rule_]() {
															goto l161
														}
														add(rulePERSON, position197)
													}
												}
											}

										}
									l185:
										add(ruleItemType, position184)
									}
								}
							}

						}
					l181:
						add(ruleItemParam, position180)
					}
					goto l160
				l161:
					position, tokenIndex = position161, tokenIndex161
				}
				add(ruleItemParams, position159)
			}
			return true
		l158:
			position, tokenIndex = position158, tokenIndex158
			return false
		},
		/* 18 RelParams <- <RelParam+> */
		func() bool {
			position198, tokenIndex198 := position, tokenIndex
			{
				position199 := position
				{
					position202 := position
					{
						switch buffer[position] {
						case 'e':
							if !_rules[ruleEXPANDED]() {
								goto l198
							}
							if !_rules[ruleEQUALS]() {
								goto l198
							}
							if !_rules[ruleStringLike]() {
								goto l198
							}
						case 'a':
							if !_rules[ruleASYNC]() {
								goto l198
							}
							if !_rules[ruleEQUALS]() {
								goto l198
							}
							if !_rules[ruleBoolean]() {
								goto l198
							}
						case 'm':
							if !_rules[ruleMECHANISM]() {
								goto l198
							}
							if !_rules[ruleEQUALS]() {
								goto l198
							}
							if !_rules[ruleStringLike]() {
								goto l198
							}
						default:
							if !_rules[ruleVERB]() {
								goto l198
							}
							if !_rules[ruleEQUALS]() {
								goto l198
							}
							if !_rules[ruleStringLike]() {
								goto l198
							}
						}
					}

					add(ruleRelParam, position202)
				}
			l200:
				{
					position201, tokenIndex201 := position, tokenIndex
					{
						position204 := position
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l201
								}
								if !_rules[ruleEQUALS]() {
									goto l201
								}
								if !_rules[ruleStringLike]() {
									goto l201
								}
							case 'a':
								if !_rules[ruleASYNC]() {
									goto l201
								}
								if !_rules[ruleEQUALS]() {
									goto l201
								}
								if !_rules[ruleBoolean]() {
									goto l201
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l201
								}
								if !_rules[ruleEQUALS]() {
									goto l201
								}
								if !_rules[ruleStringLike]() {
									goto l201
								}
							default:
								if !_rules[ruleVERB]() {
									goto l201
								}
								if !_rules[ruleEQUALS]() {
									goto l201
								}
								if !_rules[ruleStringLike]() {
									goto l201
								}
							}
						}

						add(ruleRelParam, position204)
					}
					goto l200
				l201:
					position, tokenIndex = position201, tokenIndex201
				}
				add(ruleRelParams, position199)
			}
			return true
		l198:
			position, tokenIndex = position198, tokenIndex198
			return false
		},
		/* 19 ItemParam <- <((EXTERNAL EQUALS Boolean) / ((&('e') (EXPANDED EQUALS StringLike)) | (&('m') (MECHANISM EQUALS StringLike)) | (&('n') (NAME EQUALS StringLike)) | (&('t') (TYPE EQUALS ItemType))))> */
		nil,
		/* 20 RelParam <- <((&('e') (EXPANDED EQUALS StringLike)) | (&('a') (ASYNC EQUALS Boolean)) | (&('m') (MECHANISM EQUALS StringLike)) | (&('v') (VERB EQUALS StringLike)))> */
		nil,
		/* 21 ItemKeys <- <ItemKey+> */
		nil,
		/* 22 RelKeys <- <RelKey+> */
		nil,
		/* 23 ItemKey <- <((EXTERNAL / ((&('e') EXPANDED) | (&('m') MECHANISM) | (&('t') TYPE) | (&('n') NAME))) _)> */
		nil,
		/* 24 RelKey <- <(((&('e') EXPANDED) | (&('a') ASYNC) | (&('m') MECHANISM) | (&('v') VERB)) _)> */
		nil,
		/* 25 Error <- <(ERROR Number? StringLike*)> */
		nil,
		/* 26 StringLike <- <((Text / QuotedText) _)> */
		func() bool {
			position213, tokenIndex213 := position, tokenIndex
			{
				position214 := position
				{
					position215, tokenIndex215 := position, tokenIndex
					{
						position217 := position
						{
							switch buffer[position] {
							case '_':
								if buffer[position] != rune('_') {
									goto l216
								}
								position++
							case '-':
								if buffer[position] != rune('-') {
									goto l216
								}
								position++
							case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l216
								}
								position++
							case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l216
								}
								position++
							default:
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l216
								}
								position++
							}
						}

					l218:
						{
							position219, tokenIndex219 := position, tokenIndex
							{
								switch buffer[position] {
								case '_':
									if buffer[position] != rune('_') {
										goto l219
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l219
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l219
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l219
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l219
									}
									position++
								}
							}

							goto l218
						l219:
							position, tokenIndex = position219, tokenIndex219
						}
						add(ruleText, position217)
					}
					goto l215
				l216:
					position, tokenIndex = position215, tokenIndex215
					{
						position222 := position
						if !_rules[ruleQUOTE]() {
							goto l213
						}
					l223:
						{
							position224, tokenIndex224 := position, tokenIndex
							{
								switch buffer[position] {
								case ' ':
									if buffer[position] != rune(' ') {
										goto l224
									}
									position++
								case ':':
									if buffer[position] != rune(':') {
										goto l224
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l224
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l224
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l224
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l224
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l224
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l224
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l224
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l224
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l224
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l224
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l224
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l224
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l224
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l224
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l224
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l224
									}
									position++
								case ',':
									if buffer[position] != rune(',') {
										goto l224
									}
									position++
								case '.':
									if buffer[position] != rune('.') {
										goto l224
									}
									position++
								case '_':
									if buffer[position] != rune('_') {
										goto l224
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l224
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l224
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l224
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l224
									}
									position++
								}
							}

							goto l223
						l224:
							position, tokenIndex = position224, tokenIndex224
						}
						if !_rules[ruleQUOTE]() {
							goto l213
						}
						add(ruleQuotedText, position222)
					}
				}
			l215:
				if !_rules[rule_]() {
					goto l213
				}
				add(ruleStringLike, position214)
			}
			return true
		l213:
			position, tokenIndex = position213, tokenIndex213
			return false
		},
		/* 27 Boolean <- <(TRUE / FALSE)> */
		func() bool {
			position226, tokenIndex226 := position, tokenIndex
			{
				position227 := position
				{
					position228, tokenIndex228 := position, tokenIndex
					{
						position230 := position
						if buffer[position] != rune('t') {
							goto l229
						}
						position++
						if buffer[position] != rune('r') {
							goto l229
						}
						position++
						if buffer[position] != rune('u') {
							goto l229
						}
						position++
						if buffer[position] != rune('e') {
							goto l229
						}
						position++
						if !_rules[rule_]() {
							goto l229
						}
						add(ruleTRUE, position230)
					}
					goto l228
				l229:
					position, tokenIndex = position228, tokenIndex228
					{
						position231 := position
						if buffer[position] != rune('f') {
							goto l226
						}
						position++
						if buffer[position] != rune('a') {
							goto l226
						}
						position++
						if buffer[position] != rune('l') {
							goto l226
						}
						position++
						if buffer[position] != rune('s') {
							goto l226
						}
						position++
						if buffer[position] != rune('e') {
							goto l226
						}
						position++
						if !_rules[rule_]() {
							goto l226
						}
						add(ruleFALSE, position231)
					}
				}
			l228:
				add(ruleBoolean, position227)
			}
			return true
		l226:
			position, tokenIndex = position226, tokenIndex226
			return false
		},
		/* 28 Text <- <((&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))+> */
		nil,
		/* 29 QuotedText <- <(QUOTE ((&(' ') ' ') | (&(':') ':') | (&(';') ';') | (&('~') '~') | (&('=') '=') | (&('+') '+') | (&(']') ']') | (&('[') '[') | (&(')') ')') | (&('(') '(') | (&('*') '*') | (&('&') '&') | (&('^') '^') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('@') '@') | (&('!') '!') | (&(',') ',') | (&('.') '.') | (&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))* QUOTE)> */
		nil,
		/* 30 ItemsList <- <(Item LIST Number?)> */
		nil,
		/* 31 RelsList <- <(Rel LIST Number?)> */
		nil,
		/* 32 Number <- <([0-9]+ _)> */
		func() bool {
			position236, tokenIndex236 := position, tokenIndex
			{
				position237 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l236
				}
				position++
			l238:
				{
					position239, tokenIndex239 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l239
					}
					position++
					goto l238
				l239:
					position, tokenIndex = position239, tokenIndex239
				}
				if !_rules[rule_]() {
					goto l236
				}
				add(ruleNumber, position237)
			}
			return true
		l236:
			position, tokenIndex = position236, tokenIndex236
			return false
		},
		/* 33 ItemType <- <(DATABASE / BLOBSTORE / ((&('c') CODE) | (&('d') DEVICE) | (&('s') SERVER) | (&('m') MOBILE) | (&('b') BROWSER) | (&('q') QUEUE) | (&('p') PERSON)))> */
		nil,
		/* 34 ItemExists <- <(ITEM_EXISTS / (Item EXISTS))> */
		nil,
		/* 35 RelExists <- <(REL_EXISTS / (Rel EXISTS))> */
		nil,
		/* 36 Item <- <ITEM> */
		func() bool {
			position243, tokenIndex243 := position, tokenIndex
			{
				position244 := position
				if !_rules[ruleITEM]() {
					goto l243
				}
				add(ruleItem, position244)
			}
			return true
		l243:
			position, tokenIndex = position243, tokenIndex243
			return false
		},
		/* 37 Rel <- <REL> */
		func() bool {
			position245, tokenIndex245 := position, tokenIndex
			{
				position246 := position
				if !_rules[ruleREL]() {
					goto l245
				}
				add(ruleRel, position246)
			}
			return true
		l245:
			position, tokenIndex = position245, tokenIndex245
			return false
		},
		/* 38 Flag <- <(StrictFlag / VerboseFlag / IdsFlag)> */
		nil,
		/* 39 StrictFlag <- <(FLAG STRICT)> */
		nil,
		/* 40 VerboseFlag <- <(FLAG VERBOSE)> */
		nil,
		/* 41 IdsFlag <- <(FLAG IDS)> */
		nil,
		/* 42 Keyword <- <(ITEM / ITEM_EXISTS / REL / FROM_QUERY / IN / CREATE / FETCH / ((&('-') FLAG) | (&('n') NEST) | (&('f') FREE) | (&('e') EXISTS) | (&('c') CLEAR) | (&('s') SET) | (&('d') DELETE) | (&('i') IN_QUERY) | (&('t') TO_QUERY) | (&('r') REL_EXISTS)))> */
		nil,
		/* 43 WORLD <- <('w' 'o' 'r' 'l' 'd' _)> */
		func() bool {
			position252, tokenIndex252 := position, tokenIndex
			{
				position253 := position
				if buffer[position] != rune('w') {
					goto l252
				}
				position++
				if buffer[position] != rune('o') {
					goto l252
				}
				position++
				if buffer[position] != rune('r') {
					goto l252
				}
				position++
				if buffer[position] != rune('l') {
					goto l252
				}
				position++
				if buffer[position] != rune('d') {
					goto l252
				}
				position++
				if !_rules[rule_]() {
					goto l252
				}
				add(ruleWORLD, position253)
			}
			return true
		l252:
			position, tokenIndex = position252, tokenIndex252
			return false
		},
		/* 44 ENDWORLD <- <('e' 'n' 'd' 'w' 'o' 'r' 'l' 'd' _)> */
		nil,
		/* 45 ERROR <- <('e' 'r' 'r' 'o' 'r' _)> */
		nil,
		/* 46 ITEM <- <('i' 't' 'e' 'm' 's'? _)> */
		func() bool {
			position256, tokenIndex256 := position, tokenIndex
			{
				position257 := position
				if buffer[position] != rune('i') {
					goto l256
				}
				position++
				if buffer[position] != rune('t') {
					goto l256
				}
				position++
				if buffer[position] != rune('e') {
					goto l256
				}
				position++
				if buffer[position] != rune('m') {
					goto l256
				}
				position++
				{
					position258, tokenIndex258 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l258
					}
					position++
					goto l259
				l258:
					position, tokenIndex = position258, tokenIndex258
				}
			l259:
				if !_rules[rule_]() {
					goto l256
				}
				add(ruleITEM, position257)
			}
			return true
		l256:
			position, tokenIndex = position256, tokenIndex256
			return false
		},
		/* 47 ITEM_EXISTS <- <('i' 't' 'e' 'm' '?' _)> */
		func() bool {
			position260, tokenIndex260 := position, tokenIndex
			{
				position261 := position
				if buffer[position] != rune('i') {
					goto l260
				}
				position++
				if buffer[position] != rune('t') {
					goto l260
				}
				position++
				if buffer[position] != rune('e') {
					goto l260
				}
				position++
				if buffer[position] != rune('m') {
					goto l260
				}
				position++
				if buffer[position] != rune('?') {
					goto l260
				}
				position++
				if !_rules[rule_]() {
					goto l260
				}
				add(ruleITEM_EXISTS, position261)
			}
			return true
		l260:
			position, tokenIndex = position260, tokenIndex260
			return false
		},
		/* 48 REL <- <('r' 'e' 'l' 's'? _)> */
		func() bool {
			position262, tokenIndex262 := position, tokenIndex
			{
				position263 := position
				if buffer[position] != rune('r') {
					goto l262
				}
				position++
				if buffer[position] != rune('e') {
					goto l262
				}
				position++
				if buffer[position] != rune('l') {
					goto l262
				}
				position++
				{
					position264, tokenIndex264 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l264
					}
					position++
					goto l265
				l264:
					position, tokenIndex = position264, tokenIndex264
				}
			l265:
				if !_rules[rule_]() {
					goto l262
				}
				add(ruleREL, position263)
			}
			return true
		l262:
			position, tokenIndex = position262, tokenIndex262
			return false
		},
		/* 49 REL_EXISTS <- <('r' 'e' 'l' '?' _)> */
		func() bool {
			position266, tokenIndex266 := position, tokenIndex
			{
				position267 := position
				if buffer[position] != rune('r') {
					goto l266
				}
				position++
				if buffer[position] != rune('e') {
					goto l266
				}
				position++
				if buffer[position] != rune('l') {
					goto l266
				}
				position++
				if buffer[position] != rune('?') {
					goto l266
				}
				position++
				if !_rules[rule_]() {
					goto l266
				}
				add(ruleREL_EXISTS, position267)
			}
			return true
		l266:
			position, tokenIndex = position266, tokenIndex266
			return false
		},
		/* 50 FROM_QUERY <- <('f' 'r' 'o' 'm' '?' _)> */
		nil,
		/* 51 TO_QUERY <- <('t' 'o' '?' _)> */
		nil,
		/* 52 IN <- <('i' 'n' _)> */
		func() bool {
			position270, tokenIndex270 := position, tokenIndex
			{
				position271 := position
				if buffer[position] != rune('i') {
					goto l270
				}
				position++
				if buffer[position] != rune('n') {
					goto l270
				}
				position++
				if !_rules[rule_]() {
					goto l270
				}
				add(ruleIN, position271)
			}
			return true
		l270:
			position, tokenIndex = position270, tokenIndex270
			return false
		},
		/* 53 IN_QUERY <- <('i' 'n' '?' _)> */
		func() bool {
			position272, tokenIndex272 := position, tokenIndex
			{
				position273 := position
				if buffer[position] != rune('i') {
					goto l272
				}
				position++
				if buffer[position] != rune('n') {
					goto l272
				}
				position++
				if buffer[position] != rune('?') {
					goto l272
				}
				position++
				if !_rules[rule_]() {
					goto l272
				}
				add(ruleIN_QUERY, position273)
			}
			return true
		l272:
			position, tokenIndex = position272, tokenIndex272
			return false
		},
		/* 54 CREATE <- <('c' 'r' 'e' 'a' 't' 'e' _)> */
		func() bool {
			position274, tokenIndex274 := position, tokenIndex
			{
				position275 := position
				if buffer[position] != rune('c') {
					goto l274
				}
				position++
				if buffer[position] != rune('r') {
					goto l274
				}
				position++
				if buffer[position] != rune('e') {
					goto l274
				}
				position++
				if buffer[position] != rune('a') {
					goto l274
				}
				position++
				if buffer[position] != rune('t') {
					goto l274
				}
				position++
				if buffer[position] != rune('e') {
					goto l274
				}
				position++
				if !_rules[rule_]() {
					goto l274
				}
				add(ruleCREATE, position275)
			}
			return true
		l274:
			position, tokenIndex = position274, tokenIndex274
			return false
		},
		/* 55 DELETE <- <('d' 'e' 'l' 'e' 't' 'e' _)> */
		func() bool {
			position276, tokenIndex276 := position, tokenIndex
			{
				position277 := position
				if buffer[position] != rune('d') {
					goto l276
				}
				position++
				if buffer[position] != rune('e') {
					goto l276
				}
				position++
				if buffer[position] != rune('l') {
					goto l276
				}
				position++
				if buffer[position] != rune('e') {
					goto l276
				}
				position++
				if buffer[position] != rune('t') {
					goto l276
				}
				position++
				if buffer[position] != rune('e') {
					goto l276
				}
				position++
				if !_rules[rule_]() {
					goto l276
				}
				add(ruleDELETE, position277)
			}
			return true
		l276:
			position, tokenIndex = position276, tokenIndex276
			return false
		},
		/* 56 SET <- <('s' 'e' 't' _)> */
		func() bool {
			position278, tokenIndex278 := position, tokenIndex
			{
				position279 := position
				if buffer[position] != rune('s') {
					goto l278
				}
				position++
				if buffer[position] != rune('e') {
					goto l278
				}
				position++
				if buffer[position] != rune('t') {
					goto l278
				}
				position++
				if !_rules[rule_]() {
					goto l278
				}
				add(ruleSET, position279)
			}
			return true
		l278:
			position, tokenIndex = position278, tokenIndex278
			return false
		},
		/* 57 CLEAR <- <('c' 'l' 'e' 'a' 'r' _)> */
		func() bool {
			position280, tokenIndex280 := position, tokenIndex
			{
				position281 := position
				if buffer[position] != rune('c') {
					goto l280
				}
				position++
				if buffer[position] != rune('l') {
					goto l280
				}
				position++
				if buffer[position] != rune('e') {
					goto l280
				}
				position++
				if buffer[position] != rune('a') {
					goto l280
				}
				position++
				if buffer[position] != rune('r') {
					goto l280
				}
				position++
				if !_rules[rule_]() {
					goto l280
				}
				add(ruleCLEAR, position281)
			}
			return true
		l280:
			position, tokenIndex = position280, tokenIndex280
			return false
		},
		/* 58 FETCH <- <('f' 'e' 't' 'c' 'h' _)> */
		func() bool {
			position282, tokenIndex282 := position, tokenIndex
			{
				position283 := position
				if buffer[position] != rune('f') {
					goto l282
				}
				position++
				if buffer[position] != rune('e') {
					goto l282
				}
				position++
				if buffer[position] != rune('t') {
					goto l282
				}
				position++
				if buffer[position] != rune('c') {
					goto l282
				}
				position++
				if buffer[position] != rune('h') {
					goto l282
				}
				position++
				if !_rules[rule_]() {
					goto l282
				}
				add(ruleFETCH, position283)
			}
			return true
		l282:
			position, tokenIndex = position282, tokenIndex282
			return false
		},
		/* 59 LIST <- <('l' 'i' 's' 't' _)> */
		func() bool {
			position284, tokenIndex284 := position, tokenIndex
			{
				position285 := position
				if buffer[position] != rune('l') {
					goto l284
				}
				position++
				if buffer[position] != rune('i') {
					goto l284
				}
				position++
				if buffer[position] != rune('s') {
					goto l284
				}
				position++
				if buffer[position] != rune('t') {
					goto l284
				}
				position++
				if !_rules[rule_]() {
					goto l284
				}
				add(ruleLIST, position285)
			}
			return true
		l284:
			position, tokenIndex = position284, tokenIndex284
			return false
		},
		/* 60 EXISTS <- <('e' 'x' 'i' 's' 't' 's' _)> */
		func() bool {
			position286, tokenIndex286 := position, tokenIndex
			{
				position287 := position
				if buffer[position] != rune('e') {
					goto l286
				}
				position++
				if buffer[position] != rune('x') {
					goto l286
				}
				position++
				if buffer[position] != rune('i') {
					goto l286
				}
				position++
				if buffer[position] != rune('s') {
					goto l286
				}
				position++
				if buffer[position] != rune('t') {
					goto l286
				}
				position++
				if buffer[position] != rune('s') {
					goto l286
				}
				position++
				if !_rules[rule_]() {
					goto l286
				}
				add(ruleEXISTS, position287)
			}
			return true
		l286:
			position, tokenIndex = position286, tokenIndex286
			return false
		},
		/* 61 FREE <- <('f' 'r' 'e' 'e' _)> */
		func() bool {
			position288, tokenIndex288 := position, tokenIndex
			{
				position289 := position
				if buffer[position] != rune('f') {
					goto l288
				}
				position++
				if buffer[position] != rune('r') {
					goto l288
				}
				position++
				if buffer[position] != rune('e') {
					goto l288
				}
				position++
				if buffer[position] != rune('e') {
					goto l288
				}
				position++
				if !_rules[rule_]() {
					goto l288
				}
				add(ruleFREE, position289)
			}
			return true
		l288:
			position, tokenIndex = position288, tokenIndex288
			return false
		},
		/* 62 NEST <- <('n' 'e' 's' 't' _)> */
		func() bool {
			position290, tokenIndex290 := position, tokenIndex
			{
				position291 := position
				if buffer[position] != rune('n') {
					goto l290
				}
				position++
				if buffer[position] != rune('e') {
					goto l290
				}
				position++
				if buffer[position] != rune('s') {
					goto l290
				}
				position++
				if buffer[position] != rune('t') {
					goto l290
				}
				position++
				if !_rules[rule_]() {
					goto l290
				}
				add(ruleNEST, position291)
			}
			return true
		l290:
			position, tokenIndex = position290, tokenIndex290
			return false
		},
		/* 63 TRUE <- <('t' 'r' 'u' 'e' _)> */
		nil,
		/* 64 FALSE <- <('f' 'a' 'l' 's' 'e' _)> */
		nil,
		/* 65 EXTERNAL <- <('e' 'x' 't' 'e' 'r' 'n' 'a' 'l')> */
		func() bool {
			position294, tokenIndex294 := position, tokenIndex
			{
				position295 := position
				if buffer[position] != rune('e') {
					goto l294
				}
				position++
				if buffer[position] != rune('x') {
					goto l294
				}
				position++
				if buffer[position] != rune('t') {
					goto l294
				}
				position++
				if buffer[position] != rune('e') {
					goto l294
				}
				position++
				if buffer[position] != rune('r') {
					goto l294
				}
				position++
				if buffer[position] != rune('n') {
					goto l294
				}
				position++
				if buffer[position] != rune('a') {
					goto l294
				}
				position++
				if buffer[position] != rune('l') {
					goto l294
				}
				position++
				add(ruleEXTERNAL, position295)
			}
			return true
		l294:
			position, tokenIndex = position294, tokenIndex294
			return false
		},
		/* 66 NAME <- <('n' 'a' 'm' 'e')> */
		func() bool {
			position296, tokenIndex296 := position, tokenIndex
			{
				position297 := position
				if buffer[position] != rune('n') {
					goto l296
				}
				position++
				if buffer[position] != rune('a') {
					goto l296
				}
				position++
				if buffer[position] != rune('m') {
					goto l296
				}
				position++
				if buffer[position] != rune('e') {
					goto l296
				}
				position++
				add(ruleNAME, position297)
			}
			return true
		l296:
			position, tokenIndex = position296, tokenIndex296
			return false
		},
		/* 67 TYPE <- <('t' 'y' 'p' 'e')> */
		func() bool {
			position298, tokenIndex298 := position, tokenIndex
			{
				position299 := position
				if buffer[position] != rune('t') {
					goto l298
				}
				position++
				if buffer[position] != rune('y') {
					goto l298
				}
				position++
				if buffer[position] != rune('p') {
					goto l298
				}
				position++
				if buffer[position] != rune('e') {
					goto l298
				}
				position++
				add(ruleTYPE, position299)
			}
			return true
		l298:
			position, tokenIndex = position298, tokenIndex298
			return false
		},
		/* 68 VERB <- <('v' 'e' 'r' 'b')> */
		func() bool {
			position300, tokenIndex300 := position, tokenIndex
			{
				position301 := position
				if buffer[position] != rune('v') {
					goto l300
				}
				position++
				if buffer[position] != rune('e') {
					goto l300
				}
				position++
				if buffer[position] != rune('r') {
					goto l300
				}
				position++
				if buffer[position] != rune('b') {
					goto l300
				}
				position++
				add(ruleVERB, position301)
			}
			return true
		l300:
			position, tokenIndex = position300, tokenIndex300
			return false
		},
		/* 69 MECHANISM <- <('m' 'e' 'c' 'h' 'a' 'n' 'i' 's' 'm')> */
		func() bool {
			position302, tokenIndex302 := position, tokenIndex
			{
				position303 := position
				if buffer[position] != rune('m') {
					goto l302
				}
				position++
				if buffer[position] != rune('e') {
					goto l302
				}
				position++
				if buffer[position] != rune('c') {
					goto l302
				}
				position++
				if buffer[position] != rune('h') {
					goto l302
				}
				position++
				if buffer[position] != rune('a') {
					goto l302
				}
				position++
				if buffer[position] != rune('n') {
					goto l302
				}
				position++
				if buffer[position] != rune('i') {
					goto l302
				}
				position++
				if buffer[position] != rune('s') {
					goto l302
				}
				position++
				if buffer[position] != rune('m') {
					goto l302
				}
				position++
				add(ruleMECHANISM, position303)
			}
			return true
		l302:
			position, tokenIndex = position302, tokenIndex302
			return false
		},
		/* 70 ASYNC <- <('a' 's' 'y' 'n' 'c')> */
		func() bool {
			position304, tokenIndex304 := position, tokenIndex
			{
				position305 := position
				if buffer[position] != rune('a') {
					goto l304
				}
				position++
				if buffer[position] != rune('s') {
					goto l304
				}
				position++
				if buffer[position] != rune('y') {
					goto l304
				}
				position++
				if buffer[position] != rune('n') {
					goto l304
				}
				position++
				if buffer[position] != rune('c') {
					goto l304
				}
				position++
				add(ruleASYNC, position305)
			}
			return true
		l304:
			position, tokenIndex = position304, tokenIndex304
			return false
		},
		/* 71 EXPANDED <- <('e' 'x' 'p' 'a' 'n' 'd' 'e' 'd')> */
		func() bool {
			position306, tokenIndex306 := position, tokenIndex
			{
				position307 := position
				if buffer[position] != rune('e') {
					goto l306
				}
				position++
				if buffer[position] != rune('x') {
					goto l306
				}
				position++
				if buffer[position] != rune('p') {
					goto l306
				}
				position++
				if buffer[position] != rune('a') {
					goto l306
				}
				position++
				if buffer[position] != rune('n') {
					goto l306
				}
				position++
				if buffer[position] != rune('d') {
					goto l306
				}
				position++
				if buffer[position] != rune('e') {
					goto l306
				}
				position++
				if buffer[position] != rune('d') {
					goto l306
				}
				position++
				add(ruleEXPANDED, position307)
			}
			return true
		l306:
			position, tokenIndex = position306, tokenIndex306
			return false
		},
		/* 72 PERSON <- <('p' 'e' 'r' 's' 'o' 'n' _)> */
		nil,
		/* 73 DATABASE <- <('d' 'a' 't' 'a' 'b' 'a' 's' 'e' _)> */
		nil,
		/* 74 QUEUE <- <('q' 'u' 'e' 'u' 'e' _)> */
		nil,
		/* 75 BLOBSTORE <- <('b' 'l' 'o' 'b' 's' 't' 'o' 'r' 'e' _)> */
		nil,
		/* 76 BROWSER <- <('b' 'r' 'o' 'w' 's' 'e' 'r' _)> */
		nil,
		/* 77 MOBILE <- <('m' 'o' 'b' 'i' 'l' 'e' _)> */
		nil,
		/* 78 SERVER <- <('s' 'e' 'r' 'v' 'e' 'r' _)> */
		nil,
		/* 79 DEVICE <- <('d' 'e' 'v' 'i' 'c' 'e' _)> */
		nil,
		/* 80 CODE <- <('c' 'o' 'd' 'e' _)> */
		nil,
		/* 81 QUOTE <- <'"'> */
		func() bool {
			position317, tokenIndex317 := position, tokenIndex
			{
				position318 := position
				if buffer[position] != rune('"') {
					goto l317
				}
				position++
				add(ruleQUOTE, position318)
			}
			return true
		l317:
			position, tokenIndex = position317, tokenIndex317
			return false
		},
		/* 82 EQUALS <- <'='> */
		func() bool {
			position319, tokenIndex319 := position, tokenIndex
			{
				position320 := position
				if buffer[position] != rune('=') {
					goto l319
				}
				position++
				add(ruleEQUALS, position320)
			}
			return true
		l319:
			position, tokenIndex = position319, tokenIndex319
			return false
		},
		/* 83 FLAG <- <('-' / ('-' '-'))> */
		func() bool {
			position321, tokenIndex321 := position, tokenIndex
			{
				position322 := position
				{
					position323, tokenIndex323 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l324
					}
					position++
					goto l323
				l324:
					position, tokenIndex = position323, tokenIndex323
					if buffer[position] != rune('-') {
						goto l321
					}
					position++
					if buffer[position] != rune('-') {
						goto l321
					}
					position++
				}
			l323:
				add(ruleFLAG, position322)
			}
			return true
		l321:
			position, tokenIndex = position321, tokenIndex321
			return false
		},
		/* 84 STRICT <- <('s' 't' 'r' 'i' 'c' 't' _)> */
		nil,
		/* 85 VERBOSE <- <('v' 'e' 'r' 'b' 'o' 's' 'e' _)> */
		nil,
		/* 86 IDS <- <('i' 'd' 's' _)> */
		func() bool {
			position327, tokenIndex327 := position, tokenIndex
			{
				position328 := position
				if buffer[position] != rune('i') {
					goto l327
				}
				position++
				if buffer[position] != rune('d') {
					goto l327
				}
				position++
				if buffer[position] != rune('s') {
					goto l327
				}
				position++
				if !_rules[rule_]() {
					goto l327
				}
				add(ruleIDS, position328)
			}
			return true
		l327:
			position, tokenIndex = position327, tokenIndex327
			return false
		},
		/* 87 _ <- <Whitespace*> */
		func() bool {
			{
				position330 := position
			l331:
				{
					position332, tokenIndex332 := position, tokenIndex
					{
						position333 := position
						{
							switch buffer[position] {
							case '\t':
								if buffer[position] != rune('\t') {
									goto l332
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l332
								}
								position++
							default:
								if !_rules[ruleEOL]() {
									goto l332
								}
							}
						}

						add(ruleWhitespace, position333)
					}
					goto l331
				l332:
					position, tokenIndex = position332, tokenIndex332
				}
				add(rule_, position330)
			}
			return true
		},
		/* 88 Whitespace <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') EOL))> */
		nil,
		/* 89 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position336, tokenIndex336 := position, tokenIndex
			{
				position337 := position
				{
					position338, tokenIndex338 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l339
					}
					position++
					if buffer[position] != rune('\n') {
						goto l339
					}
					position++
					goto l338
				l339:
					position, tokenIndex = position338, tokenIndex338
					if buffer[position] != rune('\n') {
						goto l340
					}
					position++
					goto l338
				l340:
					position, tokenIndex = position338, tokenIndex338
					if buffer[position] != rune('\r') {
						goto l336
					}
					position++
				}
			l338:
				add(ruleEOL, position337)
			}
			return true
		l336:
			position, tokenIndex = position336, tokenIndex336
			return false
		},
		/* 90 END <- <!.> */
		func() bool {
			position341, tokenIndex341 := position, tokenIndex
			{
				position342 := position
				{
					position343, tokenIndex343 := position, tokenIndex
					if !matchDot() {
						goto l343
					}
					goto l341
				l343:
					position, tokenIndex = position343, tokenIndex343
				}
				add(ruleEND, position342)
			}
			return true
		l341:
			position, tokenIndex = position341, tokenIndex341
			return false
		},
		/* 92 Action0 <- <{
		   p.StmtType = "response"
		 }> */
		nil,
		/* 93 Action1 <- <{
		   p.StmtType = "Mutation"
		 }> */
		nil,
		/* 94 Action2 <- <{
		   p.StmtType = "FetchQuery"
		 }> */
		nil,
		/* 95 Action3 <- <{
		   p.StmtType = "ExistsQuery"
		 }> */
		nil,
		/* 96 Action4 <- <{
		   p.StmtType = "StateBound"
		 }> */
		nil,
	}
	p.rules = _rules
	return nil
}
