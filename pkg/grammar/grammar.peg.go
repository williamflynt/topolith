package grammar

// Code generated by peg -inline -switch -strict -output grammar.peg.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleValid
	ruleResponse
	ruleCommand
	ruleMutation
	ruleTreeMutation
	ruleQuery
	ruleFetchQuery
	ruleListQuery
	ruleExistsQuery
	ruleStateBound
	ruleCreateOrFetch
	ruleCreateOrSet
	ruleObject
	ruleWorldObject
	ruleItemObject
	ruleRelObject
	ruleError
	ruleLimit
	ruleIdentifier
	ruleSecondIdentifier
	ruleDualIdentifier
	ruleIdentifierList
	ruleItemParams
	ruleRelParams
	ruleItemParam
	ruleRelParam
	ruleItemKeys
	ruleRelKeys
	ruleItemKey
	ruleRelKey
	ruleStringLike
	ruleNumber
	ruleBoolean
	ruleText
	ruleQuotedText
	ruleItemExists
	ruleRelExists
	ruleWorld
	ruleItem
	ruleRel
	ruleCreate
	ruleFetch
	ruleSet
	ruleClear
	ruleDelete
	ruleList
	ruleNest
	ruleFree
	ruleInQuery
	ruleFromQuery
	ruleToQuery
	ruleExists
	ruleFlag
	ruleStrictFlag
	ruleVerboseFlag
	ruleIdsFlag
	ruleBeginWorld
	ruleEndWorld
	ruleItemType
	ruleKeyword
	ruleWORLD
	ruleENDWORLD
	ruleERROR
	ruleITEM
	ruleITEM_EXISTS
	ruleREL
	ruleREL_EXISTS
	ruleFROM_QUERY
	ruleTO_QUERY
	ruleIN
	ruleIN_QUERY
	ruleCREATE
	ruleDELETE
	ruleSET
	ruleCLEAR
	ruleFETCH
	ruleLIST
	ruleEXISTS
	ruleFREE
	ruleNEST
	ruleTRUE
	ruleFALSE
	ruleEXTERNAL
	ruleNAME
	ruleTYPE
	ruleVERB
	ruleMECHANISM
	ruleASYNC
	ruleEXPANDED
	rulePERSON
	ruleDATABASE
	ruleQUEUE
	ruleBLOBSTORE
	ruleBROWSER
	ruleMOBILE
	ruleSERVER
	ruleDEVICE
	ruleCODE
	ruleDELIMITER
	ruleQUOTE
	ruleEQUALS
	ruleFLAG
	ruleSTRICT
	ruleVERBOSE
	ruleIDS
	rule_
	ruleWhitespace
	ruleEOL
	ruleEND
	ruleAction0
	ruleAction1
	rulePegText
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
)

var rul3s = [...]string{
	"Unknown",
	"Valid",
	"Response",
	"Command",
	"Mutation",
	"TreeMutation",
	"Query",
	"FetchQuery",
	"ListQuery",
	"ExistsQuery",
	"StateBound",
	"CreateOrFetch",
	"CreateOrSet",
	"Object",
	"WorldObject",
	"ItemObject",
	"RelObject",
	"Error",
	"Limit",
	"Identifier",
	"SecondIdentifier",
	"DualIdentifier",
	"IdentifierList",
	"ItemParams",
	"RelParams",
	"ItemParam",
	"RelParam",
	"ItemKeys",
	"RelKeys",
	"ItemKey",
	"RelKey",
	"StringLike",
	"Number",
	"Boolean",
	"Text",
	"QuotedText",
	"ItemExists",
	"RelExists",
	"World",
	"Item",
	"Rel",
	"Create",
	"Fetch",
	"Set",
	"Clear",
	"Delete",
	"List",
	"Nest",
	"Free",
	"InQuery",
	"FromQuery",
	"ToQuery",
	"Exists",
	"Flag",
	"StrictFlag",
	"VerboseFlag",
	"IdsFlag",
	"BeginWorld",
	"EndWorld",
	"ItemType",
	"Keyword",
	"WORLD",
	"ENDWORLD",
	"ERROR",
	"ITEM",
	"ITEM_EXISTS",
	"REL",
	"REL_EXISTS",
	"FROM_QUERY",
	"TO_QUERY",
	"IN",
	"IN_QUERY",
	"CREATE",
	"DELETE",
	"SET",
	"CLEAR",
	"FETCH",
	"LIST",
	"EXISTS",
	"FREE",
	"NEST",
	"TRUE",
	"FALSE",
	"EXTERNAL",
	"NAME",
	"TYPE",
	"VERB",
	"MECHANISM",
	"ASYNC",
	"EXPANDED",
	"PERSON",
	"DATABASE",
	"QUEUE",
	"BLOBSTORE",
	"BROWSER",
	"MOBILE",
	"SERVER",
	"DEVICE",
	"CODE",
	"DELIMITER",
	"QUOTE",
	"EQUALS",
	"FLAG",
	"STRICT",
	"VERBOSE",
	"IDS",
	"_",
	"Whitespace",
	"EOL",
	"END",
	"Action0",
	"Action1",
	"PegText",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	StmtType string
	InputAttributes
	Response

	text   string // Text parsed by the StringLike rule.
	number int    // Number parsed by the Number rule.
	bool   bool   // Boolean parsed by the Boolean rule.

	Buffer string
	buffer []rune
	rules  [160]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.StmtType = "Response"

		case ruleAction1:

			p.StmtType = "Command"

		case ruleAction2:
			p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text))
		case ruleAction3:
			p.InputAttributes.Verb = "fetch"
		case ruleAction4:
			p.InputAttributes.Verb = "list"
		case ruleAction5:
			p.InputAttributes.Verb = "create-or-fetch"
		case ruleAction6:
			p.InputAttributes.Verb = "create-or-set"
		case ruleAction7:
			p.Response.Object.Repr = cleanString(text)
		case ruleAction8:
			p.Response.Object.Repr = cleanString(text)
		case ruleAction9:
			p.Response.Object.Repr = cleanString(text)
		case ruleAction10:

			p.Response.Error.Message = cleanString(text)
			if p.number != 0 {
				p.Response.Error.Code = p.number
			}

		case ruleAction11:
			p.InputAttributes.Params["limit"] = cleanString(text)
		case ruleAction12:
			p.InputAttributes.ResourceId = cleanString(text)
		case ruleAction13:

			p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text))

		case ruleAction14:

			p.InputAttributes.ResourceId = ""
			ids := strings.Fields(text)
			for _, id := range ids {
				p.InputAttributes.ResourceIds = append(p.InputAttributes.ResourceIds, cleanString(id))
			}

		case ruleAction15:
			p.Params["external"] = cleanString(text)
		case ruleAction16:
			p.Params["type"] = cleanString(text)
		case ruleAction17:
			p.Params["name"] = cleanString(text)
		case ruleAction18:
			p.Params["mechanism"] = cleanString(text)
		case ruleAction19:
			p.Params["expanded"] = cleanString(text)
		case ruleAction20:
			p.Params["verb"] = cleanString(text)
		case ruleAction21:
			p.Params["mechanism"] = cleanString(text)
		case ruleAction22:
			p.Params["async"] = cleanString(text)
		case ruleAction23:
			p.Params["expanded"] = cleanString(text)
		case ruleAction24:
			p.InputAttributes.Params[cleanString(text)] = ""
		case ruleAction25:
			p.InputAttributes.Params[cleanString(text)] = ""
		case ruleAction26:
			p.text = cleanString(text)
		case ruleAction27:
			n, _ := strconv.Atoi(text)
			p.number = n
		case ruleAction28:
			p.bool = text == "true"
		case ruleAction29:
			p.InputAttributes.ResourceType = "item"
			p.InputAttributes.Verb = "exists"
		case ruleAction30:
			p.InputAttributes.ResourceType = "rel"
			p.InputAttributes.Verb = "exists"
		case ruleAction31:
			p.InputAttributes.ResourceType = "world"
		case ruleAction32:
			p.InputAttributes.ResourceType = "item"
		case ruleAction33:
			p.InputAttributes.ResourceType = "rel"
		case ruleAction34:
			p.InputAttributes.Verb = "create"
		case ruleAction35:
			p.InputAttributes.Verb = "fetch"
		case ruleAction36:
			p.InputAttributes.Verb = "set"
		case ruleAction37:
			p.InputAttributes.Verb = "clear"
		case ruleAction38:
			p.InputAttributes.Verb = "delete"
		case ruleAction39:
			p.InputAttributes.Verb = "list"
		case ruleAction40:
			p.InputAttributes.Verb = "nest"
			p.InputAttributes.ResourceType = "item"
		case ruleAction41:
			p.InputAttributes.Verb = "free"
			p.InputAttributes.ResourceType = "item"
		case ruleAction42:
			p.InputAttributes.Verb = "in?"
			p.InputAttributes.ResourceType = "item"
		case ruleAction43:
			p.InputAttributes.Verb = "from?"
			p.InputAttributes.ResourceType = "rel"
		case ruleAction44:
			p.InputAttributes.Verb = "to?"
			p.InputAttributes.ResourceType = "rel"
		case ruleAction45:
			p.InputAttributes.Verb = "exists"
			p.InputAttributes.ResourceType = "rel"
		case ruleAction46:
			p.InputAttributes.Flags = append(p.InputAttributes.Flags, "strict")
		case ruleAction47:
			p.InputAttributes.Flags = append(p.InputAttributes.Flags, "verbose")
		case ruleAction48:
			p.InputAttributes.Flags = append(p.InputAttributes.Flags, "ids")

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Valid <- <(Command / Response)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						if !_rules[rule_]() {
							goto l3
						}
						{
							position5, tokenIndex5 := position, tokenIndex
							{
								position7 := position
								{
									position8, tokenIndex8 := position, tokenIndex
									if !_rules[ruleItem]() {
										goto l9
									}
									{
										position10, tokenIndex10 := position, tokenIndex
										if !_rules[ruleCreate]() {
											goto l11
										}
										goto l10
									l11:
										position, tokenIndex = position10, tokenIndex10
										if !_rules[ruleSet]() {
											goto l9
										}
									}
								l10:
									if !_rules[ruleIdentifier]() {
										goto l9
									}
									{
										position12, tokenIndex12 := position, tokenIndex
										if !_rules[ruleItemParams]() {
											goto l12
										}
										goto l13
									l12:
										position, tokenIndex = position12, tokenIndex12
									}
								l13:
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleItem]() {
										goto l14
									}
									if !_rules[ruleClear]() {
										goto l14
									}
									if !_rules[ruleIdentifier]() {
										goto l14
									}
									{
										position15 := position
										{
											position18 := position
											{
												position19 := position
												{
													position20, tokenIndex20 := position, tokenIndex
													if !_rules[ruleEXTERNAL]() {
														goto l21
													}
													goto l20
												l21:
													position, tokenIndex = position20, tokenIndex20
													{
														switch buffer[position] {
														case 'e':
															if !_rules[ruleEXPANDED]() {
																goto l14
															}
														case 'm':
															if !_rules[ruleMECHANISM]() {
																goto l14
															}
														case 't':
															if !_rules[ruleTYPE]() {
																goto l14
															}
														default:
															if !_rules[ruleNAME]() {
																goto l14
															}
														}
													}

												}
											l20:
												add(rulePegText, position19)
											}
											if !_rules[rule_]() {
												goto l14
											}
											{
												add(ruleAction24, position)
											}
											add(ruleItemKey, position18)
										}
									l16:
										{
											position17, tokenIndex17 := position, tokenIndex
											{
												position24 := position
												{
													position25 := position
													{
														position26, tokenIndex26 := position, tokenIndex
														if !_rules[ruleEXTERNAL]() {
															goto l27
														}
														goto l26
													l27:
														position, tokenIndex = position26, tokenIndex26
														{
															switch buffer[position] {
															case 'e':
																if !_rules[ruleEXPANDED]() {
																	goto l17
																}
															case 'm':
																if !_rules[ruleMECHANISM]() {
																	goto l17
																}
															case 't':
																if !_rules[ruleTYPE]() {
																	goto l17
																}
															default:
																if !_rules[ruleNAME]() {
																	goto l17
																}
															}
														}

													}
												l26:
													add(rulePegText, position25)
												}
												if !_rules[rule_]() {
													goto l17
												}
												{
													add(ruleAction24, position)
												}
												add(ruleItemKey, position24)
											}
											goto l16
										l17:
											position, tokenIndex = position17, tokenIndex17
										}
										add(ruleItemKeys, position15)
									}
									goto l8
								l14:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleItem]() {
										goto l30
									}
									if !_rules[ruleDelete]() {
										goto l30
									}
									if !_rules[ruleIdentifier]() {
										goto l30
									}
									goto l8
								l30:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleRel]() {
										goto l31
									}
									{
										position32, tokenIndex32 := position, tokenIndex
										if !_rules[ruleCreate]() {
											goto l33
										}
										goto l32
									l33:
										position, tokenIndex = position32, tokenIndex32
										if !_rules[ruleSet]() {
											goto l31
										}
									}
								l32:
									if !_rules[ruleDualIdentifier]() {
										goto l31
									}
									{
										position34, tokenIndex34 := position, tokenIndex
										if !_rules[ruleRelParams]() {
											goto l34
										}
										goto l35
									l34:
										position, tokenIndex = position34, tokenIndex34
									}
								l35:
									goto l8
								l31:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleRel]() {
										goto l36
									}
									if !_rules[ruleClear]() {
										goto l36
									}
									if !_rules[ruleDualIdentifier]() {
										goto l36
									}
									{
										position37 := position
										{
											position40 := position
											{
												position41 := position
												{
													switch buffer[position] {
													case 'e':
														if !_rules[ruleEXPANDED]() {
															goto l36
														}
													case 'a':
														if !_rules[ruleASYNC]() {
															goto l36
														}
													case 'm':
														if !_rules[ruleMECHANISM]() {
															goto l36
														}
													default:
														if !_rules[ruleVERB]() {
															goto l36
														}
													}
												}

												add(rulePegText, position41)
											}
											if !_rules[rule_]() {
												goto l36
											}
											{
												add(ruleAction25, position)
											}
											add(ruleRelKey, position40)
										}
									l38:
										{
											position39, tokenIndex39 := position, tokenIndex
											{
												position44 := position
												{
													position45 := position
													{
														switch buffer[position] {
														case 'e':
															if !_rules[ruleEXPANDED]() {
																goto l39
															}
														case 'a':
															if !_rules[ruleASYNC]() {
																goto l39
															}
														case 'm':
															if !_rules[ruleMECHANISM]() {
																goto l39
															}
														default:
															if !_rules[ruleVERB]() {
																goto l39
															}
														}
													}

													add(rulePegText, position45)
												}
												if !_rules[rule_]() {
													goto l39
												}
												{
													add(ruleAction25, position)
												}
												add(ruleRelKey, position44)
											}
											goto l38
										l39:
											position, tokenIndex = position39, tokenIndex39
										}
										add(ruleRelKeys, position37)
									}
									goto l8
								l36:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleRel]() {
										goto l6
									}
									if !_rules[ruleDelete]() {
										goto l6
									}
									if !_rules[ruleDualIdentifier]() {
										goto l6
									}
								}
							l8:
								add(ruleMutation, position7)
							}
							goto l5
						l6:
							position, tokenIndex = position5, tokenIndex5
							{
								position49 := position
								{
									position50, tokenIndex50 := position, tokenIndex
									{
										position52 := position
										if !_rules[ruleFREE]() {
											goto l51
										}
										{
											add(ruleAction41, position)
										}
										add(ruleFree, position52)
									}
									if !_rules[ruleIdentifierList]() {
										goto l51
									}
									goto l50
								l51:
									position, tokenIndex = position50, tokenIndex50
									{
										position54 := position
										if !_rules[ruleNEST]() {
											goto l48
										}
										{
											add(ruleAction40, position)
										}
										add(ruleNest, position54)
									}
									if !_rules[ruleIdentifierList]() {
										goto l48
									}
									if !_rules[rule_]() {
										goto l48
									}
									if !_rules[ruleIN]() {
										goto l48
									}
									{
										position56 := position
										if !_rules[ruleStringLike]() {
											goto l48
										}
										add(rulePegText, position56)
									}
									{
										add(ruleAction2, position)
									}
								}
							l50:
								add(ruleTreeMutation, position49)
							}
							goto l5
						l48:
							position, tokenIndex = position5, tokenIndex5
							{
								position59 := position
								{
									position60, tokenIndex60 := position, tokenIndex
									{
										position62 := position
										{
											switch buffer[position] {
											case 'w':
												{
													position64 := position
													if !_rules[ruleWORLD]() {
														goto l61
													}
													{
														add(ruleAction31, position)
													}
													add(ruleWorld, position64)
												}
												{
													add(ruleAction3, position)
												}
											case 'r':
												if !_rules[ruleRel]() {
													goto l61
												}
												if !_rules[ruleFetch]() {
													goto l61
												}
												if !_rules[ruleDualIdentifier]() {
													goto l61
												}
											default:
												if !_rules[ruleItem]() {
													goto l61
												}
												if !_rules[ruleFetch]() {
													goto l61
												}
												if !_rules[ruleIdentifier]() {
													goto l61
												}
											}
										}

										add(ruleFetchQuery, position62)
									}
									goto l60
								l61:
									position, tokenIndex = position60, tokenIndex60
									{
										position68 := position
										{
											position69, tokenIndex69 := position, tokenIndex
											{
												position71, tokenIndex71 := position, tokenIndex
												if !_rules[ruleItem]() {
													goto l72
												}
												goto l71
											l72:
												position, tokenIndex = position71, tokenIndex71
												if !_rules[ruleRel]() {
													goto l70
												}
											}
										l71:
											{
												position73 := position
												if !_rules[ruleLIST]() {
													goto l70
												}
												{
													add(ruleAction39, position)
												}
												add(ruleList, position73)
											}
											{
												position75, tokenIndex75 := position, tokenIndex
												{
													position77 := position
													{
														position78 := position
														if !_rules[ruleNumber]() {
															goto l75
														}
														add(rulePegText, position78)
													}
													{
														add(ruleAction11, position)
													}
													add(ruleLimit, position77)
												}
												goto l76
											l75:
												position, tokenIndex = position75, tokenIndex75
											}
										l76:
											goto l69
										l70:
											position, tokenIndex = position69, tokenIndex69
											{
												switch buffer[position] {
												case 'f':
													{
														position81 := position
														if !_rules[ruleFROM_QUERY]() {
															goto l67
														}
														{
															add(ruleAction43, position)
														}
														add(ruleFromQuery, position81)
													}
													if !_rules[ruleIdentifier]() {
														goto l67
													}
												case 't':
													{
														position83 := position
														if !_rules[ruleTO_QUERY]() {
															goto l67
														}
														{
															add(ruleAction44, position)
														}
														add(ruleToQuery, position83)
													}
													if !_rules[ruleIdentifier]() {
														goto l67
													}
												case 'r':
													if !_rules[ruleRel]() {
														goto l67
													}
													if !_rules[ruleIdentifier]() {
														goto l67
													}
													{
														position85, tokenIndex85 := position, tokenIndex
														if !_rules[ruleIdentifier]() {
															goto l85
														}
														goto l67
													l85:
														position, tokenIndex = position85, tokenIndex85
													}
												default:
													if !_rules[ruleItem]() {
														goto l67
													}
													if !_rules[ruleIN]() {
														goto l67
													}
													if !_rules[ruleIdentifier]() {
														goto l67
													}
													{
														add(ruleAction4, position)
													}
												}
											}

										}
									l69:
										add(ruleListQuery, position68)
									}
									goto l60
								l67:
									position, tokenIndex = position60, tokenIndex60
									{
										position87 := position
										{
											position88, tokenIndex88 := position, tokenIndex
											{
												position90 := position
												if !_rules[ruleIN_QUERY]() {
													goto l89
												}
												{
													add(ruleAction42, position)
												}
												add(ruleInQuery, position90)
											}
											if !_rules[ruleDualIdentifier]() {
												goto l89
											}
											goto l88
										l89:
											position, tokenIndex = position88, tokenIndex88
											{
												position93 := position
												{
													position94, tokenIndex94 := position, tokenIndex
													if !_rules[ruleITEM_EXISTS]() {
														goto l95
													}
													goto l94
												l95:
													position, tokenIndex = position94, tokenIndex94
													if !_rules[ruleItem]() {
														goto l92
													}
													if !_rules[ruleExists]() {
														goto l92
													}
												}
											l94:
												{
													add(ruleAction29, position)
												}
												add(ruleItemExists, position93)
											}
											if !_rules[ruleIdentifier]() {
												goto l92
											}
											goto l88
										l92:
											position, tokenIndex = position88, tokenIndex88
											{
												position97 := position
												{
													position98, tokenIndex98 := position, tokenIndex
													if !_rules[ruleREL_EXISTS]() {
														goto l99
													}
													goto l98
												l99:
													position, tokenIndex = position98, tokenIndex98
													if !_rules[ruleRel]() {
														goto l58
													}
													if !_rules[ruleExists]() {
														goto l58
													}
												}
											l98:
												{
													add(ruleAction30, position)
												}
												add(ruleRelExists, position97)
											}
											if !_rules[ruleDualIdentifier]() {
												goto l58
											}
										}
									l88:
										add(ruleExistsQuery, position87)
									}
								}
							l60:
								add(ruleQuery, position59)
							}
							goto l5
						l58:
							position, tokenIndex = position5, tokenIndex5
							{
								position101 := position
								{
									position102, tokenIndex102 := position, tokenIndex
									{
										position104 := position
										{
											position105, tokenIndex105 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l106
											}
											if !_rules[ruleIdentifier]() {
												goto l106
											}
											{
												position107, tokenIndex107 := position, tokenIndex
												if !_rules[ruleItemParams]() {
													goto l107
												}
												goto l106
											l107:
												position, tokenIndex = position107, tokenIndex107
											}
											goto l105
										l106:
											position, tokenIndex = position105, tokenIndex105
											if !_rules[ruleRel]() {
												goto l103
											}
											if !_rules[ruleDualIdentifier]() {
												goto l103
											}
											{
												position108, tokenIndex108 := position, tokenIndex
												if !_rules[ruleRelParams]() {
													goto l108
												}
												goto l103
											l108:
												position, tokenIndex = position108, tokenIndex108
											}
										}
									l105:
										add(ruleCreateOrFetch, position104)
									}
									{
										add(ruleAction5, position)
									}
									goto l102
								l103:
									position, tokenIndex = position102, tokenIndex102
									{
										position110 := position
										{
											position111, tokenIndex111 := position, tokenIndex
											if !_rules[ruleItem]() {
												goto l112
											}
											if !_rules[ruleIdentifier]() {
												goto l112
											}
											if !_rules[ruleItemParams]() {
												goto l112
											}
											goto l111
										l112:
											position, tokenIndex = position111, tokenIndex111
											if !_rules[ruleRel]() {
												goto l3
											}
											if !_rules[ruleDualIdentifier]() {
												goto l3
											}
											if !_rules[ruleRelParams]() {
												goto l3
											}
										}
									l111:
										add(ruleCreateOrSet, position110)
									}
									{
										add(ruleAction6, position)
									}
								}
							l102:
								add(ruleStateBound, position101)
							}
						}
					l5:
					l114:
						{
							position115, tokenIndex115 := position, tokenIndex
							{
								position116 := position
								{
									position117, tokenIndex117 := position, tokenIndex
									{
										position119 := position
										if !_rules[ruleFLAG]() {
											goto l118
										}
										{
											position120 := position
											if buffer[position] != rune('s') {
												goto l118
											}
											position++
											if buffer[position] != rune('t') {
												goto l118
											}
											position++
											if buffer[position] != rune('r') {
												goto l118
											}
											position++
											if buffer[position] != rune('i') {
												goto l118
											}
											position++
											if buffer[position] != rune('c') {
												goto l118
											}
											position++
											if buffer[position] != rune('t') {
												goto l118
											}
											position++
											if !_rules[rule_]() {
												goto l118
											}
											add(ruleSTRICT, position120)
										}
										{
											add(ruleAction46, position)
										}
										add(ruleStrictFlag, position119)
									}
									goto l117
								l118:
									position, tokenIndex = position117, tokenIndex117
									{
										position123 := position
										if !_rules[ruleFLAG]() {
											goto l122
										}
										{
											position124 := position
											if buffer[position] != rune('v') {
												goto l122
											}
											position++
											if buffer[position] != rune('e') {
												goto l122
											}
											position++
											if buffer[position] != rune('r') {
												goto l122
											}
											position++
											if buffer[position] != rune('b') {
												goto l122
											}
											position++
											if buffer[position] != rune('o') {
												goto l122
											}
											position++
											if buffer[position] != rune('s') {
												goto l122
											}
											position++
											if buffer[position] != rune('e') {
												goto l122
											}
											position++
											if !_rules[rule_]() {
												goto l122
											}
											add(ruleVERBOSE, position124)
										}
										{
											add(ruleAction47, position)
										}
										add(ruleVerboseFlag, position123)
									}
									goto l117
								l122:
									position, tokenIndex = position117, tokenIndex117
									{
										position126 := position
										if !_rules[ruleFLAG]() {
											goto l115
										}
										{
											position127 := position
											if buffer[position] != rune('i') {
												goto l115
											}
											position++
											if buffer[position] != rune('d') {
												goto l115
											}
											position++
											if buffer[position] != rune('s') {
												goto l115
											}
											position++
											if !_rules[rule_]() {
												goto l115
											}
											add(ruleIDS, position127)
										}
										{
											add(ruleAction48, position)
										}
										add(ruleIdsFlag, position126)
									}
								}
							l117:
								add(ruleFlag, position116)
							}
							goto l114
						l115:
							position, tokenIndex = position115, tokenIndex115
						}
						if !_rules[ruleEND]() {
							goto l3
						}
						{
							add(ruleAction1, position)
						}
						add(ruleCommand, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position130 := position
						{
							position131, tokenIndex131 := position, tokenIndex
							{
								position133 := position
								{
									position134, tokenIndex134 := position, tokenIndex
									{
										position136 := position
										{
											position137 := position
											if !_rules[ruleDELIMITER]() {
												goto l135
											}
											if !_rules[ruleWORLD]() {
												goto l135
											}
											add(ruleBeginWorld, position137)
										}
										{
											position138 := position
										l139:
											{
												position140, tokenIndex140 := position, tokenIndex
												if !matchDot() {
													goto l140
												}
												goto l139
											l140:
												position, tokenIndex = position140, tokenIndex140
											}
											add(rulePegText, position138)
										}
										{
											position141 := position
											if !_rules[ruleENDWORLD]() {
												goto l135
											}
											if !_rules[ruleDELIMITER]() {
												goto l135
											}
											add(ruleEndWorld, position141)
										}
										{
											add(ruleAction7, position)
										}
										add(ruleWorldObject, position136)
									}
									goto l134
								l135:
									position, tokenIndex = position134, tokenIndex134
									{
										position144 := position
										{
											position145 := position
											if !_rules[ruleItem]() {
												goto l143
											}
											if !_rules[ruleIdentifier]() {
												goto l143
											}
											{
												position146, tokenIndex146 := position, tokenIndex
												if !_rules[ruleItemParams]() {
													goto l146
												}
												goto l147
											l146:
												position, tokenIndex = position146, tokenIndex146
											}
										l147:
											add(rulePegText, position145)
										}
										{
											add(ruleAction8, position)
										}
										add(ruleItemObject, position144)
									}
									goto l134
								l143:
									position, tokenIndex = position134, tokenIndex134
									{
										position150 := position
										{
											position151 := position
											if !_rules[ruleRel]() {
												goto l149
											}
											if !_rules[ruleDualIdentifier]() {
												goto l149
											}
											{
												position152, tokenIndex152 := position, tokenIndex
												if !_rules[ruleRelParams]() {
													goto l152
												}
												goto l153
											l152:
												position, tokenIndex = position152, tokenIndex152
											}
										l153:
											add(rulePegText, position151)
										}
										{
											add(ruleAction9, position)
										}
										add(ruleRelObject, position150)
									}
									goto l134
								l149:
									position, tokenIndex = position134, tokenIndex134
									if !_rules[ruleIdentifierList]() {
										goto l131
									}
								}
							l134:
								add(ruleObject, position133)
							}
							goto l132
						l131:
							position, tokenIndex = position131, tokenIndex131
						}
					l132:
						if !_rules[rule_]() {
							goto l0
						}
						if !_rules[ruleEOL]() {
							goto l0
						}
						{
							position155, tokenIndex155 := position, tokenIndex
							{
								position157 := position
								{
									position158 := position
									{
										position159 := position
										if buffer[position] != rune('e') {
											goto l155
										}
										position++
										if buffer[position] != rune('r') {
											goto l155
										}
										position++
										if buffer[position] != rune('r') {
											goto l155
										}
										position++
										if buffer[position] != rune('o') {
											goto l155
										}
										position++
										if buffer[position] != rune('r') {
											goto l155
										}
										position++
										if !_rules[rule_]() {
											goto l155
										}
										add(ruleERROR, position159)
									}
									{
										position160, tokenIndex160 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l160
										}
										goto l161
									l160:
										position, tokenIndex = position160, tokenIndex160
									}
								l161:
								l162:
									{
										position163, tokenIndex163 := position, tokenIndex
										if !_rules[ruleStringLike]() {
											goto l163
										}
										goto l162
									l163:
										position, tokenIndex = position163, tokenIndex163
									}
									add(rulePegText, position158)
								}
								{
									add(ruleAction10, position)
								}
								add(ruleError, position157)
							}
							goto l156
						l155:
							position, tokenIndex = position155, tokenIndex155
						}
					l156:
						if !_rules[ruleEND]() {
							goto l0
						}
						{
							add(ruleAction0, position)
						}
						add(ruleResponse, position130)
					}
				}
			l2:
				add(ruleValid, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Response <- <(Object? _ EOL Error? END Action0)> */
		nil,
		/* 2 Command <- <(_ (Mutation / TreeMutation / Query / StateBound) Flag* END Action1)> */
		nil,
		/* 3 Mutation <- <((Item (Create / Set) Identifier ItemParams?) / (Item Clear Identifier ItemKeys) / (Item Delete Identifier) / (Rel (Create / Set) DualIdentifier RelParams?) / (Rel Clear DualIdentifier RelKeys) / (Rel Delete DualIdentifier))> */
		nil,
		/* 4 TreeMutation <- <((Free IdentifierList) / (Nest IdentifierList _ IN <StringLike> Action2))> */
		nil,
		/* 5 Query <- <(FetchQuery / ListQuery / ExistsQuery)> */
		nil,
		/* 6 FetchQuery <- <((&('w') (World Action3)) | (&('r') (Rel Fetch DualIdentifier)) | (&('i') (Item Fetch Identifier)))> */
		nil,
		/* 7 ListQuery <- <(((Item / Rel) List Limit?) / ((&('f') (FromQuery Identifier)) | (&('t') (ToQuery Identifier)) | (&('r') (Rel Identifier !Identifier)) | (&('i') (Item IN Identifier Action4))))> */
		nil,
		/* 8 ExistsQuery <- <((InQuery DualIdentifier) / (ItemExists Identifier) / (RelExists DualIdentifier))> */
		nil,
		/* 9 StateBound <- <((CreateOrFetch Action5) / (CreateOrSet Action6))> */
		nil,
		/* 10 CreateOrFetch <- <((Item Identifier !ItemParams) / (Rel DualIdentifier !RelParams))> */
		nil,
		/* 11 CreateOrSet <- <((Item Identifier ItemParams) / (Rel DualIdentifier RelParams))> */
		nil,
		/* 12 Object <- <(WorldObject / ItemObject / RelObject / IdentifierList)> */
		nil,
		/* 13 WorldObject <- <(BeginWorld <.*> EndWorld Action7)> */
		nil,
		/* 14 ItemObject <- <(<(Item Identifier ItemParams?)> Action8)> */
		nil,
		/* 15 RelObject <- <(<(Rel DualIdentifier RelParams?)> Action9)> */
		nil,
		/* 16 Error <- <(<(ERROR Number? StringLike*)> Action10)> */
		nil,
		/* 17 Limit <- <(<Number> Action11)> */
		nil,
		/* 18 Identifier <- <(!Keyword <StringLike> Action12)> */
		func() bool {
			position183, tokenIndex183 := position, tokenIndex
			{
				position184 := position
				{
					position185, tokenIndex185 := position, tokenIndex
					if !_rules[ruleKeyword]() {
						goto l185
					}
					goto l183
				l185:
					position, tokenIndex = position185, tokenIndex185
				}
				{
					position186 := position
					if !_rules[ruleStringLike]() {
						goto l183
					}
					add(rulePegText, position186)
				}
				{
					add(ruleAction12, position)
				}
				add(ruleIdentifier, position184)
			}
			return true
		l183:
			position, tokenIndex = position183, tokenIndex183
			return false
		},
		/* 19 SecondIdentifier <- <(!Keyword &Identifier <StringLike> Action13)> */
		nil,
		/* 20 DualIdentifier <- <(Identifier SecondIdentifier)> */
		func() bool {
			position189, tokenIndex189 := position, tokenIndex
			{
				position190 := position
				if !_rules[ruleIdentifier]() {
					goto l189
				}
				{
					position191 := position
					{
						position192, tokenIndex192 := position, tokenIndex
						if !_rules[ruleKeyword]() {
							goto l192
						}
						goto l189
					l192:
						position, tokenIndex = position192, tokenIndex192
					}
					{
						position193, tokenIndex193 := position, tokenIndex
						if !_rules[ruleIdentifier]() {
							goto l189
						}
						position, tokenIndex = position193, tokenIndex193
					}
					{
						position194 := position
						if !_rules[ruleStringLike]() {
							goto l189
						}
						add(rulePegText, position194)
					}
					{
						add(ruleAction13, position)
					}
					add(ruleSecondIdentifier, position191)
				}
				add(ruleDualIdentifier, position190)
			}
			return true
		l189:
			position, tokenIndex = position189, tokenIndex189
			return false
		},
		/* 21 IdentifierList <- <(<(Identifier Identifier*)> Action14)> */
		func() bool {
			position196, tokenIndex196 := position, tokenIndex
			{
				position197 := position
				{
					position198 := position
					if !_rules[ruleIdentifier]() {
						goto l196
					}
				l199:
					{
						position200, tokenIndex200 := position, tokenIndex
						if !_rules[ruleIdentifier]() {
							goto l200
						}
						goto l199
					l200:
						position, tokenIndex = position200, tokenIndex200
					}
					add(rulePegText, position198)
				}
				{
					add(ruleAction14, position)
				}
				add(ruleIdentifierList, position197)
			}
			return true
		l196:
			position, tokenIndex = position196, tokenIndex196
			return false
		},
		/* 22 ItemParams <- <ItemParam+> */
		func() bool {
			position202, tokenIndex202 := position, tokenIndex
			{
				position203 := position
				{
					position206 := position
					{
						position207, tokenIndex207 := position, tokenIndex
						if !_rules[ruleEXTERNAL]() {
							goto l208
						}
						if !_rules[ruleEQUALS]() {
							goto l208
						}
						{
							position209 := position
							if !_rules[ruleBoolean]() {
								goto l208
							}
							add(rulePegText, position209)
						}
						{
							add(ruleAction15, position)
						}
						goto l207
					l208:
						position, tokenIndex = position207, tokenIndex207
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l202
								}
								if !_rules[ruleEQUALS]() {
									goto l202
								}
								{
									position212 := position
									if !_rules[ruleStringLike]() {
										goto l202
									}
									add(rulePegText, position212)
								}
								{
									add(ruleAction19, position)
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l202
								}
								if !_rules[ruleEQUALS]() {
									goto l202
								}
								{
									position214 := position
									if !_rules[ruleStringLike]() {
										goto l202
									}
									add(rulePegText, position214)
								}
								{
									add(ruleAction18, position)
								}
							case 'n':
								if !_rules[ruleNAME]() {
									goto l202
								}
								if !_rules[ruleEQUALS]() {
									goto l202
								}
								{
									position216 := position
									if !_rules[ruleStringLike]() {
										goto l202
									}
									add(rulePegText, position216)
								}
								{
									add(ruleAction17, position)
								}
							default:
								if !_rules[ruleTYPE]() {
									goto l202
								}
								if !_rules[ruleEQUALS]() {
									goto l202
								}
								{
									position218 := position
									{
										position219 := position
										{
											position220, tokenIndex220 := position, tokenIndex
											{
												position222 := position
												if buffer[position] != rune('d') {
													goto l221
												}
												position++
												if buffer[position] != rune('a') {
													goto l221
												}
												position++
												if buffer[position] != rune('t') {
													goto l221
												}
												position++
												if buffer[position] != rune('a') {
													goto l221
												}
												position++
												if buffer[position] != rune('b') {
													goto l221
												}
												position++
												if buffer[position] != rune('a') {
													goto l221
												}
												position++
												if buffer[position] != rune('s') {
													goto l221
												}
												position++
												if buffer[position] != rune('e') {
													goto l221
												}
												position++
												if !_rules[rule_]() {
													goto l221
												}
												add(ruleDATABASE, position222)
											}
											goto l220
										l221:
											position, tokenIndex = position220, tokenIndex220
											{
												position224 := position
												if buffer[position] != rune('b') {
													goto l223
												}
												position++
												if buffer[position] != rune('l') {
													goto l223
												}
												position++
												if buffer[position] != rune('o') {
													goto l223
												}
												position++
												if buffer[position] != rune('b') {
													goto l223
												}
												position++
												if buffer[position] != rune('s') {
													goto l223
												}
												position++
												if buffer[position] != rune('t') {
													goto l223
												}
												position++
												if buffer[position] != rune('o') {
													goto l223
												}
												position++
												if buffer[position] != rune('r') {
													goto l223
												}
												position++
												if buffer[position] != rune('e') {
													goto l223
												}
												position++
												if !_rules[rule_]() {
													goto l223
												}
												add(ruleBLOBSTORE, position224)
											}
											goto l220
										l223:
											position, tokenIndex = position220, tokenIndex220
											{
												switch buffer[position] {
												case 'c':
													{
														position226 := position
														if buffer[position] != rune('c') {
															goto l202
														}
														position++
														if buffer[position] != rune('o') {
															goto l202
														}
														position++
														if buffer[position] != rune('d') {
															goto l202
														}
														position++
														if buffer[position] != rune('e') {
															goto l202
														}
														position++
														if !_rules[rule_]() {
															goto l202
														}
														add(ruleCODE, position226)
													}
												case 'd':
													{
														position227 := position
														if buffer[position] != rune('d') {
															goto l202
														}
														position++
														if buffer[position] != rune('e') {
															goto l202
														}
														position++
														if buffer[position] != rune('v') {
															goto l202
														}
														position++
														if buffer[position] != rune('i') {
															goto l202
														}
														position++
														if buffer[position] != rune('c') {
															goto l202
														}
														position++
														if buffer[position] != rune('e') {
															goto l202
														}
														position++
														if !_rules[rule_]() {
															goto l202
														}
														add(ruleDEVICE, position227)
													}
												case 's':
													{
														position228 := position
														if buffer[position] != rune('s') {
															goto l202
														}
														position++
														if buffer[position] != rune('e') {
															goto l202
														}
														position++
														if buffer[position] != rune('r') {
															goto l202
														}
														position++
														if buffer[position] != rune('v') {
															goto l202
														}
														position++
														if buffer[position] != rune('e') {
															goto l202
														}
														position++
														if buffer[position] != rune('r') {
															goto l202
														}
														position++
														if !_rules[rule_]() {
															goto l202
														}
														add(ruleSERVER, position228)
													}
												case 'm':
													{
														position229 := position
														if buffer[position] != rune('m') {
															goto l202
														}
														position++
														if buffer[position] != rune('o') {
															goto l202
														}
														position++
														if buffer[position] != rune('b') {
															goto l202
														}
														position++
														if buffer[position] != rune('i') {
															goto l202
														}
														position++
														if buffer[position] != rune('l') {
															goto l202
														}
														position++
														if buffer[position] != rune('e') {
															goto l202
														}
														position++
														if !_rules[rule_]() {
															goto l202
														}
														add(ruleMOBILE, position229)
													}
												case 'b':
													{
														position230 := position
														if buffer[position] != rune('b') {
															goto l202
														}
														position++
														if buffer[position] != rune('r') {
															goto l202
														}
														position++
														if buffer[position] != rune('o') {
															goto l202
														}
														position++
														if buffer[position] != rune('w') {
															goto l202
														}
														position++
														if buffer[position] != rune('s') {
															goto l202
														}
														position++
														if buffer[position] != rune('e') {
															goto l202
														}
														position++
														if buffer[position] != rune('r') {
															goto l202
														}
														position++
														if !_rules[rule_]() {
															goto l202
														}
														add(ruleBROWSER, position230)
													}
												case 'q':
													{
														position231 := position
														if buffer[position] != rune('q') {
															goto l202
														}
														position++
														if buffer[position] != rune('u') {
															goto l202
														}
														position++
														if buffer[position] != rune('e') {
															goto l202
														}
														position++
														if buffer[position] != rune('u') {
															goto l202
														}
														position++
														if buffer[position] != rune('e') {
															goto l202
														}
														position++
														if !_rules[rule_]() {
															goto l202
														}
														add(ruleQUEUE, position231)
													}
												default:
													{
														position232 := position
														if buffer[position] != rune('p') {
															goto l202
														}
														position++
														if buffer[position] != rune('e') {
															goto l202
														}
														position++
														if buffer[position] != rune('r') {
															goto l202
														}
														position++
														if buffer[position] != rune('s') {
															goto l202
														}
														position++
														if buffer[position] != rune('o') {
															goto l202
														}
														position++
														if buffer[position] != rune('n') {
															goto l202
														}
														position++
														if !_rules[rule_]() {
															goto l202
														}
														add(rulePERSON, position232)
													}
												}
											}

										}
									l220:
										add(ruleItemType, position219)
									}
									add(rulePegText, position218)
								}
								{
									add(ruleAction16, position)
								}
							}
						}

					}
				l207:
					add(ruleItemParam, position206)
				}
			l204:
				{
					position205, tokenIndex205 := position, tokenIndex
					{
						position234 := position
						{
							position235, tokenIndex235 := position, tokenIndex
							if !_rules[ruleEXTERNAL]() {
								goto l236
							}
							if !_rules[ruleEQUALS]() {
								goto l236
							}
							{
								position237 := position
								if !_rules[ruleBoolean]() {
									goto l236
								}
								add(rulePegText, position237)
							}
							{
								add(ruleAction15, position)
							}
							goto l235
						l236:
							position, tokenIndex = position235, tokenIndex235
							{
								switch buffer[position] {
								case 'e':
									if !_rules[ruleEXPANDED]() {
										goto l205
									}
									if !_rules[ruleEQUALS]() {
										goto l205
									}
									{
										position240 := position
										if !_rules[ruleStringLike]() {
											goto l205
										}
										add(rulePegText, position240)
									}
									{
										add(ruleAction19, position)
									}
								case 'm':
									if !_rules[ruleMECHANISM]() {
										goto l205
									}
									if !_rules[ruleEQUALS]() {
										goto l205
									}
									{
										position242 := position
										if !_rules[ruleStringLike]() {
											goto l205
										}
										add(rulePegText, position242)
									}
									{
										add(ruleAction18, position)
									}
								case 'n':
									if !_rules[ruleNAME]() {
										goto l205
									}
									if !_rules[ruleEQUALS]() {
										goto l205
									}
									{
										position244 := position
										if !_rules[ruleStringLike]() {
											goto l205
										}
										add(rulePegText, position244)
									}
									{
										add(ruleAction17, position)
									}
								default:
									if !_rules[ruleTYPE]() {
										goto l205
									}
									if !_rules[ruleEQUALS]() {
										goto l205
									}
									{
										position246 := position
										{
											position247 := position
											{
												position248, tokenIndex248 := position, tokenIndex
												{
													position250 := position
													if buffer[position] != rune('d') {
														goto l249
													}
													position++
													if buffer[position] != rune('a') {
														goto l249
													}
													position++
													if buffer[position] != rune('t') {
														goto l249
													}
													position++
													if buffer[position] != rune('a') {
														goto l249
													}
													position++
													if buffer[position] != rune('b') {
														goto l249
													}
													position++
													if buffer[position] != rune('a') {
														goto l249
													}
													position++
													if buffer[position] != rune('s') {
														goto l249
													}
													position++
													if buffer[position] != rune('e') {
														goto l249
													}
													position++
													if !_rules[rule_]() {
														goto l249
													}
													add(ruleDATABASE, position250)
												}
												goto l248
											l249:
												position, tokenIndex = position248, tokenIndex248
												{
													position252 := position
													if buffer[position] != rune('b') {
														goto l251
													}
													position++
													if buffer[position] != rune('l') {
														goto l251
													}
													position++
													if buffer[position] != rune('o') {
														goto l251
													}
													position++
													if buffer[position] != rune('b') {
														goto l251
													}
													position++
													if buffer[position] != rune('s') {
														goto l251
													}
													position++
													if buffer[position] != rune('t') {
														goto l251
													}
													position++
													if buffer[position] != rune('o') {
														goto l251
													}
													position++
													if buffer[position] != rune('r') {
														goto l251
													}
													position++
													if buffer[position] != rune('e') {
														goto l251
													}
													position++
													if !_rules[rule_]() {
														goto l251
													}
													add(ruleBLOBSTORE, position252)
												}
												goto l248
											l251:
												position, tokenIndex = position248, tokenIndex248
												{
													switch buffer[position] {
													case 'c':
														{
															position254 := position
															if buffer[position] != rune('c') {
																goto l205
															}
															position++
															if buffer[position] != rune('o') {
																goto l205
															}
															position++
															if buffer[position] != rune('d') {
																goto l205
															}
															position++
															if buffer[position] != rune('e') {
																goto l205
															}
															position++
															if !_rules[rule_]() {
																goto l205
															}
															add(ruleCODE, position254)
														}
													case 'd':
														{
															position255 := position
															if buffer[position] != rune('d') {
																goto l205
															}
															position++
															if buffer[position] != rune('e') {
																goto l205
															}
															position++
															if buffer[position] != rune('v') {
																goto l205
															}
															position++
															if buffer[position] != rune('i') {
																goto l205
															}
															position++
															if buffer[position] != rune('c') {
																goto l205
															}
															position++
															if buffer[position] != rune('e') {
																goto l205
															}
															position++
															if !_rules[rule_]() {
																goto l205
															}
															add(ruleDEVICE, position255)
														}
													case 's':
														{
															position256 := position
															if buffer[position] != rune('s') {
																goto l205
															}
															position++
															if buffer[position] != rune('e') {
																goto l205
															}
															position++
															if buffer[position] != rune('r') {
																goto l205
															}
															position++
															if buffer[position] != rune('v') {
																goto l205
															}
															position++
															if buffer[position] != rune('e') {
																goto l205
															}
															position++
															if buffer[position] != rune('r') {
																goto l205
															}
															position++
															if !_rules[rule_]() {
																goto l205
															}
															add(ruleSERVER, position256)
														}
													case 'm':
														{
															position257 := position
															if buffer[position] != rune('m') {
																goto l205
															}
															position++
															if buffer[position] != rune('o') {
																goto l205
															}
															position++
															if buffer[position] != rune('b') {
																goto l205
															}
															position++
															if buffer[position] != rune('i') {
																goto l205
															}
															position++
															if buffer[position] != rune('l') {
																goto l205
															}
															position++
															if buffer[position] != rune('e') {
																goto l205
															}
															position++
															if !_rules[rule_]() {
																goto l205
															}
															add(ruleMOBILE, position257)
														}
													case 'b':
														{
															position258 := position
															if buffer[position] != rune('b') {
																goto l205
															}
															position++
															if buffer[position] != rune('r') {
																goto l205
															}
															position++
															if buffer[position] != rune('o') {
																goto l205
															}
															position++
															if buffer[position] != rune('w') {
																goto l205
															}
															position++
															if buffer[position] != rune('s') {
																goto l205
															}
															position++
															if buffer[position] != rune('e') {
																goto l205
															}
															position++
															if buffer[position] != rune('r') {
																goto l205
															}
															position++
															if !_rules[rule_]() {
																goto l205
															}
															add(ruleBROWSER, position258)
														}
													case 'q':
														{
															position259 := position
															if buffer[position] != rune('q') {
																goto l205
															}
															position++
															if buffer[position] != rune('u') {
																goto l205
															}
															position++
															if buffer[position] != rune('e') {
																goto l205
															}
															position++
															if buffer[position] != rune('u') {
																goto l205
															}
															position++
															if buffer[position] != rune('e') {
																goto l205
															}
															position++
															if !_rules[rule_]() {
																goto l205
															}
															add(ruleQUEUE, position259)
														}
													default:
														{
															position260 := position
															if buffer[position] != rune('p') {
																goto l205
															}
															position++
															if buffer[position] != rune('e') {
																goto l205
															}
															position++
															if buffer[position] != rune('r') {
																goto l205
															}
															position++
															if buffer[position] != rune('s') {
																goto l205
															}
															position++
															if buffer[position] != rune('o') {
																goto l205
															}
															position++
															if buffer[position] != rune('n') {
																goto l205
															}
															position++
															if !_rules[rule_]() {
																goto l205
															}
															add(rulePERSON, position260)
														}
													}
												}

											}
										l248:
											add(ruleItemType, position247)
										}
										add(rulePegText, position246)
									}
									{
										add(ruleAction16, position)
									}
								}
							}

						}
					l235:
						add(ruleItemParam, position234)
					}
					goto l204
				l205:
					position, tokenIndex = position205, tokenIndex205
				}
				add(ruleItemParams, position203)
			}
			return true
		l202:
			position, tokenIndex = position202, tokenIndex202
			return false
		},
		/* 23 RelParams <- <RelParam+> */
		func() bool {
			position262, tokenIndex262 := position, tokenIndex
			{
				position263 := position
				{
					position266 := position
					{
						switch buffer[position] {
						case 'e':
							if !_rules[ruleEXPANDED]() {
								goto l262
							}
							if !_rules[ruleEQUALS]() {
								goto l262
							}
							{
								position268 := position
								if !_rules[ruleStringLike]() {
									goto l262
								}
								add(rulePegText, position268)
							}
							{
								add(ruleAction23, position)
							}
						case 'a':
							if !_rules[ruleASYNC]() {
								goto l262
							}
							if !_rules[ruleEQUALS]() {
								goto l262
							}
							{
								position270 := position
								if !_rules[ruleBoolean]() {
									goto l262
								}
								add(rulePegText, position270)
							}
							{
								add(ruleAction22, position)
							}
						case 'm':
							if !_rules[ruleMECHANISM]() {
								goto l262
							}
							if !_rules[ruleEQUALS]() {
								goto l262
							}
							{
								position272 := position
								if !_rules[ruleStringLike]() {
									goto l262
								}
								add(rulePegText, position272)
							}
							{
								add(ruleAction21, position)
							}
						default:
							if !_rules[ruleVERB]() {
								goto l262
							}
							if !_rules[ruleEQUALS]() {
								goto l262
							}
							{
								position274 := position
								if !_rules[ruleStringLike]() {
									goto l262
								}
								add(rulePegText, position274)
							}
							{
								add(ruleAction20, position)
							}
						}
					}

					add(ruleRelParam, position266)
				}
			l264:
				{
					position265, tokenIndex265 := position, tokenIndex
					{
						position276 := position
						{
							switch buffer[position] {
							case 'e':
								if !_rules[ruleEXPANDED]() {
									goto l265
								}
								if !_rules[ruleEQUALS]() {
									goto l265
								}
								{
									position278 := position
									if !_rules[ruleStringLike]() {
										goto l265
									}
									add(rulePegText, position278)
								}
								{
									add(ruleAction23, position)
								}
							case 'a':
								if !_rules[ruleASYNC]() {
									goto l265
								}
								if !_rules[ruleEQUALS]() {
									goto l265
								}
								{
									position280 := position
									if !_rules[ruleBoolean]() {
										goto l265
									}
									add(rulePegText, position280)
								}
								{
									add(ruleAction22, position)
								}
							case 'm':
								if !_rules[ruleMECHANISM]() {
									goto l265
								}
								if !_rules[ruleEQUALS]() {
									goto l265
								}
								{
									position282 := position
									if !_rules[ruleStringLike]() {
										goto l265
									}
									add(rulePegText, position282)
								}
								{
									add(ruleAction21, position)
								}
							default:
								if !_rules[ruleVERB]() {
									goto l265
								}
								if !_rules[ruleEQUALS]() {
									goto l265
								}
								{
									position284 := position
									if !_rules[ruleStringLike]() {
										goto l265
									}
									add(rulePegText, position284)
								}
								{
									add(ruleAction20, position)
								}
							}
						}

						add(ruleRelParam, position276)
					}
					goto l264
				l265:
					position, tokenIndex = position265, tokenIndex265
				}
				add(ruleRelParams, position263)
			}
			return true
		l262:
			position, tokenIndex = position262, tokenIndex262
			return false
		},
		/* 24 ItemParam <- <((EXTERNAL EQUALS <Boolean> Action15) / ((&('e') (EXPANDED EQUALS <StringLike> Action19)) | (&('m') (MECHANISM EQUALS <StringLike> Action18)) | (&('n') (NAME EQUALS <StringLike> Action17)) | (&('t') (TYPE EQUALS <ItemType> Action16))))> */
		nil,
		/* 25 RelParam <- <((&('e') (EXPANDED EQUALS <StringLike> Action23)) | (&('a') (ASYNC EQUALS <Boolean> Action22)) | (&('m') (MECHANISM EQUALS <StringLike> Action21)) | (&('v') (VERB EQUALS <StringLike> Action20)))> */
		nil,
		/* 26 ItemKeys <- <ItemKey+> */
		nil,
		/* 27 RelKeys <- <RelKey+> */
		nil,
		/* 28 ItemKey <- <(<(EXTERNAL / ((&('e') EXPANDED) | (&('m') MECHANISM) | (&('t') TYPE) | (&('n') NAME)))> _ Action24)> */
		nil,
		/* 29 RelKey <- <(<((&('e') EXPANDED) | (&('a') ASYNC) | (&('m') MECHANISM) | (&('v') VERB))> _ Action25)> */
		nil,
		/* 30 StringLike <- <(<(Text / QuotedText)> _ Action26)> */
		func() bool {
			position292, tokenIndex292 := position, tokenIndex
			{
				position293 := position
				{
					position294 := position
					{
						position295, tokenIndex295 := position, tokenIndex
						{
							position297 := position
							{
								switch buffer[position] {
								case '_':
									if buffer[position] != rune('_') {
										goto l296
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l296
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l296
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l296
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l296
									}
									position++
								}
							}

						l298:
							{
								position299, tokenIndex299 := position, tokenIndex
								{
									switch buffer[position] {
									case '_':
										if buffer[position] != rune('_') {
											goto l299
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l299
										}
										position++
									case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l299
										}
										position++
									case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
										if c := buffer[position]; c < rune('A') || c > rune('Z') {
											goto l299
										}
										position++
									default:
										if c := buffer[position]; c < rune('a') || c > rune('z') {
											goto l299
										}
										position++
									}
								}

								goto l298
							l299:
								position, tokenIndex = position299, tokenIndex299
							}
							add(ruleText, position297)
						}
						goto l295
					l296:
						position, tokenIndex = position295, tokenIndex295
						{
							position302 := position
							if !_rules[ruleQUOTE]() {
								goto l292
							}
						l303:
							{
								position304, tokenIndex304 := position, tokenIndex
								{
									switch buffer[position] {
									case ' ':
										if buffer[position] != rune(' ') {
											goto l304
										}
										position++
									case ':':
										if buffer[position] != rune(':') {
											goto l304
										}
										position++
									case ';':
										if buffer[position] != rune(';') {
											goto l304
										}
										position++
									case '~':
										if buffer[position] != rune('~') {
											goto l304
										}
										position++
									case '=':
										if buffer[position] != rune('=') {
											goto l304
										}
										position++
									case '+':
										if buffer[position] != rune('+') {
											goto l304
										}
										position++
									case ']':
										if buffer[position] != rune(']') {
											goto l304
										}
										position++
									case '[':
										if buffer[position] != rune('[') {
											goto l304
										}
										position++
									case ')':
										if buffer[position] != rune(')') {
											goto l304
										}
										position++
									case '(':
										if buffer[position] != rune('(') {
											goto l304
										}
										position++
									case '*':
										if buffer[position] != rune('*') {
											goto l304
										}
										position++
									case '&':
										if buffer[position] != rune('&') {
											goto l304
										}
										position++
									case '^':
										if buffer[position] != rune('^') {
											goto l304
										}
										position++
									case '%':
										if buffer[position] != rune('%') {
											goto l304
										}
										position++
									case '$':
										if buffer[position] != rune('$') {
											goto l304
										}
										position++
									case '#':
										if buffer[position] != rune('#') {
											goto l304
										}
										position++
									case '@':
										if buffer[position] != rune('@') {
											goto l304
										}
										position++
									case '!':
										if buffer[position] != rune('!') {
											goto l304
										}
										position++
									case ',':
										if buffer[position] != rune(',') {
											goto l304
										}
										position++
									case '.':
										if buffer[position] != rune('.') {
											goto l304
										}
										position++
									case '_':
										if buffer[position] != rune('_') {
											goto l304
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l304
										}
										position++
									case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l304
										}
										position++
									case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
										if c := buffer[position]; c < rune('A') || c > rune('Z') {
											goto l304
										}
										position++
									default:
										if c := buffer[position]; c < rune('a') || c > rune('z') {
											goto l304
										}
										position++
									}
								}

								goto l303
							l304:
								position, tokenIndex = position304, tokenIndex304
							}
							if !_rules[ruleQUOTE]() {
								goto l292
							}
							add(ruleQuotedText, position302)
						}
					}
				l295:
					add(rulePegText, position294)
				}
				if !_rules[rule_]() {
					goto l292
				}
				{
					add(ruleAction26, position)
				}
				add(ruleStringLike, position293)
			}
			return true
		l292:
			position, tokenIndex = position292, tokenIndex292
			return false
		},
		/* 31 Number <- <(<[0-9]+> _ Action27)> */
		func() bool {
			position307, tokenIndex307 := position, tokenIndex
			{
				position308 := position
				{
					position309 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l307
					}
					position++
				l310:
					{
						position311, tokenIndex311 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l311
						}
						position++
						goto l310
					l311:
						position, tokenIndex = position311, tokenIndex311
					}
					add(rulePegText, position309)
				}
				if !_rules[rule_]() {
					goto l307
				}
				{
					add(ruleAction27, position)
				}
				add(ruleNumber, position308)
			}
			return true
		l307:
			position, tokenIndex = position307, tokenIndex307
			return false
		},
		/* 32 Boolean <- <(<(TRUE / FALSE)> Action28)> */
		func() bool {
			position313, tokenIndex313 := position, tokenIndex
			{
				position314 := position
				{
					position315 := position
					{
						position316, tokenIndex316 := position, tokenIndex
						{
							position318 := position
							if buffer[position] != rune('t') {
								goto l317
							}
							position++
							if buffer[position] != rune('r') {
								goto l317
							}
							position++
							if buffer[position] != rune('u') {
								goto l317
							}
							position++
							if buffer[position] != rune('e') {
								goto l317
							}
							position++
							if !_rules[rule_]() {
								goto l317
							}
							add(ruleTRUE, position318)
						}
						goto l316
					l317:
						position, tokenIndex = position316, tokenIndex316
						{
							position319 := position
							if buffer[position] != rune('f') {
								goto l313
							}
							position++
							if buffer[position] != rune('a') {
								goto l313
							}
							position++
							if buffer[position] != rune('l') {
								goto l313
							}
							position++
							if buffer[position] != rune('s') {
								goto l313
							}
							position++
							if buffer[position] != rune('e') {
								goto l313
							}
							position++
							if !_rules[rule_]() {
								goto l313
							}
							add(ruleFALSE, position319)
						}
					}
				l316:
					add(rulePegText, position315)
				}
				{
					add(ruleAction28, position)
				}
				add(ruleBoolean, position314)
			}
			return true
		l313:
			position, tokenIndex = position313, tokenIndex313
			return false
		},
		/* 33 Text <- <((&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))+> */
		nil,
		/* 34 QuotedText <- <(QUOTE ((&(' ') ' ') | (&(':') ':') | (&(';') ';') | (&('~') '~') | (&('=') '=') | (&('+') '+') | (&(']') ']') | (&('[') '[') | (&(')') ')') | (&('(') '(') | (&('*') '*') | (&('&') '&') | (&('^') '^') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('@') '@') | (&('!') '!') | (&(',') ',') | (&('.') '.') | (&('_') '_') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))* QUOTE)> */
		nil,
		/* 35 ItemExists <- <((ITEM_EXISTS / (Item Exists)) Action29)> */
		nil,
		/* 36 RelExists <- <((REL_EXISTS / (Rel Exists)) Action30)> */
		nil,
		/* 37 World <- <(WORLD Action31)> */
		nil,
		/* 38 Item <- <(ITEM Action32)> */
		func() bool {
			position326, tokenIndex326 := position, tokenIndex
			{
				position327 := position
				if !_rules[ruleITEM]() {
					goto l326
				}
				{
					add(ruleAction32, position)
				}
				add(ruleItem, position327)
			}
			return true
		l326:
			position, tokenIndex = position326, tokenIndex326
			return false
		},
		/* 39 Rel <- <(REL Action33)> */
		func() bool {
			position329, tokenIndex329 := position, tokenIndex
			{
				position330 := position
				if !_rules[ruleREL]() {
					goto l329
				}
				{
					add(ruleAction33, position)
				}
				add(ruleRel, position330)
			}
			return true
		l329:
			position, tokenIndex = position329, tokenIndex329
			return false
		},
		/* 40 Create <- <(CREATE Action34)> */
		func() bool {
			position332, tokenIndex332 := position, tokenIndex
			{
				position333 := position
				if !_rules[ruleCREATE]() {
					goto l332
				}
				{
					add(ruleAction34, position)
				}
				add(ruleCreate, position333)
			}
			return true
		l332:
			position, tokenIndex = position332, tokenIndex332
			return false
		},
		/* 41 Fetch <- <(FETCH Action35)> */
		func() bool {
			position335, tokenIndex335 := position, tokenIndex
			{
				position336 := position
				if !_rules[ruleFETCH]() {
					goto l335
				}
				{
					add(ruleAction35, position)
				}
				add(ruleFetch, position336)
			}
			return true
		l335:
			position, tokenIndex = position335, tokenIndex335
			return false
		},
		/* 42 Set <- <(SET Action36)> */
		func() bool {
			position338, tokenIndex338 := position, tokenIndex
			{
				position339 := position
				if !_rules[ruleSET]() {
					goto l338
				}
				{
					add(ruleAction36, position)
				}
				add(ruleSet, position339)
			}
			return true
		l338:
			position, tokenIndex = position338, tokenIndex338
			return false
		},
		/* 43 Clear <- <(CLEAR Action37)> */
		func() bool {
			position341, tokenIndex341 := position, tokenIndex
			{
				position342 := position
				if !_rules[ruleCLEAR]() {
					goto l341
				}
				{
					add(ruleAction37, position)
				}
				add(ruleClear, position342)
			}
			return true
		l341:
			position, tokenIndex = position341, tokenIndex341
			return false
		},
		/* 44 Delete <- <(DELETE Action38)> */
		func() bool {
			position344, tokenIndex344 := position, tokenIndex
			{
				position345 := position
				if !_rules[ruleDELETE]() {
					goto l344
				}
				{
					add(ruleAction38, position)
				}
				add(ruleDelete, position345)
			}
			return true
		l344:
			position, tokenIndex = position344, tokenIndex344
			return false
		},
		/* 45 List <- <(LIST Action39)> */
		nil,
		/* 46 Nest <- <(NEST Action40)> */
		nil,
		/* 47 Free <- <(FREE Action41)> */
		nil,
		/* 48 InQuery <- <(IN_QUERY Action42)> */
		nil,
		/* 49 FromQuery <- <(FROM_QUERY Action43)> */
		nil,
		/* 50 ToQuery <- <(TO_QUERY Action44)> */
		nil,
		/* 51 Exists <- <(EXISTS Action45)> */
		func() bool {
			position353, tokenIndex353 := position, tokenIndex
			{
				position354 := position
				if !_rules[ruleEXISTS]() {
					goto l353
				}
				{
					add(ruleAction45, position)
				}
				add(ruleExists, position354)
			}
			return true
		l353:
			position, tokenIndex = position353, tokenIndex353
			return false
		},
		/* 52 Flag <- <(StrictFlag / VerboseFlag / IdsFlag)> */
		nil,
		/* 53 StrictFlag <- <(FLAG STRICT Action46)> */
		nil,
		/* 54 VerboseFlag <- <(FLAG VERBOSE Action47)> */
		nil,
		/* 55 IdsFlag <- <(FLAG IDS Action48)> */
		nil,
		/* 56 BeginWorld <- <(DELIMITER WORLD)> */
		nil,
		/* 57 EndWorld <- <(ENDWORLD DELIMITER)> */
		nil,
		/* 58 ItemType <- <(DATABASE / BLOBSTORE / ((&('c') CODE) | (&('d') DEVICE) | (&('s') SERVER) | (&('m') MOBILE) | (&('b') BROWSER) | (&('q') QUEUE) | (&('p') PERSON)))> */
		nil,
		/* 59 Keyword <- <(ENDWORLD / ITEM / ITEM_EXISTS / REL / FROM_QUERY / IN / CREATE / FETCH / ((&('$') DELIMITER) | (&('-') FLAG) | (&('n') NEST) | (&('f') FREE) | (&('e') EXISTS) | (&('l') LIST) | (&('c') CLEAR) | (&('s') SET) | (&('d') DELETE) | (&('i') IN_QUERY) | (&('t') TO_QUERY) | (&('r') REL_EXISTS) | (&('w') WORLD)))> */
		func() bool {
			position363, tokenIndex363 := position, tokenIndex
			{
				position364 := position
				{
					position365, tokenIndex365 := position, tokenIndex
					if !_rules[ruleENDWORLD]() {
						goto l366
					}
					goto l365
				l366:
					position, tokenIndex = position365, tokenIndex365
					if !_rules[ruleITEM]() {
						goto l367
					}
					goto l365
				l367:
					position, tokenIndex = position365, tokenIndex365
					if !_rules[ruleITEM_EXISTS]() {
						goto l368
					}
					goto l365
				l368:
					position, tokenIndex = position365, tokenIndex365
					if !_rules[ruleREL]() {
						goto l369
					}
					goto l365
				l369:
					position, tokenIndex = position365, tokenIndex365
					if !_rules[ruleFROM_QUERY]() {
						goto l370
					}
					goto l365
				l370:
					position, tokenIndex = position365, tokenIndex365
					if !_rules[ruleIN]() {
						goto l371
					}
					goto l365
				l371:
					position, tokenIndex = position365, tokenIndex365
					if !_rules[ruleCREATE]() {
						goto l372
					}
					goto l365
				l372:
					position, tokenIndex = position365, tokenIndex365
					if !_rules[ruleFETCH]() {
						goto l373
					}
					goto l365
				l373:
					position, tokenIndex = position365, tokenIndex365
					{
						switch buffer[position] {
						case '$':
							if !_rules[ruleDELIMITER]() {
								goto l363
							}
						case '-':
							if !_rules[ruleFLAG]() {
								goto l363
							}
						case 'n':
							if !_rules[ruleNEST]() {
								goto l363
							}
						case 'f':
							if !_rules[ruleFREE]() {
								goto l363
							}
						case 'e':
							if !_rules[ruleEXISTS]() {
								goto l363
							}
						case 'l':
							if !_rules[ruleLIST]() {
								goto l363
							}
						case 'c':
							if !_rules[ruleCLEAR]() {
								goto l363
							}
						case 's':
							if !_rules[ruleSET]() {
								goto l363
							}
						case 'd':
							if !_rules[ruleDELETE]() {
								goto l363
							}
						case 'i':
							if !_rules[ruleIN_QUERY]() {
								goto l363
							}
						case 't':
							if !_rules[ruleTO_QUERY]() {
								goto l363
							}
						case 'r':
							if !_rules[ruleREL_EXISTS]() {
								goto l363
							}
						default:
							if !_rules[ruleWORLD]() {
								goto l363
							}
						}
					}

				}
			l365:
				add(ruleKeyword, position364)
			}
			return true
		l363:
			position, tokenIndex = position363, tokenIndex363
			return false
		},
		/* 60 WORLD <- <('w' 'o' 'r' 'l' 'd' _)> */
		func() bool {
			position375, tokenIndex375 := position, tokenIndex
			{
				position376 := position
				if buffer[position] != rune('w') {
					goto l375
				}
				position++
				if buffer[position] != rune('o') {
					goto l375
				}
				position++
				if buffer[position] != rune('r') {
					goto l375
				}
				position++
				if buffer[position] != rune('l') {
					goto l375
				}
				position++
				if buffer[position] != rune('d') {
					goto l375
				}
				position++
				if !_rules[rule_]() {
					goto l375
				}
				add(ruleWORLD, position376)
			}
			return true
		l375:
			position, tokenIndex = position375, tokenIndex375
			return false
		},
		/* 61 ENDWORLD <- <('e' 'n' 'd' 'w' 'o' 'r' 'l' 'd' _)> */
		func() bool {
			position377, tokenIndex377 := position, tokenIndex
			{
				position378 := position
				if buffer[position] != rune('e') {
					goto l377
				}
				position++
				if buffer[position] != rune('n') {
					goto l377
				}
				position++
				if buffer[position] != rune('d') {
					goto l377
				}
				position++
				if buffer[position] != rune('w') {
					goto l377
				}
				position++
				if buffer[position] != rune('o') {
					goto l377
				}
				position++
				if buffer[position] != rune('r') {
					goto l377
				}
				position++
				if buffer[position] != rune('l') {
					goto l377
				}
				position++
				if buffer[position] != rune('d') {
					goto l377
				}
				position++
				if !_rules[rule_]() {
					goto l377
				}
				add(ruleENDWORLD, position378)
			}
			return true
		l377:
			position, tokenIndex = position377, tokenIndex377
			return false
		},
		/* 62 ERROR <- <('e' 'r' 'r' 'o' 'r' _)> */
		nil,
		/* 63 ITEM <- <('i' 't' 'e' 'm' 's'? _)> */
		func() bool {
			position380, tokenIndex380 := position, tokenIndex
			{
				position381 := position
				if buffer[position] != rune('i') {
					goto l380
				}
				position++
				if buffer[position] != rune('t') {
					goto l380
				}
				position++
				if buffer[position] != rune('e') {
					goto l380
				}
				position++
				if buffer[position] != rune('m') {
					goto l380
				}
				position++
				{
					position382, tokenIndex382 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l382
					}
					position++
					goto l383
				l382:
					position, tokenIndex = position382, tokenIndex382
				}
			l383:
				if !_rules[rule_]() {
					goto l380
				}
				add(ruleITEM, position381)
			}
			return true
		l380:
			position, tokenIndex = position380, tokenIndex380
			return false
		},
		/* 64 ITEM_EXISTS <- <('i' 't' 'e' 'm' '?' _)> */
		func() bool {
			position384, tokenIndex384 := position, tokenIndex
			{
				position385 := position
				if buffer[position] != rune('i') {
					goto l384
				}
				position++
				if buffer[position] != rune('t') {
					goto l384
				}
				position++
				if buffer[position] != rune('e') {
					goto l384
				}
				position++
				if buffer[position] != rune('m') {
					goto l384
				}
				position++
				if buffer[position] != rune('?') {
					goto l384
				}
				position++
				if !_rules[rule_]() {
					goto l384
				}
				add(ruleITEM_EXISTS, position385)
			}
			return true
		l384:
			position, tokenIndex = position384, tokenIndex384
			return false
		},
		/* 65 REL <- <('r' 'e' 'l' 's'? _)> */
		func() bool {
			position386, tokenIndex386 := position, tokenIndex
			{
				position387 := position
				if buffer[position] != rune('r') {
					goto l386
				}
				position++
				if buffer[position] != rune('e') {
					goto l386
				}
				position++
				if buffer[position] != rune('l') {
					goto l386
				}
				position++
				{
					position388, tokenIndex388 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l388
					}
					position++
					goto l389
				l388:
					position, tokenIndex = position388, tokenIndex388
				}
			l389:
				if !_rules[rule_]() {
					goto l386
				}
				add(ruleREL, position387)
			}
			return true
		l386:
			position, tokenIndex = position386, tokenIndex386
			return false
		},
		/* 66 REL_EXISTS <- <('r' 'e' 'l' '?' _)> */
		func() bool {
			position390, tokenIndex390 := position, tokenIndex
			{
				position391 := position
				if buffer[position] != rune('r') {
					goto l390
				}
				position++
				if buffer[position] != rune('e') {
					goto l390
				}
				position++
				if buffer[position] != rune('l') {
					goto l390
				}
				position++
				if buffer[position] != rune('?') {
					goto l390
				}
				position++
				if !_rules[rule_]() {
					goto l390
				}
				add(ruleREL_EXISTS, position391)
			}
			return true
		l390:
			position, tokenIndex = position390, tokenIndex390
			return false
		},
		/* 67 FROM_QUERY <- <('f' 'r' 'o' 'm' '?' _)> */
		func() bool {
			position392, tokenIndex392 := position, tokenIndex
			{
				position393 := position
				if buffer[position] != rune('f') {
					goto l392
				}
				position++
				if buffer[position] != rune('r') {
					goto l392
				}
				position++
				if buffer[position] != rune('o') {
					goto l392
				}
				position++
				if buffer[position] != rune('m') {
					goto l392
				}
				position++
				if buffer[position] != rune('?') {
					goto l392
				}
				position++
				if !_rules[rule_]() {
					goto l392
				}
				add(ruleFROM_QUERY, position393)
			}
			return true
		l392:
			position, tokenIndex = position392, tokenIndex392
			return false
		},
		/* 68 TO_QUERY <- <('t' 'o' '?' _)> */
		func() bool {
			position394, tokenIndex394 := position, tokenIndex
			{
				position395 := position
				if buffer[position] != rune('t') {
					goto l394
				}
				position++
				if buffer[position] != rune('o') {
					goto l394
				}
				position++
				if buffer[position] != rune('?') {
					goto l394
				}
				position++
				if !_rules[rule_]() {
					goto l394
				}
				add(ruleTO_QUERY, position395)
			}
			return true
		l394:
			position, tokenIndex = position394, tokenIndex394
			return false
		},
		/* 69 IN <- <('i' 'n' _)> */
		func() bool {
			position396, tokenIndex396 := position, tokenIndex
			{
				position397 := position
				if buffer[position] != rune('i') {
					goto l396
				}
				position++
				if buffer[position] != rune('n') {
					goto l396
				}
				position++
				if !_rules[rule_]() {
					goto l396
				}
				add(ruleIN, position397)
			}
			return true
		l396:
			position, tokenIndex = position396, tokenIndex396
			return false
		},
		/* 70 IN_QUERY <- <('i' 'n' '?' _)> */
		func() bool {
			position398, tokenIndex398 := position, tokenIndex
			{
				position399 := position
				if buffer[position] != rune('i') {
					goto l398
				}
				position++
				if buffer[position] != rune('n') {
					goto l398
				}
				position++
				if buffer[position] != rune('?') {
					goto l398
				}
				position++
				if !_rules[rule_]() {
					goto l398
				}
				add(ruleIN_QUERY, position399)
			}
			return true
		l398:
			position, tokenIndex = position398, tokenIndex398
			return false
		},
		/* 71 CREATE <- <('c' 'r' 'e' 'a' 't' 'e' _)> */
		func() bool {
			position400, tokenIndex400 := position, tokenIndex
			{
				position401 := position
				if buffer[position] != rune('c') {
					goto l400
				}
				position++
				if buffer[position] != rune('r') {
					goto l400
				}
				position++
				if buffer[position] != rune('e') {
					goto l400
				}
				position++
				if buffer[position] != rune('a') {
					goto l400
				}
				position++
				if buffer[position] != rune('t') {
					goto l400
				}
				position++
				if buffer[position] != rune('e') {
					goto l400
				}
				position++
				if !_rules[rule_]() {
					goto l400
				}
				add(ruleCREATE, position401)
			}
			return true
		l400:
			position, tokenIndex = position400, tokenIndex400
			return false
		},
		/* 72 DELETE <- <('d' 'e' 'l' 'e' 't' 'e' _)> */
		func() bool {
			position402, tokenIndex402 := position, tokenIndex
			{
				position403 := position
				if buffer[position] != rune('d') {
					goto l402
				}
				position++
				if buffer[position] != rune('e') {
					goto l402
				}
				position++
				if buffer[position] != rune('l') {
					goto l402
				}
				position++
				if buffer[position] != rune('e') {
					goto l402
				}
				position++
				if buffer[position] != rune('t') {
					goto l402
				}
				position++
				if buffer[position] != rune('e') {
					goto l402
				}
				position++
				if !_rules[rule_]() {
					goto l402
				}
				add(ruleDELETE, position403)
			}
			return true
		l402:
			position, tokenIndex = position402, tokenIndex402
			return false
		},
		/* 73 SET <- <('s' 'e' 't' _)> */
		func() bool {
			position404, tokenIndex404 := position, tokenIndex
			{
				position405 := position
				if buffer[position] != rune('s') {
					goto l404
				}
				position++
				if buffer[position] != rune('e') {
					goto l404
				}
				position++
				if buffer[position] != rune('t') {
					goto l404
				}
				position++
				if !_rules[rule_]() {
					goto l404
				}
				add(ruleSET, position405)
			}
			return true
		l404:
			position, tokenIndex = position404, tokenIndex404
			return false
		},
		/* 74 CLEAR <- <('c' 'l' 'e' 'a' 'r' _)> */
		func() bool {
			position406, tokenIndex406 := position, tokenIndex
			{
				position407 := position
				if buffer[position] != rune('c') {
					goto l406
				}
				position++
				if buffer[position] != rune('l') {
					goto l406
				}
				position++
				if buffer[position] != rune('e') {
					goto l406
				}
				position++
				if buffer[position] != rune('a') {
					goto l406
				}
				position++
				if buffer[position] != rune('r') {
					goto l406
				}
				position++
				if !_rules[rule_]() {
					goto l406
				}
				add(ruleCLEAR, position407)
			}
			return true
		l406:
			position, tokenIndex = position406, tokenIndex406
			return false
		},
		/* 75 FETCH <- <('f' 'e' 't' 'c' 'h' _)> */
		func() bool {
			position408, tokenIndex408 := position, tokenIndex
			{
				position409 := position
				if buffer[position] != rune('f') {
					goto l408
				}
				position++
				if buffer[position] != rune('e') {
					goto l408
				}
				position++
				if buffer[position] != rune('t') {
					goto l408
				}
				position++
				if buffer[position] != rune('c') {
					goto l408
				}
				position++
				if buffer[position] != rune('h') {
					goto l408
				}
				position++
				if !_rules[rule_]() {
					goto l408
				}
				add(ruleFETCH, position409)
			}
			return true
		l408:
			position, tokenIndex = position408, tokenIndex408
			return false
		},
		/* 76 LIST <- <('l' 'i' 's' 't' _)> */
		func() bool {
			position410, tokenIndex410 := position, tokenIndex
			{
				position411 := position
				if buffer[position] != rune('l') {
					goto l410
				}
				position++
				if buffer[position] != rune('i') {
					goto l410
				}
				position++
				if buffer[position] != rune('s') {
					goto l410
				}
				position++
				if buffer[position] != rune('t') {
					goto l410
				}
				position++
				if !_rules[rule_]() {
					goto l410
				}
				add(ruleLIST, position411)
			}
			return true
		l410:
			position, tokenIndex = position410, tokenIndex410
			return false
		},
		/* 77 EXISTS <- <('e' 'x' 'i' 's' 't' 's' _)> */
		func() bool {
			position412, tokenIndex412 := position, tokenIndex
			{
				position413 := position
				if buffer[position] != rune('e') {
					goto l412
				}
				position++
				if buffer[position] != rune('x') {
					goto l412
				}
				position++
				if buffer[position] != rune('i') {
					goto l412
				}
				position++
				if buffer[position] != rune('s') {
					goto l412
				}
				position++
				if buffer[position] != rune('t') {
					goto l412
				}
				position++
				if buffer[position] != rune('s') {
					goto l412
				}
				position++
				if !_rules[rule_]() {
					goto l412
				}
				add(ruleEXISTS, position413)
			}
			return true
		l412:
			position, tokenIndex = position412, tokenIndex412
			return false
		},
		/* 78 FREE <- <('f' 'r' 'e' 'e' _)> */
		func() bool {
			position414, tokenIndex414 := position, tokenIndex
			{
				position415 := position
				if buffer[position] != rune('f') {
					goto l414
				}
				position++
				if buffer[position] != rune('r') {
					goto l414
				}
				position++
				if buffer[position] != rune('e') {
					goto l414
				}
				position++
				if buffer[position] != rune('e') {
					goto l414
				}
				position++
				if !_rules[rule_]() {
					goto l414
				}
				add(ruleFREE, position415)
			}
			return true
		l414:
			position, tokenIndex = position414, tokenIndex414
			return false
		},
		/* 79 NEST <- <('n' 'e' 's' 't' _)> */
		func() bool {
			position416, tokenIndex416 := position, tokenIndex
			{
				position417 := position
				if buffer[position] != rune('n') {
					goto l416
				}
				position++
				if buffer[position] != rune('e') {
					goto l416
				}
				position++
				if buffer[position] != rune('s') {
					goto l416
				}
				position++
				if buffer[position] != rune('t') {
					goto l416
				}
				position++
				if !_rules[rule_]() {
					goto l416
				}
				add(ruleNEST, position417)
			}
			return true
		l416:
			position, tokenIndex = position416, tokenIndex416
			return false
		},
		/* 80 TRUE <- <('t' 'r' 'u' 'e' _)> */
		nil,
		/* 81 FALSE <- <('f' 'a' 'l' 's' 'e' _)> */
		nil,
		/* 82 EXTERNAL <- <('e' 'x' 't' 'e' 'r' 'n' 'a' 'l')> */
		func() bool {
			position420, tokenIndex420 := position, tokenIndex
			{
				position421 := position
				if buffer[position] != rune('e') {
					goto l420
				}
				position++
				if buffer[position] != rune('x') {
					goto l420
				}
				position++
				if buffer[position] != rune('t') {
					goto l420
				}
				position++
				if buffer[position] != rune('e') {
					goto l420
				}
				position++
				if buffer[position] != rune('r') {
					goto l420
				}
				position++
				if buffer[position] != rune('n') {
					goto l420
				}
				position++
				if buffer[position] != rune('a') {
					goto l420
				}
				position++
				if buffer[position] != rune('l') {
					goto l420
				}
				position++
				add(ruleEXTERNAL, position421)
			}
			return true
		l420:
			position, tokenIndex = position420, tokenIndex420
			return false
		},
		/* 83 NAME <- <('n' 'a' 'm' 'e')> */
		func() bool {
			position422, tokenIndex422 := position, tokenIndex
			{
				position423 := position
				if buffer[position] != rune('n') {
					goto l422
				}
				position++
				if buffer[position] != rune('a') {
					goto l422
				}
				position++
				if buffer[position] != rune('m') {
					goto l422
				}
				position++
				if buffer[position] != rune('e') {
					goto l422
				}
				position++
				add(ruleNAME, position423)
			}
			return true
		l422:
			position, tokenIndex = position422, tokenIndex422
			return false
		},
		/* 84 TYPE <- <('t' 'y' 'p' 'e')> */
		func() bool {
			position424, tokenIndex424 := position, tokenIndex
			{
				position425 := position
				if buffer[position] != rune('t') {
					goto l424
				}
				position++
				if buffer[position] != rune('y') {
					goto l424
				}
				position++
				if buffer[position] != rune('p') {
					goto l424
				}
				position++
				if buffer[position] != rune('e') {
					goto l424
				}
				position++
				add(ruleTYPE, position425)
			}
			return true
		l424:
			position, tokenIndex = position424, tokenIndex424
			return false
		},
		/* 85 VERB <- <('v' 'e' 'r' 'b')> */
		func() bool {
			position426, tokenIndex426 := position, tokenIndex
			{
				position427 := position
				if buffer[position] != rune('v') {
					goto l426
				}
				position++
				if buffer[position] != rune('e') {
					goto l426
				}
				position++
				if buffer[position] != rune('r') {
					goto l426
				}
				position++
				if buffer[position] != rune('b') {
					goto l426
				}
				position++
				add(ruleVERB, position427)
			}
			return true
		l426:
			position, tokenIndex = position426, tokenIndex426
			return false
		},
		/* 86 MECHANISM <- <('m' 'e' 'c' 'h' 'a' 'n' 'i' 's' 'm')> */
		func() bool {
			position428, tokenIndex428 := position, tokenIndex
			{
				position429 := position
				if buffer[position] != rune('m') {
					goto l428
				}
				position++
				if buffer[position] != rune('e') {
					goto l428
				}
				position++
				if buffer[position] != rune('c') {
					goto l428
				}
				position++
				if buffer[position] != rune('h') {
					goto l428
				}
				position++
				if buffer[position] != rune('a') {
					goto l428
				}
				position++
				if buffer[position] != rune('n') {
					goto l428
				}
				position++
				if buffer[position] != rune('i') {
					goto l428
				}
				position++
				if buffer[position] != rune('s') {
					goto l428
				}
				position++
				if buffer[position] != rune('m') {
					goto l428
				}
				position++
				add(ruleMECHANISM, position429)
			}
			return true
		l428:
			position, tokenIndex = position428, tokenIndex428
			return false
		},
		/* 87 ASYNC <- <('a' 's' 'y' 'n' 'c')> */
		func() bool {
			position430, tokenIndex430 := position, tokenIndex
			{
				position431 := position
				if buffer[position] != rune('a') {
					goto l430
				}
				position++
				if buffer[position] != rune('s') {
					goto l430
				}
				position++
				if buffer[position] != rune('y') {
					goto l430
				}
				position++
				if buffer[position] != rune('n') {
					goto l430
				}
				position++
				if buffer[position] != rune('c') {
					goto l430
				}
				position++
				add(ruleASYNC, position431)
			}
			return true
		l430:
			position, tokenIndex = position430, tokenIndex430
			return false
		},
		/* 88 EXPANDED <- <('e' 'x' 'p' 'a' 'n' 'd' 'e' 'd')> */
		func() bool {
			position432, tokenIndex432 := position, tokenIndex
			{
				position433 := position
				if buffer[position] != rune('e') {
					goto l432
				}
				position++
				if buffer[position] != rune('x') {
					goto l432
				}
				position++
				if buffer[position] != rune('p') {
					goto l432
				}
				position++
				if buffer[position] != rune('a') {
					goto l432
				}
				position++
				if buffer[position] != rune('n') {
					goto l432
				}
				position++
				if buffer[position] != rune('d') {
					goto l432
				}
				position++
				if buffer[position] != rune('e') {
					goto l432
				}
				position++
				if buffer[position] != rune('d') {
					goto l432
				}
				position++
				add(ruleEXPANDED, position433)
			}
			return true
		l432:
			position, tokenIndex = position432, tokenIndex432
			return false
		},
		/* 89 PERSON <- <('p' 'e' 'r' 's' 'o' 'n' _)> */
		nil,
		/* 90 DATABASE <- <('d' 'a' 't' 'a' 'b' 'a' 's' 'e' _)> */
		nil,
		/* 91 QUEUE <- <('q' 'u' 'e' 'u' 'e' _)> */
		nil,
		/* 92 BLOBSTORE <- <('b' 'l' 'o' 'b' 's' 't' 'o' 'r' 'e' _)> */
		nil,
		/* 93 BROWSER <- <('b' 'r' 'o' 'w' 's' 'e' 'r' _)> */
		nil,
		/* 94 MOBILE <- <('m' 'o' 'b' 'i' 'l' 'e' _)> */
		nil,
		/* 95 SERVER <- <('s' 'e' 'r' 'v' 'e' 'r' _)> */
		nil,
		/* 96 DEVICE <- <('d' 'e' 'v' 'i' 'c' 'e' _)> */
		nil,
		/* 97 CODE <- <('c' 'o' 'd' 'e' _)> */
		nil,
		/* 98 DELIMITER <- <('$' '$')> */
		func() bool {
			position443, tokenIndex443 := position, tokenIndex
			{
				position444 := position
				if buffer[position] != rune('$') {
					goto l443
				}
				position++
				if buffer[position] != rune('$') {
					goto l443
				}
				position++
				add(ruleDELIMITER, position444)
			}
			return true
		l443:
			position, tokenIndex = position443, tokenIndex443
			return false
		},
		/* 99 QUOTE <- <'"'> */
		func() bool {
			position445, tokenIndex445 := position, tokenIndex
			{
				position446 := position
				if buffer[position] != rune('"') {
					goto l445
				}
				position++
				add(ruleQUOTE, position446)
			}
			return true
		l445:
			position, tokenIndex = position445, tokenIndex445
			return false
		},
		/* 100 EQUALS <- <'='> */
		func() bool {
			position447, tokenIndex447 := position, tokenIndex
			{
				position448 := position
				if buffer[position] != rune('=') {
					goto l447
				}
				position++
				add(ruleEQUALS, position448)
			}
			return true
		l447:
			position, tokenIndex = position447, tokenIndex447
			return false
		},
		/* 101 FLAG <- <('-' '-'?)> */
		func() bool {
			position449, tokenIndex449 := position, tokenIndex
			{
				position450 := position
				if buffer[position] != rune('-') {
					goto l449
				}
				position++
				{
					position451, tokenIndex451 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l451
					}
					position++
					goto l452
				l451:
					position, tokenIndex = position451, tokenIndex451
				}
			l452:
				add(ruleFLAG, position450)
			}
			return true
		l449:
			position, tokenIndex = position449, tokenIndex449
			return false
		},
		/* 102 STRICT <- <('s' 't' 'r' 'i' 'c' 't' _)> */
		nil,
		/* 103 VERBOSE <- <('v' 'e' 'r' 'b' 'o' 's' 'e' _)> */
		nil,
		/* 104 IDS <- <('i' 'd' 's' _)> */
		nil,
		/* 105 _ <- <Whitespace*> */
		func() bool {
			{
				position457 := position
			l458:
				{
					position459, tokenIndex459 := position, tokenIndex
					{
						position460 := position
						{
							switch buffer[position] {
							case '\t':
								if buffer[position] != rune('\t') {
									goto l459
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l459
								}
								position++
							default:
								if !_rules[ruleEOL]() {
									goto l459
								}
							}
						}

						add(ruleWhitespace, position460)
					}
					goto l458
				l459:
					position, tokenIndex = position459, tokenIndex459
				}
				add(rule_, position457)
			}
			return true
		},
		/* 106 Whitespace <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') EOL))> */
		nil,
		/* 107 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position463, tokenIndex463 := position, tokenIndex
			{
				position464 := position
				{
					position465, tokenIndex465 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l466
					}
					position++
					if buffer[position] != rune('\n') {
						goto l466
					}
					position++
					goto l465
				l466:
					position, tokenIndex = position465, tokenIndex465
					if buffer[position] != rune('\n') {
						goto l467
					}
					position++
					goto l465
				l467:
					position, tokenIndex = position465, tokenIndex465
					if buffer[position] != rune('\r') {
						goto l463
					}
					position++
				}
			l465:
				add(ruleEOL, position464)
			}
			return true
		l463:
			position, tokenIndex = position463, tokenIndex463
			return false
		},
		/* 108 END <- <!.> */
		func() bool {
			position468, tokenIndex468 := position, tokenIndex
			{
				position469 := position
				{
					position470, tokenIndex470 := position, tokenIndex
					if !matchDot() {
						goto l470
					}
					goto l468
				l470:
					position, tokenIndex = position470, tokenIndex470
				}
				add(ruleEND, position469)
			}
			return true
		l468:
			position, tokenIndex = position468, tokenIndex468
			return false
		},
		/* 110 Action0 <- <{
		   p.StmtType = "Response"
		 }> */
		nil,
		/* 111 Action1 <- <{
		   p.StmtType = "Command"
		 }> */
		nil,
		nil,
		/* 113 Action2 <- <{ p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text)) }> */
		nil,
		/* 114 Action3 <- <{ p.InputAttributes.Verb = "fetch" }> */
		nil,
		/* 115 Action4 <- <{ p.InputAttributes.Verb = "list" }> */
		nil,
		/* 116 Action5 <- <{ p.InputAttributes.Verb = "create-or-fetch" }> */
		nil,
		/* 117 Action6 <- <{ p.InputAttributes.Verb = "create-or-set" }> */
		nil,
		/* 118 Action7 <- <{ p.Response.Object.Repr = cleanString(text) }> */
		nil,
		/* 119 Action8 <- <{ p.Response.Object.Repr = cleanString(text) }> */
		nil,
		/* 120 Action9 <- <{ p.Response.Object.Repr = cleanString(text) }> */
		nil,
		/* 121 Action10 <- <{
		   p.Response.Error.Message = cleanString(text)
		   if p.number != 0 {
		     p.Response.Error.Code = p.number
		   }
		 }> */
		nil,
		/* 122 Action11 <- <{ p.InputAttributes.Params["limit"] = cleanString(text) }> */
		nil,
		/* 123 Action12 <- <{ p.InputAttributes.ResourceId = cleanString(text) }> */
		nil,
		/* 124 Action13 <- <{
		   p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text))
		 }> */
		nil,
		/* 125 Action14 <- <{
		   p.InputAttributes.ResourceId = ""
		   ids := strings.Fields(text)
		   for _, id := range ids {
		     p.InputAttributes.ResourceIds = append(p.InputAttributes.ResourceIds, cleanString(id))
		   }
		 }> */
		nil,
		/* 126 Action15 <- <{ p.Params["external"] = cleanString(text) }> */
		nil,
		/* 127 Action16 <- <{ p.Params["type"] = cleanString(text) }> */
		nil,
		/* 128 Action17 <- <{ p.Params["name"] = cleanString(text) }> */
		nil,
		/* 129 Action18 <- <{ p.Params["mechanism"] = cleanString(text) }> */
		nil,
		/* 130 Action19 <- <{ p.Params["expanded"] = cleanString(text) }> */
		nil,
		/* 131 Action20 <- <{ p.Params["verb"] = cleanString(text) }> */
		nil,
		/* 132 Action21 <- <{ p.Params["mechanism"] = cleanString(text) }> */
		nil,
		/* 133 Action22 <- <{ p.Params["async"] = cleanString(text) }> */
		nil,
		/* 134 Action23 <- <{ p.Params["expanded"] = cleanString(text) }> */
		nil,
		/* 135 Action24 <- <{ p.InputAttributes.Params[cleanString(text)] = "" }> */
		nil,
		/* 136 Action25 <- <{ p.InputAttributes.Params[cleanString(text)] = "" }> */
		nil,
		/* 137 Action26 <- <{ p.text = cleanString(text) }> */
		nil,
		/* 138 Action27 <- <{ n, _ := strconv.Atoi(text); p.number = n }> */
		nil,
		/* 139 Action28 <- <{ p.bool = text == "true" }> */
		nil,
		/* 140 Action29 <- <{ p.InputAttributes.ResourceType = "item"; p.InputAttributes.Verb = "exists" }> */
		nil,
		/* 141 Action30 <- <{ p.InputAttributes.ResourceType = "rel"; p.InputAttributes.Verb = "exists" }> */
		nil,
		/* 142 Action31 <- <{ p.InputAttributes.ResourceType = "world" }> */
		nil,
		/* 143 Action32 <- <{ p.InputAttributes.ResourceType = "item" }> */
		nil,
		/* 144 Action33 <- <{ p.InputAttributes.ResourceType = "rel" }> */
		nil,
		/* 145 Action34 <- <{ p.InputAttributes.Verb = "create" }> */
		nil,
		/* 146 Action35 <- <{ p.InputAttributes.Verb = "fetch" }> */
		nil,
		/* 147 Action36 <- <{ p.InputAttributes.Verb = "set" }> */
		nil,
		/* 148 Action37 <- <{ p.InputAttributes.Verb = "clear" }> */
		nil,
		/* 149 Action38 <- <{ p.InputAttributes.Verb = "delete" }> */
		nil,
		/* 150 Action39 <- <{ p.InputAttributes.Verb = "list" }> */
		nil,
		/* 151 Action40 <- <{ p.InputAttributes.Verb = "nest"; p.InputAttributes.ResourceType = "item" }> */
		nil,
		/* 152 Action41 <- <{ p.InputAttributes.Verb = "free"; p.InputAttributes.ResourceType = "item" }> */
		nil,
		/* 153 Action42 <- <{ p.InputAttributes.Verb = "in?"; p.InputAttributes.ResourceType = "item" }> */
		nil,
		/* 154 Action43 <- <{ p.InputAttributes.Verb = "from?"; p.InputAttributes.ResourceType = "rel" }> */
		nil,
		/* 155 Action44 <- <{ p.InputAttributes.Verb = "to?"; p.InputAttributes.ResourceType = "rel" }> */
		nil,
		/* 156 Action45 <- <{ p.InputAttributes.Verb = "exists"; p.InputAttributes.ResourceType = "rel" }> */
		nil,
		/* 157 Action46 <- <{ p.InputAttributes.Flags = append(p.InputAttributes.Flags, "strict") }> */
		nil,
		/* 158 Action47 <- <{ p.InputAttributes.Flags = append(p.InputAttributes.Flags, "verbose") }> */
		nil,
		/* 159 Action48 <- <{ p.InputAttributes.Flags = append(p.InputAttributes.Flags, "ids") }> */
		nil,
	}
	p.rules = _rules
	return nil
}
