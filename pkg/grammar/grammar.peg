package grammar

import (
    "encoding/json"
)

type Parser Peg {
    StmtType       string
    InputAttributes
    Response

    text   string // Text parsed by the StringLike rule.
    number int    // Number parsed by the Number rule.
    bool   bool   // Boolean parsed by the Boolean rule.

    Tree        Node         // The root of the world.Tree.
    TreeString  string       // Track the string representation of the Tree parsed by the Tree rule.
    ItemStrings []string     // Track the string representations of Items parsed by the ItemObject rule.
    RelStrings  []string     // Track the string representations of Rels parsed by the RelObject rule.

    currentId string // Current Identifier being parsed.
    nodeStack []Node // Stack of nodes for building the tree.
}

Valid
  <- Command / Response / Tree

Response
  <- Objects? _ DELIMITER DELIMITER _ ErrorOrOkay END
  {
    p.StmtType = "Response"
  }

Command
  <- _ (Mutation / TreeMutation / Query / StateBound) Flag* END
  {
    p.StmtType = "Command"
    p.InputAttributes.Raw = p.Buffer
  }

Mutation
  <- Item (Create / Set) Identifier ItemParams?
  / Item Clear Identifier ItemKeys
  / Item Delete Identifier
  / Rel (Create / Set) DualIdentifier RelParams?
  / Rel Clear DualIdentifier RelKeys
  / Rel Delete DualIdentifier

TreeMutation
  <- Free IdentifierList
  / Nest IdentifierList _ IN <StringLike> { p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text)) }

Query
  <- FetchQuery / ListQuery / ExistsQuery

FetchQuery
  <- Item Fetch Identifier
  / Rel Fetch DualIdentifier
  / World { p.InputAttributes.Verb = "fetch" }

ListQuery
  <- (Item / Rel ) List Limit?
  # Get all Items under this one in the Tree.
  / Item IN Identifier  { p.InputAttributes.Verb = "list" }
  / ToQuery Identifier
  / FromQuery Identifier

ExistsQuery
  <- InQuery DualIdentifier   # Does this Item exist under the other?
  / ItemExists Identifier
  / RelExists DualIdentifier

StateBound
  <- CreateOrFetch  { p.InputAttributes.Verb = "create-or-fetch" }
  / CreateOrSet     { p.InputAttributes.Verb = "create-or-set" }

CreateOrFetch
  <- Item Identifier !ItemParams / Rel DualIdentifier !RelParams

CreateOrSet
  <- Item Identifier ItemParams / Rel DualIdentifier RelParams

Objects
  <- WorldObject / Tree / ItemObject+ / RelObject+ / IdentifierListObject

WorldObject             <- BeginWorld Tree RelObject* EndWorld  { p.Response.Object.Type = "world"; p.Response.Object.Repr = strings.Join(append([]string{p.TreeString}, p.RelStrings...), "\n") }
ItemObject              <- <Item Identifier ItemParams?>
  {
    p.Response.Object.Type = "item"; p.Response.Object.Repr = cleanString(text); p.ItemStrings = append(p.ItemStrings, strings.TrimSpace(text))
    p.currentId = p.InputAttributes.ResourceId
    p.nodeStack = append(p.nodeStack, Node{Id: p.currentId, Children: []Node{}})
  }
RelObject               <- <Rel DualIdentifier RelParams?>      { p.Response.Object.Type = "rel"; p.Response.Object.Repr = cleanString(text); p.RelStrings = append(p.RelStrings, strings.TrimSpace(text)) }
IdentifierListObject    <- IdentifierList                       { p.Response.Object.Type = "ids"; b, _ := json.Marshal(p.InputAttributes.ResourceIds); p.Response.Object.Repr = string(b) }
Tree
  <- <'tree{' (Nil / ItemObject) '::[' Tree* ']}'> _
  {
    p.StmtType = "Tree"; p.Response.Object.Type = "tree"; p.Response.Object.Repr = text; p.TreeString = text
    if len(p.nodeStack) > 0 {
      node := p.nodeStack[len(p.nodeStack)-1]
      p.nodeStack = p.nodeStack[:len(p.nodeStack)-1]
      if len(p.nodeStack) > 0 {
        p.nodeStack[len(p.nodeStack)-1].Children = append(p.nodeStack[len(p.nodeStack)-1].Children, node)
      } else {
        p.Tree = node
      }
    }
  }

Nil <- 'nil'
    {
      p.currentId = "nil"
      p.nodeStack = append(p.nodeStack, Node{Id: p.currentId, Children: []Node{}})
    }

ErrorOrOkay
  <- ErrCode (ERROR / OK) <StringLike*>
  {
    p.Response.Status.Message = cleanString(text)
  }

ErrCode <- <Number> { p.Response.Status.Code = p.number }
Limit   <- <Number> { p.InputAttributes.Params["limit"] = cleanString(text) }

Identifier
  <- !Keyword <StringLike>
  { p.InputAttributes.ResourceId = cleanString(text) }

SecondIdentifier
  <- !Keyword &Identifier <StringLike>
  {
    p.InputAttributes.SecondaryIds = append(p.InputAttributes.SecondaryIds, cleanString(text))
  }

DualIdentifier
  <- Identifier SecondIdentifier

IdentifierList
  <- <Identifier Identifier*>
  {
    p.InputAttributes.ResourceId = ""
    ids := strings.Fields(text)
    for _, id := range ids {
      p.InputAttributes.ResourceIds = append(p.InputAttributes.ResourceIds, cleanString(id))
    }
  }

ItemParams  <- (ItemParam)+
RelParams   <- (RelParam)+

ItemParam
  <- EXTERNAL EQUALS <Boolean>      { p.Params["external"] = cleanString(text) }
  / TYPE EQUALS <ItemType>          { p.Params["type"] = cleanString(text) }
  / NAME EQUALS <StringLike>        { p.Params["name"] = cleanString(text) }
  / MECHANISM EQUALS <StringLike>   { p.Params["mechanism"] = cleanString(text) }
  / EXPANDED EQUALS <StringLike>    { p.Params["expanded"] = cleanString(text) }

RelParam
  <- VERB EQUALS <StringLike>       { p.Params["verb"] = cleanString(text) }
  / MECHANISM EQUALS <StringLike>   { p.Params["mechanism"] = cleanString(text) }
  / ASYNC EQUALS <Boolean>          { p.Params["async"] = cleanString(text) }
  / EXPANDED EQUALS <StringLike>    { p.Params["expanded"] = cleanString(text) }

ItemKeys    <- (ItemKey)+
RelKeys     <- (RelKey)+

# Useful to store these for "clear" commands.
ItemKey     <- (<NAME / TYPE / EXTERNAL / MECHANISM / EXPANDED>) _  { p.InputAttributes.Params[cleanString(text)] = "" }
RelKey      <- (<VERB / MECHANISM / ASYNC / EXPANDED>) _              { p.InputAttributes.Params[cleanString(text)] = "" }

StringLike  <- < (Text / QuotedText) > _    { p.text = cleanString(text) }
Number      <- < [0-9]+ > _                 { n, _ := strconv.Atoi(text); p.number = n }
Boolean     <- <TRUE / FALSE>               { p.bool = text == "true" }
Text        <- [a-zA-Z0-9-_]+
QuotedText  <- QUOTE [a-zA-Z0-9-_.,!@#$%^&*()\[\]+=~;: ]* QUOTE

ItemExists  <- (ITEM_EXISTS / Item Exists)  { p.InputAttributes.ResourceType = "item"; p.InputAttributes.Verb = "exists" }
RelExists   <- (REL_EXISTS / Rel Exists)    { p.InputAttributes.ResourceType = "rel"; p.InputAttributes.Verb = "exists" }

World   <- WORLD    { p.InputAttributes.ResourceType = "world" }
Item    <- ITEM     { p.InputAttributes.ResourceType = "item" }
Rel     <- REL      { p.InputAttributes.ResourceType = "rel" }

Create      <- CREATE       { p.InputAttributes.Verb = "create" }
Fetch       <- FETCH        { p.InputAttributes.Verb = "fetch" }
Set         <- SET          { p.InputAttributes.Verb = "set" }
Clear       <- CLEAR        { p.InputAttributes.Verb = "clear" }
Delete      <- DELETE       { p.InputAttributes.Verb = "delete" }
List        <- LIST         { p.InputAttributes.Verb = "list" }
Nest        <- NEST         { p.InputAttributes.Verb = "nest"; p.InputAttributes.ResourceType = "item" }
Free        <- FREE         { p.InputAttributes.Verb = "free"; p.InputAttributes.ResourceType = "item" }
Exists      <- EXISTS       { p.InputAttributes.Verb = "exists" }
InQuery     <- IN_QUERY     { p.InputAttributes.Verb = "in?"; p.InputAttributes.ResourceType = "item" }
FromQuery   <- FROM_QUERY   { p.InputAttributes.Verb = "from?"; p.InputAttributes.ResourceType = "rel" }
ToQuery     <- TO_QUERY     { p.InputAttributes.Verb = "to?"; p.InputAttributes.ResourceType = "rel" }

Flag            <- StrictFlag / VerboseFlag / IdsFlag
StrictFlag      <- FLAG STRICT  { p.InputAttributes.Flags = append(p.InputAttributes.Flags, "strict") }
VerboseFlag     <- FLAG VERBOSE { p.InputAttributes.Flags = append(p.InputAttributes.Flags, "verbose") }
IdsFlag         <- FLAG IDS     { p.InputAttributes.Flags = append(p.InputAttributes.Flags, "ids") }

BeginWorld  <- _ DELIMITER WORLD _
EndWorld    <- _ ENDWORLD DELIMITER _

ItemType
  <- PERSON / DATABASE / QUEUE / BLOBSTORE / BROWSER / MOBILE / SERVER / DEVICE / CODE

Keyword
  <- WORLD / ENDWORLD / ERROR / OK / ITEM / ITEM_EXISTS / REL / REL_EXISTS / FROM_QUERY / TO_QUERY / IN / IN_QUERY / CREATE / DELETE / SET / CLEAR / FETCH / LIST / EXISTS / FREE / NEST / FLAG / DELIMITER

WORLD       <- 'world' _
ENDWORLD    <- 'endworld' _
ERROR       <- 'error' _
OK          <- 'ok' _
ITEM        <- 'item' 's'? _
ITEM_EXISTS <- 'item?' _
REL         <- 'rel' 's'? _
REL_EXISTS  <- 'rel?' _
FROM_QUERY  <- 'from?' _    # Rels from this Item to anywhere.
TO_QUERY    <- 'to?' _      # Rels from anywhere to this Item.
IN          <- 'in' _
IN_QUERY    <- 'in?' _      # Items under this one in the Tree, recursively unless STRICT set.
CREATE      <- 'create' _
DELETE      <- 'delete' _
SET         <- 'set' _
CLEAR       <- 'clear' _
FETCH       <- 'fetch' _
LIST        <- 'list' _
EXISTS      <- 'exists' _
FREE        <- 'free' _
NEST        <- 'nest' _
TRUE        <- 'true' _
FALSE       <- 'false' _

EXTERNAL    <- 'external'
NAME        <- 'name'
TYPE        <- 'type'
VERB        <- 'verb'
MECHANISM   <- 'mechanism'
ASYNC       <- 'async'
EXPANDED    <- 'expanded'

PERSON      <- 'person' _
DATABASE    <- 'database' _
QUEUE       <- 'queue' _
BLOBSTORE   <- 'blobstore' _
BROWSER     <- 'browser' _
MOBILE      <- 'mobile' _
SERVER      <- 'server' _
DEVICE      <- 'device' _
CODE        <- 'code' _

DELIMITER   <- '$$'
QUOTE       <- '"'
EQUALS      <- '='

FLAG       <- '-' '-'?
STRICT     <- 'strict' _
VERBOSE    <- 'verbose' _
IDS        <- 'ids' _

_
  <- Whitespace*

Whitespace
  <- ' ' / '\t' / EOL

EOL
  <- '\r\n' / '\n' / '\r'

END
  <- !.